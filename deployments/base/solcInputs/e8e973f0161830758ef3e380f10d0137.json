{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\nimport \"../token/ERC721/IERC721Receiver.sol\";\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    bytes32 public constant CANCELLER_ROLE = keccak256(\"CANCELLER_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\n     */\n    event CallSalt(bytes32 indexed id, bytes32 salt);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with the following parameters:\n     *\n     * - `minDelay`: initial minimum delay for operations\n     * - `proposers`: accounts to be granted proposer and canceller roles\n     * - `executors`: accounts to be granted executor role\n     * - `admin`: optional account to be granted admin role; disable with zero address\n     *\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\n     * without being subject to delay, but this role should be subsequently renounced in favor of\n     * administration through timelocked proposals. Previous versions of this contract would assign\n     * this admin to the deployer automatically and should be renounced as well.\n     */\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address admin) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // optional admin\n        if (admin != address(0)) {\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\n        }\n\n        // register proposers and cancellers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n            _setupRole(CANCELLER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\".\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\".\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to become valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'canceller' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata payload,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        _execute(target, value, payload);\n        emit CallExecuted(id, 0, target, value, payload);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            address target = targets[i];\n            uint256 value = values[i];\n            bytes calldata payload = payloads[i];\n            _execute(target, value, payload);\n            emit CallExecuted(id, i, target, value, payload);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     */\n    function _execute(address target, uint256 value, bytes calldata data) internal virtual {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/CErc20.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\n\r\ninterface CompLike {\r\n    function delegate(address delegatee) external;\r\n}\r\n\r\n/**\r\n * @title Compound's CErc20 Contract\r\n * @notice CTokens which wrap an EIP-20 underlying\r\n * @author Compound\r\n */\r\ncontract CErc20 is CToken, CErc20Interface {\r\n    /**\r\n     * @notice Initialize the new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     */\r\n    function initialize(address underlying_,\r\n                        ComptrollerInterface comptroller_,\r\n                        InterestRateModel interestRateModel_,\r\n                        uint initialExchangeRateMantissa_,\r\n                        string memory name_,\r\n                        string memory symbol_,\r\n                        uint8 decimals_) public {\r\n        // CToken initialize does the bulk of the work\r\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\r\n\r\n        // Set underlying and sanity check it\r\n        underlying = underlying_;\r\n        EIP20Interface(underlying).totalSupply();\r\n    }\r\n\r\n    /*** User Interface ***/\r\n\r\n    /**\r\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function mint(uint mintAmount) override external returns (uint) {\r\n        mintInternal(mintAmount);\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeem(uint redeemTokens) override external returns (uint) {\r\n        redeemInternal(redeemTokens);\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeemUnderlying(uint redeemAmount) override external returns (uint) {\r\n        redeemUnderlyingInternal(redeemAmount);\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n      * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function borrow(uint borrowAmount) override external returns (uint) {\r\n        borrowInternal(borrowAmount);\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function repayBorrow(uint repayAmount) override external returns (uint) {\r\n        repayBorrowInternal(repayAmount);\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) override external returns (uint) {\r\n        repayBorrowBehalfInternal(borrower, repayAmount);\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) override external returns (uint) {\r\n        liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\r\n     * @param token The address of the ERC-20 token to sweep\r\n     */\r\n    function sweepToken(EIP20NonStandardInterface token) override external {\r\n        require(msg.sender == admin, \"CErc20::sweepToken: only admin can sweep tokens\");\r\n        require(address(token) != underlying, \"CErc20::sweepToken: can not sweep underlying token\");\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(admin, balance);\r\n    }\r\n\r\n    /**\r\n     * @notice The sender adds to reserves.\r\n     * @param addAmount The amount fo underlying token to add as reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _addReserves(uint addAmount) override external returns (uint) {\r\n        return _addReservesInternal(addAmount);\r\n    }\r\n\r\n    /*** Safe Token ***/\r\n\r\n    /**\r\n     * @notice Gets balance of this contract in terms of the underlying\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of underlying tokens owned by this contract\r\n     */\r\n    function getCashPrior() virtual override internal view returns (uint) {\r\n        EIP20Interface token = EIP20Interface(underlying);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\r\n     *      This will revert due to insufficient balance or insufficient allowance.\r\n     *      This function returns the actual amount received,\r\n     *      which may be less than `amount` if there is a fee attached to the transfer.\r\n     *\r\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n     */\r\n    function doTransferIn(address from, uint amount) virtual override internal returns (uint) {\r\n        // Read from storage once\r\n        address underlying_ = underlying;\r\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying_);\r\n        uint balanceBefore = EIP20Interface(underlying_).balanceOf(address(this));\r\n        token.transferFrom(from, address(this), amount);\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {                       // This is a non-standard ERC-20\r\n                    success := not(0)          // set success to true\r\n                }\r\n                case 32 {                      // This is a compliant ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)        // Set `success = returndata` of override external call\r\n                }\r\n                default {                      // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_IN_FAILED\");\r\n\r\n        // Calculate the amount that was *actually* transferred\r\n        uint balanceAfter = EIP20Interface(underlying_).balanceOf(address(this));\r\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\r\n    }\r\n\r\n    /**\r\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\r\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\r\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\r\n     *      it is >= amount, this should not revert in normal conditions.\r\n     *\r\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n     */\r\n    function doTransferOut(address payable to, uint amount) virtual override internal {\r\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\r\n        token.transfer(to, amount);\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {                      // This is a non-standard ERC-20\r\n                    success := not(0)          // set success to true\r\n                }\r\n                case 32 {                     // This is a compliant ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)        // Set `success = returndata` of override external call\r\n                }\r\n                default {                     // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\r\n    }\r\n\r\n    /**\r\n    * @notice Admin call to delegate the votes of the COMP-like underlying\r\n    * @param compLikeDelegatee The address to delegate votes to\r\n    * @dev CTokens whose underlying are not CompLike should revert here\r\n    */\r\n    function _delegateCompLikeTo(address compLikeDelegatee) external {\r\n        require(msg.sender == admin, \"only the admin may set the comp-like delegate\");\r\n        CompLike(underlying).delegate(compLikeDelegatee);\r\n    }\r\n}\r\n"
    },
    "contracts/CErc20Immutable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CErc20.sol\";\r\n\r\n/**\r\n * @title Compound's CErc20Immutable Contract\r\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\r\n * @author Compound\r\n */\r\ncontract CErc20Immutable is CErc20 {\r\n    /**\r\n     * @notice Construct a new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     * @param admin_ Address of the administrator of this token\r\n     */\r\n    constructor(address underlying_,\r\n                ComptrollerInterface comptroller_,\r\n                InterestRateModel interestRateModel_,\r\n                uint initialExchangeRateMantissa_,\r\n                string memory name_,\r\n                string memory symbol_,\r\n                uint8 decimals_,\r\n                address payable admin_) {\r\n        // Creator of the contract is admin during initialization\r\n        admin = payable(msg.sender);\r\n\r\n        // Initialize the market\r\n        initialize(underlying_, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\r\n\r\n        // Set the proper admin now that initialization is done\r\n        admin = admin_;\r\n    }\r\n}\r\n"
    },
    "contracts/CErc20Upgradable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\nimport \"./CErc20.sol\";\r\n\r\n/**\r\n * @title Compound's CErc20Immutable Contract\r\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\r\n * @author Compound\r\n */\r\ncontract CErc20Upgradable is Initializable, CErc20 {\r\n    /**\r\n     * @notice Initialize the new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     */\r\n    function proxyInitialize(\r\n        address underlying_,\r\n        ComptrollerInterface comptroller_,\r\n        InterestRateModel interestRateModel_,\r\n        uint initialExchangeRateMantissa_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        address payable admin_\r\n    ) public initializer {\r\n        // Creator of the contract is admin during initialization\r\n        admin = payable(msg.sender);\r\n\r\n        // CErc20 initialize does the bulk of the work\r\n        super.initialize(\r\n            underlying_,\r\n            comptroller_,\r\n            interestRateModel_,\r\n            initialExchangeRateMantissa_,\r\n            name_,\r\n            symbol_,\r\n            decimals_\r\n        );\r\n\r\n        // Set the proper admin now that initialization is done\r\n        admin = admin_;\r\n    }\r\n}\r\n"
    },
    "contracts/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./PriceOracle.sol\";\r\nimport \"./ComptrollerInterface.sol\";\r\nimport \"./ComptrollerStorage.sol\";\r\nimport \"./Unitroller.sol\";\r\nimport \"./Governance/Comp.sol\";\r\n\r\n/**\r\n * @title Compound's Comptroller Contract\r\n * @author Compound\r\n */\r\ncontract Comptroller is\r\n    ComptrollerV8Storage,\r\n    ComptrollerInterface,\r\n    ComptrollerErrorReporter,\r\n    ExponentialNoError\r\n{\r\n    /// @notice Emitted when an admin supports a market\r\n    event MarketListed(CToken cToken);\r\n\r\n    /// @notice Emitted when an account enters a market\r\n    event MarketEntered(CToken cToken, address account);\r\n\r\n    /// @notice Emitted when an account exits a market\r\n    event MarketExited(CToken cToken, address account);\r\n\r\n    /// @notice Emitted when close factor is changed by admin\r\n    event NewCloseFactor(\r\n        uint256 oldCloseFactorMantissa,\r\n        uint256 newCloseFactorMantissa\r\n    );\r\n\r\n    /// @notice Emitted when a collateral factor is changed by admin\r\n    event NewCollateralFactor(\r\n        CToken cToken,\r\n        uint256 oldCollateralFactorMantissa,\r\n        uint256 newCollateralFactorMantissa\r\n    );\r\n\r\n    /// @notice Emitted when liquidation incentive is changed by admin\r\n    event NewLiquidationIncentive(\r\n        uint256 oldLiquidationIncentiveMantissa,\r\n        uint256 newLiquidationIncentiveMantissa\r\n    );\r\n\r\n    /// @notice Emitted when price oracle is changed\r\n    event NewPriceOracle(\r\n        PriceOracle oldPriceOracle,\r\n        PriceOracle newPriceOracle\r\n    );\r\n\r\n    /// @notice Emitted when pause guardian is changed\r\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\r\n\r\n    /// @notice Emitted when an action is paused globally\r\n    event ActionPaused(string action, bool pauseState);\r\n\r\n    /// @notice Emitted when an action is paused on a market\r\n    event ActionPaused(CToken cToken, string action, bool pauseState);\r\n\r\n    /// @notice Emitted when a new borrow-side COMP speed is calculated for a market\r\n    event CompBorrowSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\r\n\r\n    /// @notice Emitted when a new supply-side COMP speed is calculated for a market\r\n    event CompSupplySpeedUpdated(CToken indexed cToken, uint256 newSpeed);\r\n\r\n    /// @notice Emitted when a new COMP speed is set for a contributor\r\n    event ContributorCompSpeedUpdated(\r\n        address indexed contributor,\r\n        uint256 newSpeed\r\n    );\r\n\r\n    /// @notice Emitted when COMP is distributed to a supplier\r\n    event DistributedSupplierComp(\r\n        CToken indexed cToken,\r\n        address indexed supplier,\r\n        uint256 compDelta,\r\n        uint256 compSupplyIndex\r\n    );\r\n\r\n    /// @notice Emitted when COMP is distributed to a borrower\r\n    event DistributedBorrowerComp(\r\n        CToken indexed cToken,\r\n        address indexed borrower,\r\n        uint256 compDelta,\r\n        uint256 compBorrowIndex\r\n    );\r\n\r\n    /// @notice Emitted when borrow cap for a cToken is changed\r\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\r\n\r\n    /// @notice Emitted when supply cap for a cToken is changed\r\n    event NewSupplyCap(CToken indexed cToken, uint256 newSupplyCap);\r\n\r\n    /// @notice Emitted when borrow cap guardian is changed\r\n    event NewBorrowCapGuardian(\r\n        address oldBorrowCapGuardian,\r\n        address newBorrowCapGuardian\r\n    );\r\n\r\n    /// @notice Emitted when supply cap guardian is changed\r\n    event NewSupplyCapGuardian(\r\n        address oldSupplyCapGuardian,\r\n        address newSupplyCapGuardian\r\n    );\r\n\r\n    /// @notice Emitted when COMP is granted by admin\r\n    event CompGranted(address recipient, uint256 amount);\r\n\r\n    /// @notice Emitted when COMP accrued for a user has been manually adjusted.\r\n    event CompAccruedAdjusted(\r\n        address indexed user,\r\n        uint256 oldCompAccrued,\r\n        uint256 newCompAccrued\r\n    );\r\n\r\n    /// @notice Emitted when COMP receivable for a user has been updated.\r\n    event CompReceivableUpdated(\r\n        address indexed user,\r\n        uint256 oldCompReceivable,\r\n        uint256 newCompReceivable\r\n    );\r\n\r\n    /// @notice The initial COMP index for a market\r\n    uint224 public constant compInitialIndex = 1e36;\r\n\r\n    // closeFactorMantissa must be strictly greater than this value\r\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\r\n\r\n    // closeFactorMantissa must not exceed this value\r\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n    // No collateralFactorMantissa may exceed this value\r\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /*** Assets You Are In ***/\r\n\r\n    /**\r\n     * @notice Returns the assets an account has entered\r\n     * @param account The address of the account to pull assets for\r\n     * @return A dynamic list with the assets the account has entered\r\n     */\r\n    function getAssetsIn(\r\n        address account\r\n    ) external view returns (CToken[] memory) {\r\n        CToken[] memory assetsIn = accountAssets[account];\r\n\r\n        return assetsIn;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether the given account is entered in the given asset\r\n     * @param account The address of the account to check\r\n     * @param cToken The cToken to check\r\n     * @return True if the account is in the asset, otherwise false.\r\n     */\r\n    function checkMembership(\r\n        address account,\r\n        CToken cToken\r\n    ) external view returns (bool) {\r\n        return markets[address(cToken)].accountMembership[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Add assets to be included in account liquidity calculation\r\n     * @param cTokens The list of addresses of the cToken markets to be enabled\r\n     * @return Success indicator for whether each corresponding market was entered\r\n     */\r\n    function enterMarkets(\r\n        address[] memory cTokens\r\n    ) public override returns (uint256[] memory) {\r\n        uint256 len = cTokens.length;\r\n\r\n        uint256[] memory results = new uint256[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            CToken cToken = CToken(cTokens[i]);\r\n\r\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\r\n     * @param cToken The market to enter\r\n     * @param borrower The address of the account to modify\r\n     * @return Success indicator for whether the market was entered\r\n     */\r\n    function addToMarketInternal(\r\n        CToken cToken,\r\n        address borrower\r\n    ) internal returns (Error) {\r\n        Market storage marketToJoin = markets[address(cToken)];\r\n\r\n        if (!marketToJoin.isListed) {\r\n            // market is not listed, cannot join\r\n            return Error.MARKET_NOT_LISTED;\r\n        }\r\n\r\n        if (marketToJoin.accountMembership[borrower] == true) {\r\n            // already joined\r\n            return Error.NO_ERROR;\r\n        }\r\n\r\n        // survived the gauntlet, add to list\r\n        // NOTE: we store these somewhat redundantly as a significant optimization\r\n        //  this avoids having to iterate through the list for the most common use cases\r\n        //  that is, only when we need to perform liquidity checks\r\n        //  and not whenever we want to check if an account is in a particular market\r\n        marketToJoin.accountMembership[borrower] = true;\r\n        accountAssets[borrower].push(cToken);\r\n\r\n        emit MarketEntered(cToken, borrower);\r\n\r\n        return Error.NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Removes asset from sender's account liquidity calculation\r\n     * @dev Sender must not have an outstanding borrow balance in the asset,\r\n     *  or be providing necessary collateral for an outstanding borrow.\r\n     * @param cTokenAddress The address of the asset to be removed\r\n     * @return Whether or not the account successfully exited the market\r\n     */\r\n    function exitMarket(\r\n        address cTokenAddress\r\n    ) external override returns (uint256) {\r\n        CToken cToken = CToken(cTokenAddress);\r\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\r\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\r\n            .getAccountSnapshot(msg.sender);\r\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\r\n\r\n        /* Fail if the sender has a borrow balance */\r\n        if (amountOwed != 0) {\r\n            return\r\n                fail(\r\n                    Error.NONZERO_BORROW_BALANCE,\r\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\r\n                );\r\n        }\r\n\r\n        /* Fail if the sender is not permitted to redeem all of their tokens */\r\n        uint256 allowed = redeemAllowedInternal(\r\n            cTokenAddress,\r\n            msg.sender,\r\n            tokensHeld\r\n        );\r\n        if (allowed != 0) {\r\n            return\r\n                failOpaque(\r\n                    Error.REJECTION,\r\n                    FailureInfo.EXIT_MARKET_REJECTION,\r\n                    allowed\r\n                );\r\n        }\r\n\r\n        Market storage marketToExit = markets[address(cToken)];\r\n\r\n        /* Return true if the sender is not already ‘in’ the market */\r\n        if (!marketToExit.accountMembership[msg.sender]) {\r\n            return uint256(Error.NO_ERROR);\r\n        }\r\n\r\n        /* Set cToken account membership to false */\r\n        delete marketToExit.accountMembership[msg.sender];\r\n\r\n        /* Delete cToken from the account’s list of assets */\r\n        // load into memory for faster iteration\r\n        CToken[] memory userAssetList = accountAssets[msg.sender];\r\n        uint256 len = userAssetList.length;\r\n        uint256 assetIndex = len;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (userAssetList[i] == cToken) {\r\n                assetIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // We *must* have found the asset in the list or our redundant data structure is broken\r\n        assert(assetIndex < len);\r\n\r\n        // copy last item in list to location of item to be removed, reduce length by 1\r\n        CToken[] storage storedList = accountAssets[msg.sender];\r\n        storedList[assetIndex] = storedList[storedList.length - 1];\r\n        storedList.pop();\r\n\r\n        emit MarketExited(cToken, msg.sender);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to mint tokens in the given market\r\n     * @param cToken The market to verify the mint against\r\n     * @param minter The account which would get the minted tokens\r\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\r\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function mintAllowed(\r\n        address cToken,\r\n        address minter,\r\n        uint256 mintAmount\r\n    ) external override returns (uint256) {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!mintGuardianPaused[cToken], \"mint is paused\");\r\n\r\n        // Shh - currently unused\r\n        minter;\r\n        mintAmount;\r\n\r\n        if (!markets[cToken].isListed) {\r\n            return uint256(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        updateCompSupplyIndex(cToken);\r\n        distributeSupplierComp(cToken, minter);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates mint and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being minted\r\n     * @param minter The address minting the tokens\r\n     * @param actualMintAmount The amount of the underlying asset being minted\r\n     * @param mintTokens The number of tokens being minted\r\n     */\r\n    function mintVerify(\r\n        address cToken,\r\n        address minter,\r\n        uint256 actualMintAmount,\r\n        uint256 mintTokens\r\n    ) external override {\r\n        // Shh - currently unused\r\n        cToken;\r\n        minter;\r\n        actualMintAmount;\r\n        mintTokens;\r\n\r\n        uint256 supplyCap = supplyCaps[cToken];\r\n        // Supply cap of 0 corresponds to unlimited borrowing\r\n        if (supplyCap != 0) {\r\n            uint256 totalSupply = CToken(cToken).totalSupply();\r\n            Exp memory exchangeRate = Exp({\r\n                mantissa: CToken(cToken).exchangeRateStored()\r\n            });\r\n            uint256 totalAmount = mul_ScalarTruncate(exchangeRate, totalSupply);\r\n            require(totalAmount <= supplyCap, \"market supply cap reached\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\r\n     * @param cToken The market to verify the redeem against\r\n     * @param redeemer The account which would redeem the tokens\r\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\r\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function redeemAllowed(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemTokens\r\n    ) external override returns (uint256) {\r\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\r\n        if (allowed != uint256(Error.NO_ERROR)) {\r\n            return allowed;\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        updateCompSupplyIndex(cToken);\r\n        distributeSupplierComp(cToken, redeemer);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    function redeemAllowedInternal(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemTokens\r\n    ) internal view returns (uint256) {\r\n        if (!markets[cToken].isListed) {\r\n            return uint256(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\r\n        if (!markets[cToken].accountMembership[redeemer]) {\r\n            return uint256(Error.NO_ERROR);\r\n        }\r\n\r\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\r\n        (\r\n            Error err,\r\n            ,\r\n            uint256 shortfall\r\n        ) = getHypotheticalAccountLiquidityInternal(\r\n                redeemer,\r\n                CToken(cToken),\r\n                redeemTokens,\r\n                0\r\n            );\r\n        if (err != Error.NO_ERROR) {\r\n            return uint256(err);\r\n        }\r\n        if (shortfall > 0) {\r\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\r\n        }\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates redeem and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being redeemed\r\n     * @param redeemer The address redeeming the tokens\r\n     * @param redeemAmount The amount of the underlying asset being redeemed\r\n     * @param redeemTokens The number of tokens being redeemed\r\n     */\r\n    function redeemVerify(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    ) external override {\r\n        // Shh - currently unused\r\n        cToken;\r\n        redeemer;\r\n\r\n        // Require tokens is zero or amount is also zero\r\n        if (redeemTokens == 0 && redeemAmount > 0) {\r\n            revert(\"redeemTokens zero\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\r\n     * @param cToken The market to verify the borrow against\r\n     * @param borrower The account which would borrow the asset\r\n     * @param borrowAmount The amount of underlying the account would borrow\r\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function borrowAllowed(\r\n        address cToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external override returns (uint256) {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\r\n\r\n        if (!markets[cToken].isListed) {\r\n            return uint256(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        if (!markets[cToken].accountMembership[borrower]) {\r\n            // only cTokens may call borrowAllowed if borrower not in market\r\n            require(msg.sender == cToken, \"sender must be cToken\");\r\n\r\n            // attempt to add borrower to the market\r\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\r\n            if (err != Error.NO_ERROR) {\r\n                return uint256(err);\r\n            }\r\n\r\n            // it should be impossible to break the important invariant\r\n            assert(markets[cToken].accountMembership[borrower]);\r\n        }\r\n\r\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\r\n            return uint256(Error.PRICE_ERROR);\r\n        }\r\n\r\n        uint256 borrowCap = borrowCaps[cToken];\r\n        // Borrow cap of 0 corresponds to unlimited borrowing\r\n        if (borrowCap != 0) {\r\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\r\n            uint256 nextTotalBorrows = add_(totalBorrows, borrowAmount);\r\n            require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\r\n        }\r\n\r\n        (\r\n            Error err,\r\n            ,\r\n            uint256 shortfall\r\n        ) = getHypotheticalAccountLiquidityInternal(\r\n                borrower,\r\n                CToken(cToken),\r\n                0,\r\n                borrowAmount\r\n            );\r\n        if (err != Error.NO_ERROR) {\r\n            return uint256(err);\r\n        }\r\n        if (shortfall > 0) {\r\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\r\n        updateCompBorrowIndex(cToken, borrowIndex);\r\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates borrow and reverts on rejection. May emit logs.\r\n     * @param cToken Asset whose underlying is being borrowed\r\n     * @param borrower The address borrowing the underlying\r\n     * @param borrowAmount The amount of the underlying asset requested to borrow\r\n     */\r\n    function borrowVerify(\r\n        address cToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external override {\r\n        // Shh - currently unused\r\n        cToken;\r\n        borrower;\r\n        borrowAmount;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\r\n     * @param cToken The market to verify the repay against\r\n     * @param payer The account which would repay the asset\r\n     * @param borrower The account which would borrowed the asset\r\n     * @param repayAmount The amount of the underlying asset the account would repay\r\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function repayBorrowAllowed(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external override returns (uint256) {\r\n        // Shh - currently unused\r\n        payer;\r\n        borrower;\r\n        repayAmount;\r\n\r\n        if (!markets[cToken].isListed) {\r\n            return uint256(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\r\n        updateCompBorrowIndex(cToken, borrowIndex);\r\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being repaid\r\n     * @param payer The address repaying the borrow\r\n     * @param borrower The address of the borrower\r\n     * @param actualRepayAmount The amount of underlying being repaid\r\n     */\r\n    function repayBorrowVerify(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 actualRepayAmount,\r\n        uint256 borrowerIndex\r\n    ) external override {\r\n        // Shh - currently unused\r\n        cToken;\r\n        payer;\r\n        borrower;\r\n        actualRepayAmount;\r\n        borrowerIndex;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the liquidation should be allowed to occur\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param repayAmount The amount of underlying being repaid\r\n     */\r\n    function liquidateBorrowAllowed(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external override returns (uint256) {\r\n        // Shh - currently unused\r\n        liquidator;\r\n\r\n        if (\r\n            !markets[cTokenBorrowed].isListed ||\r\n            !markets[cTokenCollateral].isListed\r\n        ) {\r\n            return uint256(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\r\n            borrower\r\n        );\r\n\r\n        /* allow accounts to be liquidated if the market is deprecated */\r\n        if (isDeprecated(CToken(cTokenBorrowed))) {\r\n            require(\r\n                borrowBalance >= repayAmount,\r\n                \"Can not repay more than the total borrow\"\r\n            );\r\n        } else {\r\n            /* The borrower must have shortfall in order to be liquidatable */\r\n            (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\r\n                borrower\r\n            );\r\n            if (err != Error.NO_ERROR) {\r\n                return uint256(err);\r\n            }\r\n\r\n            if (shortfall == 0) {\r\n                return uint256(Error.INSUFFICIENT_SHORTFALL);\r\n            }\r\n\r\n            /* The liquidator may not repay more than what is allowed by the closeFactor */\r\n            uint256 maxClose = mul_ScalarTruncate(\r\n                Exp({mantissa: closeFactorMantissa}),\r\n                borrowBalance\r\n            );\r\n            if (repayAmount > maxClose) {\r\n                return uint256(Error.TOO_MUCH_REPAY);\r\n            }\r\n        }\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param actualRepayAmount The amount of underlying being repaid\r\n     */\r\n    function liquidateBorrowVerify(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 actualRepayAmount,\r\n        uint256 seizeTokens\r\n    ) external override {\r\n        // Shh - currently unused\r\n        cTokenBorrowed;\r\n        cTokenCollateral;\r\n        liquidator;\r\n        borrower;\r\n        actualRepayAmount;\r\n        seizeTokens;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the seizing of assets should be allowed to occur\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param seizeTokens The number of collateral tokens to seize\r\n     */\r\n    function seizeAllowed(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external override returns (uint256) {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!seizeGuardianPaused, \"seize is paused\");\r\n\r\n        // Shh - currently unused\r\n        seizeTokens;\r\n\r\n        if (\r\n            !markets[cTokenCollateral].isListed ||\r\n            !markets[cTokenBorrowed].isListed\r\n        ) {\r\n            return uint256(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        if (\r\n            CToken(cTokenCollateral).comptroller() !=\r\n            CToken(cTokenBorrowed).comptroller()\r\n        ) {\r\n            return uint256(Error.COMPTROLLER_MISMATCH);\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        updateCompSupplyIndex(cTokenCollateral);\r\n        distributeSupplierComp(cTokenCollateral, borrower);\r\n        distributeSupplierComp(cTokenCollateral, liquidator);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates seize and reverts on rejection. May emit logs.\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param seizeTokens The number of collateral tokens to seize\r\n     */\r\n    function seizeVerify(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external override {\r\n        // Shh - currently unused\r\n        cTokenCollateral;\r\n        cTokenBorrowed;\r\n        liquidator;\r\n        borrower;\r\n        seizeTokens;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\r\n     * @param cToken The market to verify the transfer against\r\n     * @param src The account which sources the tokens\r\n     * @param dst The account which receives the tokens\r\n     * @param transferTokens The number of cTokens to transfer\r\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function transferAllowed(\r\n        address cToken,\r\n        address src,\r\n        address dst,\r\n        uint256 transferTokens\r\n    ) external override returns (uint256) {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!transferGuardianPaused, \"transfer is paused\");\r\n\r\n        // Currently the only consideration is whether or not\r\n        //  the src is allowed to redeem this many tokens\r\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\r\n        if (allowed != uint256(Error.NO_ERROR)) {\r\n            return allowed;\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        updateCompSupplyIndex(cToken);\r\n        distributeSupplierComp(cToken, src);\r\n        distributeSupplierComp(cToken, dst);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates transfer and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being transferred\r\n     * @param src The account which sources the tokens\r\n     * @param dst The account which receives the tokens\r\n     * @param transferTokens The number of cTokens to transfer\r\n     */\r\n    function transferVerify(\r\n        address cToken,\r\n        address src,\r\n        address dst,\r\n        uint256 transferTokens\r\n    ) external override {\r\n        // Shh - currently unused\r\n        cToken;\r\n        src;\r\n        dst;\r\n        transferTokens;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    /**\r\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\r\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\r\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\r\n     */\r\n    struct AccountLiquidityLocalVars {\r\n        uint256 sumCollateral;\r\n        uint256 sumBorrowPlusEffects;\r\n        uint256 cTokenBalance;\r\n        uint256 borrowBalance;\r\n        uint256 exchangeRateMantissa;\r\n        uint256 oraclePriceMantissa;\r\n        Exp collateralFactor;\r\n        Exp exchangeRate;\r\n        Exp oraclePrice;\r\n        Exp tokensToDenom;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the current account liquidity wrt collateral requirements\r\n     * @return (possible error code (semi-opaque),\r\n                account liquidity in excess of collateral requirements,\r\n     *          account shortfall below collateral requirements)\r\n     */\r\n    function getAccountLiquidity(\r\n        address account\r\n    ) public view returns (uint256, uint256, uint256) {\r\n        (\r\n            Error err,\r\n            uint256 liquidity,\r\n            uint256 shortfall\r\n        ) = getHypotheticalAccountLiquidityInternal(\r\n                account,\r\n                CToken(address(0)),\r\n                0,\r\n                0\r\n            );\r\n\r\n        return (uint256(err), liquidity, shortfall);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the current account liquidity wrt collateral requirements\r\n     * @return (possible error code,\r\n                account liquidity in excess of collateral requirements,\r\n     *          account shortfall below collateral requirements)\r\n     */\r\n    function getAccountLiquidityInternal(\r\n        address account\r\n    ) internal view returns (Error, uint256, uint256) {\r\n        return\r\n            getHypotheticalAccountLiquidityInternal(\r\n                account,\r\n                CToken(address(0)),\r\n                0,\r\n                0\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @return (possible error code (semi-opaque),\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n    function getHypotheticalAccountLiquidity(\r\n        address account,\r\n        address cTokenModify,\r\n        uint256 redeemTokens,\r\n        uint256 borrowAmount\r\n    ) public view returns (uint256, uint256, uint256) {\r\n        (\r\n            Error err,\r\n            uint256 liquidity,\r\n            uint256 shortfall\r\n        ) = getHypotheticalAccountLiquidityInternal(\r\n                account,\r\n                CToken(cTokenModify),\r\n                redeemTokens,\r\n                borrowAmount\r\n            );\r\n        return (uint256(err), liquidity, shortfall);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\r\n     *  without calculating accumulated interest.\r\n     * @return (possible error code,\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n    function getHypotheticalAccountLiquidityInternal(\r\n        address account,\r\n        CToken cTokenModify,\r\n        uint256 redeemTokens,\r\n        uint256 borrowAmount\r\n    ) internal view returns (Error, uint256, uint256) {\r\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\r\n        uint256 oErr;\r\n\r\n        // For each asset the account is in\r\n        CToken[] memory assets = accountAssets[account];\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            CToken asset = assets[i];\r\n\r\n            // Read the balances and exchange rate from the cToken\r\n            (\r\n                oErr,\r\n                vars.cTokenBalance,\r\n                vars.borrowBalance,\r\n                vars.exchangeRateMantissa\r\n            ) = asset.getAccountSnapshot(account);\r\n            if (oErr != 0) {\r\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\r\n                return (Error.SNAPSHOT_ERROR, 0, 0);\r\n            }\r\n            vars.collateralFactor = Exp({\r\n                mantissa: markets[address(asset)].collateralFactorMantissa\r\n            });\r\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\r\n\r\n            // Get the normalized price of the asset\r\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\r\n            if (vars.oraclePriceMantissa == 0) {\r\n                return (Error.PRICE_ERROR, 0, 0);\r\n            }\r\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\r\n\r\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\r\n            vars.tokensToDenom = mul_(\r\n                mul_(vars.collateralFactor, vars.exchangeRate),\r\n                vars.oraclePrice\r\n            );\r\n\r\n            // sumCollateral += tokensToDenom * cTokenBalance\r\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\r\n                vars.tokensToDenom,\r\n                vars.cTokenBalance,\r\n                vars.sumCollateral\r\n            );\r\n\r\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\r\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n                vars.oraclePrice,\r\n                vars.borrowBalance,\r\n                vars.sumBorrowPlusEffects\r\n            );\r\n\r\n            // Calculate effects of interacting with cTokenModify\r\n            if (asset == cTokenModify) {\r\n                // redeem effect\r\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\r\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n                    vars.tokensToDenom,\r\n                    redeemTokens,\r\n                    vars.sumBorrowPlusEffects\r\n                );\r\n\r\n                // borrow effect\r\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\r\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n                    vars.oraclePrice,\r\n                    borrowAmount,\r\n                    vars.sumBorrowPlusEffects\r\n                );\r\n            }\r\n        }\r\n\r\n        // These are safe, as the underflow condition is checked first\r\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\r\n            return (\r\n                Error.NO_ERROR,\r\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\r\n                0\r\n            );\r\n        } else {\r\n            return (\r\n                Error.NO_ERROR,\r\n                0,\r\n                vars.sumBorrowPlusEffects - vars.sumCollateral\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\r\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\r\n     * @param cTokenBorrowed The address of the borrowed cToken\r\n     * @param cTokenCollateral The address of the collateral cToken\r\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\r\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\r\n     */\r\n    function liquidateCalculateSeizeTokens(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        uint256 actualRepayAmount\r\n    ) external view override returns (uint256, uint256) {\r\n        /* Read oracle prices for borrowed and collateral markets */\r\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\r\n            CToken(cTokenBorrowed)\r\n        );\r\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\r\n            CToken(cTokenCollateral)\r\n        );\r\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\r\n            return (uint256(Error.PRICE_ERROR), 0);\r\n        }\r\n\r\n        /*\r\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\r\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\r\n         *  seizeTokens = seizeAmount / exchangeRate\r\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\r\n         */\r\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\r\n            .exchangeRateStored(); // Note: reverts on error\r\n        uint256 seizeTokens;\r\n        Exp memory numerator;\r\n        Exp memory denominator;\r\n        Exp memory ratio;\r\n\r\n        numerator = mul_(\r\n            Exp({mantissa: liquidationIncentiveMantissa}),\r\n            Exp({mantissa: priceBorrowedMantissa})\r\n        );\r\n        denominator = mul_(\r\n            Exp({mantissa: priceCollateralMantissa}),\r\n            Exp({mantissa: exchangeRateMantissa})\r\n        );\r\n        ratio = div_(numerator, denominator);\r\n\r\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\r\n\r\n        return (uint256(Error.NO_ERROR), seizeTokens);\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    /**\r\n     * @notice Sets a new price oracle for the comptroller\r\n     * @dev Admin function to set a new price oracle\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return\r\n                fail(\r\n                    Error.UNAUTHORIZED,\r\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\r\n                );\r\n        }\r\n\r\n        // Track the old oracle for the comptroller\r\n        PriceOracle oldOracle = oracle;\r\n\r\n        // Set comptroller's oracle to newOracle\r\n        oracle = newOracle;\r\n\r\n        // Emit NewPriceOracle(oldOracle, newOracle)\r\n        emit NewPriceOracle(oldOracle, newOracle);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the closeFactor used when liquidating borrows\r\n     * @dev Admin function to set closeFactor\r\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\r\n     * @return uint 0=success, otherwise a failure\r\n     */\r\n    function _setCloseFactor(\r\n        uint256 newCloseFactorMantissa\r\n    ) external returns (uint256) {\r\n        // Check caller is admin\r\n        require(msg.sender == admin, \"only admin can set close factor\");\r\n\r\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\r\n        closeFactorMantissa = newCloseFactorMantissa;\r\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the collateralFactor for a market\r\n     * @dev Admin function to set per-market collateralFactor\r\n     * @param cToken The market to set the factor on\r\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\r\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n     */\r\n    function _setCollateralFactor(\r\n        CToken cToken,\r\n        uint256 newCollateralFactorMantissa\r\n    ) external returns (uint256) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return\r\n                fail(\r\n                    Error.UNAUTHORIZED,\r\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\r\n                );\r\n        }\r\n\r\n        // Verify market is listed\r\n        Market storage market = markets[address(cToken)];\r\n        if (!market.isListed) {\r\n            return\r\n                fail(\r\n                    Error.MARKET_NOT_LISTED,\r\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\r\n                );\r\n        }\r\n\r\n        Exp memory newCollateralFactorExp = Exp({\r\n            mantissa: newCollateralFactorMantissa\r\n        });\r\n\r\n        // Check collateral factor <= 0.9\r\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\r\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\r\n            return\r\n                fail(\r\n                    Error.INVALID_COLLATERAL_FACTOR,\r\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\r\n                );\r\n        }\r\n\r\n        // If collateral factor != 0, fail if price == 0\r\n        if (\r\n            newCollateralFactorMantissa != 0 &&\r\n            oracle.getUnderlyingPrice(cToken) == 0\r\n        ) {\r\n            return\r\n                fail(\r\n                    Error.PRICE_ERROR,\r\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\r\n                );\r\n        }\r\n\r\n        // Set market's collateral factor to new collateral factor, remember old value\r\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\r\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\r\n\r\n        // Emit event with asset, old collateral factor, and new collateral factor\r\n        emit NewCollateralFactor(\r\n            cToken,\r\n            oldCollateralFactorMantissa,\r\n            newCollateralFactorMantissa\r\n        );\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets liquidationIncentive\r\n     * @dev Admin function to set liquidationIncentive\r\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\r\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n     */\r\n    function _setLiquidationIncentive(\r\n        uint256 newLiquidationIncentiveMantissa\r\n    ) external returns (uint256) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return\r\n                fail(\r\n                    Error.UNAUTHORIZED,\r\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\r\n                );\r\n        }\r\n\r\n        // Save current value for use in log\r\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\r\n\r\n        // Set liquidation incentive to new incentive\r\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\r\n\r\n        // Emit event with old incentive, new incentive\r\n        emit NewLiquidationIncentive(\r\n            oldLiquidationIncentiveMantissa,\r\n            newLiquidationIncentiveMantissa\r\n        );\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Add the market to the markets mapping and set it as listed\r\n     * @dev Admin function to set isListed and add support for the market\r\n     * @param cToken The address of the market (token) to list\r\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n     */\r\n    function _supportMarket(CToken cToken) external returns (uint256) {\r\n        if (msg.sender != admin) {\r\n            return\r\n                fail(\r\n                    Error.UNAUTHORIZED,\r\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\r\n                );\r\n        }\r\n\r\n        if (markets[address(cToken)].isListed) {\r\n            return\r\n                fail(\r\n                    Error.MARKET_ALREADY_LISTED,\r\n                    FailureInfo.SUPPORT_MARKET_EXISTS\r\n                );\r\n        }\r\n\r\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\r\n\r\n        // Note that isComped is not in active use anymore\r\n        Market storage newMarket = markets[address(cToken)];\r\n        newMarket.isListed = true;\r\n        newMarket.isComped = false;\r\n        newMarket.collateralFactorMantissa = 0;\r\n\r\n        _addMarketInternal(address(cToken));\r\n        _initializeMarket(address(cToken));\r\n\r\n        emit MarketListed(cToken);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    function _addMarketInternal(address cToken) internal {\r\n        for (uint256 i = 0; i < allMarkets.length; i++) {\r\n            require(allMarkets[i] != CToken(cToken), \"market already added\");\r\n        }\r\n        allMarkets.push(CToken(cToken));\r\n    }\r\n\r\n    function _initializeMarket(address cToken) internal {\r\n        uint32 blockNumber = safe32(\r\n            getBlockNumber(),\r\n            \"block number exceeds 32 bits\"\r\n        );\r\n\r\n        CompMarketState storage supplyState = compSupplyState[cToken];\r\n        CompMarketState storage borrowState = compBorrowState[cToken];\r\n\r\n        /*\r\n         * Update market state indices\r\n         */\r\n        if (supplyState.index == 0) {\r\n            // Initialize supply state index with default value\r\n            supplyState.index = compInitialIndex;\r\n        }\r\n\r\n        if (borrowState.index == 0) {\r\n            // Initialize borrow state index with default value\r\n            borrowState.index = compInitialIndex;\r\n        }\r\n\r\n        /*\r\n         * Update market state block numbers\r\n         */\r\n        supplyState.block = borrowState.block = blockNumber;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\r\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\r\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\r\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\r\n     */\r\n    function _setMarketBorrowCaps(\r\n        CToken[] calldata cTokens,\r\n        uint256[] calldata newBorrowCaps\r\n    ) external {\r\n        require(\r\n            msg.sender == admin || msg.sender == borrowCapGuardian,\r\n            \"only admin or borrow cap guardian can set borrow caps\"\r\n        );\r\n\r\n        uint256 numMarkets = cTokens.length;\r\n        uint256 numBorrowCaps = newBorrowCaps.length;\r\n\r\n        require(\r\n            numMarkets != 0 && numMarkets == numBorrowCaps,\r\n            \"invalid input\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\r\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Set the given supply caps for the given cToken markets. Supplying that brings total supply to or above supply cap will revert.\r\n     * @dev Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\r\n     * @param cTokens The addresses of the markets (tokens) to change the supply caps for\r\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\r\n     */\r\n    function _setMarketSupplyCaps(\r\n        CToken[] calldata cTokens,\r\n        uint256[] calldata newSupplyCaps\r\n    ) external {\r\n        require(\r\n            msg.sender == admin || msg.sender == supplyCapGuardian,\r\n            \"only admin or supply cap guardian can set supply caps\"\r\n        );\r\n\r\n        uint256 numMarkets = cTokens.length;\r\n        uint256 numSupplyCaps = newSupplyCaps.length;\r\n\r\n        require(\r\n            numMarkets != 0 && numMarkets == numSupplyCaps,\r\n            \"invalid input\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\r\n            emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function to change the Borrow Cap Guardian\r\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\r\n     */\r\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\r\n        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\r\n\r\n        // Save current value for inclusion in log\r\n        address oldBorrowCapGuardian = borrowCapGuardian;\r\n\r\n        // Store borrowCapGuardian with value newBorrowCapGuardian\r\n        borrowCapGuardian = newBorrowCapGuardian;\r\n\r\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\r\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function to change the Supply Cap Guardian\r\n     * @param newSupplyCapGuardian The address of the new Supply Cap Guardian\r\n     */\r\n    function _setSupplyCapGuardian(address newSupplyCapGuardian) external {\r\n        require(msg.sender == admin, \"only admin can set supply cap guardian\");\r\n\r\n        // Save current value for inclusion in log\r\n        address oldSupplyCapGuardian = supplyCapGuardian;\r\n\r\n        // Store supplyCapGuardian with value newSupplyCapGuardian\r\n        supplyCapGuardian = newSupplyCapGuardian;\r\n\r\n        // Emit NewSupplyCapGuardian(OldSupplyCapGuardian, NewSupplyCapGuardian)\r\n        emit NewSupplyCapGuardian(oldSupplyCapGuardian, newSupplyCapGuardian);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function to change the Pause Guardian\r\n     * @param newPauseGuardian The address of the new Pause Guardian\r\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n     */\r\n    function _setPauseGuardian(\r\n        address newPauseGuardian\r\n    ) public returns (uint256) {\r\n        if (msg.sender != admin) {\r\n            return\r\n                fail(\r\n                    Error.UNAUTHORIZED,\r\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\r\n                );\r\n        }\r\n\r\n        // Save current value for inclusion in log\r\n        address oldPauseGuardian = pauseGuardian;\r\n\r\n        // Store pauseGuardian with value newPauseGuardian\r\n        pauseGuardian = newPauseGuardian;\r\n\r\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\r\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\r\n\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\r\n        require(\r\n            markets[address(cToken)].isListed,\r\n            \"cannot pause a market that is not listed\"\r\n        );\r\n        require(\r\n            msg.sender == pauseGuardian || msg.sender == admin,\r\n            \"only pause guardian and admin can pause\"\r\n        );\r\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n        mintGuardianPaused[address(cToken)] = state;\r\n        emit ActionPaused(cToken, \"Mint\", state);\r\n        return state;\r\n    }\r\n\r\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\r\n        require(\r\n            markets[address(cToken)].isListed,\r\n            \"cannot pause a market that is not listed\"\r\n        );\r\n        require(\r\n            msg.sender == pauseGuardian || msg.sender == admin,\r\n            \"only pause guardian and admin can pause\"\r\n        );\r\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n        borrowGuardianPaused[address(cToken)] = state;\r\n        emit ActionPaused(cToken, \"Borrow\", state);\r\n        return state;\r\n    }\r\n\r\n    function _setTransferPaused(bool state) public returns (bool) {\r\n        require(\r\n            msg.sender == pauseGuardian || msg.sender == admin,\r\n            \"only pause guardian and admin can pause\"\r\n        );\r\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n        transferGuardianPaused = state;\r\n        emit ActionPaused(\"Transfer\", state);\r\n        return state;\r\n    }\r\n\r\n    function _setSeizePaused(bool state) public returns (bool) {\r\n        require(\r\n            msg.sender == pauseGuardian || msg.sender == admin,\r\n            \"only pause guardian and admin can pause\"\r\n        );\r\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n        seizeGuardianPaused = state;\r\n        emit ActionPaused(\"Seize\", state);\r\n        return state;\r\n    }\r\n\r\n    function _become(Unitroller unitroller) public {\r\n        require(\r\n            msg.sender == unitroller.admin(),\r\n            \"only unitroller admin can change brains\"\r\n        );\r\n        require(\r\n            unitroller._acceptImplementation() == 0,\r\n            \"change not authorized\"\r\n        );\r\n    }\r\n\r\n    /// @notice Delete this function after proposal 65 is executed\r\n    function fixBadAccruals(\r\n        address[] calldata affectedUsers,\r\n        uint256[] calldata amounts\r\n    ) external {\r\n        require(msg.sender == admin, \"Only admin can call this function\"); // Only the timelock can call this function\r\n        require(\r\n            !proposal65FixExecuted,\r\n            \"Already executed this one-off function\"\r\n        ); // Require that this function is only called once\r\n        require(affectedUsers.length == amounts.length, \"Invalid input\");\r\n\r\n        // Loop variables\r\n        address user;\r\n        uint256 currentAccrual;\r\n        uint256 amountToSubtract;\r\n        uint256 newAccrual;\r\n\r\n        // Iterate through all affected users\r\n        for (uint256 i = 0; i < affectedUsers.length; ++i) {\r\n            user = affectedUsers[i];\r\n            currentAccrual = compAccrued[user];\r\n\r\n            amountToSubtract = amounts[i];\r\n\r\n            // The case where the user has claimed and received an incorrect amount of COMP.\r\n            // The user has less currently accrued than the amount they incorrectly received.\r\n            if (amountToSubtract > currentAccrual) {\r\n                // Amount of COMP the user owes the protocol\r\n                uint256 accountReceivable = amountToSubtract - currentAccrual; // Underflow safe since amountToSubtract > currentAccrual\r\n\r\n                uint256 oldReceivable = compReceivable[user];\r\n                uint256 newReceivable = add_(oldReceivable, accountReceivable);\r\n\r\n                // Accounting: record the COMP debt for the user\r\n                compReceivable[user] = newReceivable;\r\n\r\n                emit CompReceivableUpdated(user, oldReceivable, newReceivable);\r\n\r\n                amountToSubtract = currentAccrual;\r\n            }\r\n\r\n            if (amountToSubtract > 0) {\r\n                // Subtract the bad accrual amount from what they have accrued.\r\n                // Users will keep whatever they have correctly accrued.\r\n                compAccrued[user] = newAccrual = sub_(\r\n                    currentAccrual,\r\n                    amountToSubtract\r\n                );\r\n\r\n                emit CompAccruedAdjusted(user, currentAccrual, newAccrual);\r\n            }\r\n        }\r\n\r\n        proposal65FixExecuted = true; // Makes it so that this function cannot be called again\r\n    }\r\n\r\n    /**\r\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\r\n     */\r\n    function adminOrInitializing() internal view returns (bool) {\r\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\r\n    }\r\n\r\n    /*** Comp Distribution ***/\r\n\r\n    /**\r\n     * @notice Set COMP speed for a single market\r\n     * @param cToken The market whose COMP speed to update\r\n     * @param supplySpeed New supply-side COMP speed for market\r\n     * @param borrowSpeed New borrow-side COMP speed for market\r\n     */\r\n    function setCompSpeedInternal(\r\n        CToken cToken,\r\n        uint256 supplySpeed,\r\n        uint256 borrowSpeed\r\n    ) internal {\r\n        Market storage market = markets[address(cToken)];\r\n        require(market.isListed, \"comp market is not listed\");\r\n\r\n        if (compSupplySpeeds[address(cToken)] != supplySpeed) {\r\n            // Supply speed updated so let's update supply state to ensure that\r\n            //  1. COMP accrued properly for the old speed, and\r\n            //  2. COMP accrued at the new speed starts after this block.\r\n            updateCompSupplyIndex(address(cToken));\r\n\r\n            // Update speed and emit event\r\n            compSupplySpeeds[address(cToken)] = supplySpeed;\r\n            emit CompSupplySpeedUpdated(cToken, supplySpeed);\r\n        }\r\n\r\n        if (compBorrowSpeeds[address(cToken)] != borrowSpeed) {\r\n            // Borrow speed updated so let's update borrow state to ensure that\r\n            //  1. COMP accrued properly for the old speed, and\r\n            //  2. COMP accrued at the new speed starts after this block.\r\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\r\n            updateCompBorrowIndex(address(cToken), borrowIndex);\r\n\r\n            // Update speed and emit event\r\n            compBorrowSpeeds[address(cToken)] = borrowSpeed;\r\n            emit CompBorrowSpeedUpdated(cToken, borrowSpeed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue COMP to the market by updating the supply index\r\n     * @param cToken The market whose supply index to update\r\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\r\n     */\r\n    function updateCompSupplyIndex(address cToken) internal {\r\n        CompMarketState storage supplyState = compSupplyState[cToken];\r\n        uint256 supplySpeed = compSupplySpeeds[cToken];\r\n        uint32 blockNumber = safe32(\r\n            getBlockNumber(),\r\n            \"block number exceeds 32 bits\"\r\n        );\r\n        uint256 deltaBlocks = sub_(\r\n            uint256(blockNumber),\r\n            uint256(supplyState.block)\r\n        );\r\n        if (deltaBlocks > 0 && supplySpeed > 0) {\r\n            uint256 supplyTokens = CToken(cToken).totalSupply();\r\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\r\n            Double memory ratio = supplyTokens > 0\r\n                ? fraction(compAccrued, supplyTokens)\r\n                : Double({mantissa: 0});\r\n            supplyState.index = safe224(\r\n                add_(Double({mantissa: supplyState.index}), ratio).mantissa,\r\n                \"new index exceeds 224 bits\"\r\n            );\r\n            supplyState.block = blockNumber;\r\n        } else if (deltaBlocks > 0) {\r\n            supplyState.block = blockNumber;\r\n        }\r\n\r\n        (bool success, ) = getExternalRewardDistributorAddress().call(\r\n            abi.encodeWithSignature(\"notifySupplyIndex(address)\", cToken)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue COMP to the market by updating the borrow index\r\n     * @param cToken The market whose borrow index to update\r\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\r\n     */\r\n    function updateCompBorrowIndex(\r\n        address cToken,\r\n        Exp memory marketBorrowIndex\r\n    ) internal {\r\n        CompMarketState storage borrowState = compBorrowState[cToken];\r\n        uint256 borrowSpeed = compBorrowSpeeds[cToken];\r\n        uint32 blockNumber = safe32(\r\n            getBlockNumber(),\r\n            \"block number exceeds 32 bits\"\r\n        );\r\n        uint256 deltaBlocks = sub_(\r\n            uint256(blockNumber),\r\n            uint256(borrowState.block)\r\n        );\r\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\r\n            uint256 borrowAmount = div_(\r\n                CToken(cToken).totalBorrows(),\r\n                marketBorrowIndex\r\n            );\r\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\r\n            Double memory ratio = borrowAmount > 0\r\n                ? fraction(compAccrued, borrowAmount)\r\n                : Double({mantissa: 0});\r\n            borrowState.index = safe224(\r\n                add_(Double({mantissa: borrowState.index}), ratio).mantissa,\r\n                \"new index exceeds 224 bits\"\r\n            );\r\n            borrowState.block = blockNumber;\r\n        } else if (deltaBlocks > 0) {\r\n            borrowState.block = blockNumber;\r\n        }\r\n\r\n        (bool success, ) = getExternalRewardDistributorAddress().call(\r\n            abi.encodeWithSignature(\"notifyBorrowIndex(address)\", cToken)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\r\n     * @param cToken The market in which the supplier is interacting\r\n     * @param supplier The address of the supplier to distribute COMP to\r\n     */\r\n    function distributeSupplierComp(address cToken, address supplier) internal {\r\n        // TODO: Don't distribute supplier COMP if the user is not in the supplier market.\r\n        // This check should be as gas efficient as possible as distributeSupplierComp is called in many places.\r\n        // - We really don't want to call an external contract as that's quite expensive.\r\n\r\n        CompMarketState storage supplyState = compSupplyState[cToken];\r\n        uint256 supplyIndex = supplyState.index;\r\n        uint256 supplierIndex = compSupplierIndex[cToken][supplier];\r\n\r\n        // Update supplier's index to the current index since we are distributing accrued COMP\r\n        compSupplierIndex[cToken][supplier] = supplyIndex;\r\n\r\n        if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {\r\n            // Covers the case where users supplied tokens before the market's supply state index was set.\r\n            // Rewards the user with COMP accrued from the start of when supplier rewards were first\r\n            // set for the market.\r\n            supplierIndex = compInitialIndex;\r\n        }\r\n\r\n        // Calculate change in the cumulative sum of the COMP per cToken accrued\r\n        Double memory deltaIndex = Double({\r\n            mantissa: sub_(supplyIndex, supplierIndex)\r\n        });\r\n\r\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\r\n\r\n        // Calculate COMP accrued: cTokenAmount * accruedPerCToken\r\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\r\n\r\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\r\n        compAccrued[supplier] = supplierAccrued;\r\n\r\n        emit DistributedSupplierComp(\r\n            CToken(cToken),\r\n            supplier,\r\n            supplierDelta,\r\n            supplyIndex\r\n        );\r\n\r\n        (bool success, ) = getExternalRewardDistributorAddress().call(\r\n            abi.encodeWithSignature(\r\n                \"notifySupplier(address,address)\",\r\n                cToken,\r\n                supplier\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\r\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\r\n     * @param cToken The market in which the borrower is interacting\r\n     * @param borrower The address of the borrower to distribute COMP to\r\n     */\r\n    function distributeBorrowerComp(\r\n        address cToken,\r\n        address borrower,\r\n        Exp memory marketBorrowIndex\r\n    ) internal {\r\n        // TODO: Don't distribute supplier COMP if the user is not in the borrower market.\r\n        // This check should be as gas efficient as possible as distributeBorrowerComp is called in many places.\r\n        // - We really don't want to call an external contract as that's quite expensive.\r\n\r\n        CompMarketState storage borrowState = compBorrowState[cToken];\r\n        uint256 borrowIndex = borrowState.index;\r\n        uint256 borrowerIndex = compBorrowerIndex[cToken][borrower];\r\n\r\n        // Update borrowers's index to the current index since we are distributing accrued COMP\r\n        compBorrowerIndex[cToken][borrower] = borrowIndex;\r\n\r\n        if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {\r\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\r\n            // Rewards the user with COMP accrued from the start of when borrower rewards were first\r\n            // set for the market.\r\n            borrowerIndex = compInitialIndex;\r\n        }\r\n\r\n        // Calculate change in the cumulative sum of the COMP per borrowed unit accrued\r\n        Double memory deltaIndex = Double({\r\n            mantissa: sub_(borrowIndex, borrowerIndex)\r\n        });\r\n\r\n        uint256 borrowerAmount = div_(\r\n            CToken(cToken).borrowBalanceStored(borrower),\r\n            marketBorrowIndex\r\n        );\r\n\r\n        // Calculate COMP accrued: cTokenAmount * accruedPerBorrowedUnit\r\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\r\n\r\n        uint256 borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\r\n        compAccrued[borrower] = borrowerAccrued;\r\n\r\n        emit DistributedBorrowerComp(\r\n            CToken(cToken),\r\n            borrower,\r\n            borrowerDelta,\r\n            borrowIndex\r\n        );\r\n\r\n        (bool success, ) = getExternalRewardDistributorAddress().call(\r\n            abi.encodeWithSignature(\r\n                \"notifyBorrower(address,address)\",\r\n                cToken,\r\n                borrower\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\r\n     * @param contributor The address to calculate contributor rewards for\r\n     */\r\n    function updateContributorRewards(address contributor) public {\r\n        uint256 compSpeed = compContributorSpeeds[contributor];\r\n        uint256 blockNumber = getBlockNumber();\r\n        uint256 deltaBlocks = sub_(\r\n            blockNumber,\r\n            lastContributorBlock[contributor]\r\n        );\r\n        if (deltaBlocks > 0 && compSpeed > 0) {\r\n            uint256 newAccrued = mul_(deltaBlocks, compSpeed);\r\n            uint256 contributorAccrued = add_(\r\n                compAccrued[contributor],\r\n                newAccrued\r\n            );\r\n\r\n            compAccrued[contributor] = contributorAccrued;\r\n            lastContributorBlock[contributor] = blockNumber;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all the comp accrued by holder in all markets\r\n     * @param holder The address to claim COMP for\r\n     */\r\n    function claimComp(address holder) public {\r\n        return claimComp(holder, allMarkets);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all the comp accrued by holder in the specified markets\r\n     * @param holder The address to claim COMP for\r\n     * @param cTokens The list of markets to claim COMP in\r\n     */\r\n    function claimComp(address holder, CToken[] memory cTokens) public {\r\n        address[] memory holders = new address[](1);\r\n        holders[0] = holder;\r\n        claimComp(holders, cTokens, true, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all comp accrued by the holders\r\n     * @param holders The addresses to claim COMP for\r\n     * @param cTokens The list of markets to claim COMP in\r\n     * @param borrowers Whether or not to claim COMP earned by borrowing\r\n     * @param suppliers Whether or not to claim COMP earned by supplying\r\n     */\r\n    function claimComp(\r\n        address[] memory holders,\r\n        CToken[] memory cTokens,\r\n        bool borrowers,\r\n        bool suppliers\r\n    ) public {\r\n        for (uint256 i = 0; i < cTokens.length; i++) {\r\n            CToken cToken = cTokens[i];\r\n            require(markets[address(cToken)].isListed, \"market must be listed\");\r\n            if (borrowers == true) {\r\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\r\n                updateCompBorrowIndex(address(cToken), borrowIndex);\r\n                for (uint256 j = 0; j < holders.length; j++) {\r\n                    distributeBorrowerComp(\r\n                        address(cToken),\r\n                        holders[j],\r\n                        borrowIndex\r\n                    );\r\n                }\r\n            }\r\n            if (suppliers == true) {\r\n                updateCompSupplyIndex(address(cToken));\r\n                for (uint256 j = 0; j < holders.length; j++) {\r\n                    distributeSupplierComp(address(cToken), holders[j]);\r\n                }\r\n            }\r\n        }\r\n        for (uint256 j = 0; j < holders.length; j++) {\r\n            compAccrued[holders[j]] = grantCompInternal(\r\n                holders[j],\r\n                compAccrued[holders[j]]\r\n            );\r\n        }\r\n\r\n        (bool success, ) = getExternalRewardDistributorAddress().call(\r\n            abi.encodeWithSignature(\"claim(address[])\", holders)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer COMP to the user\r\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\r\n     * @param user The address of the user to transfer COMP to\r\n     * @param amount The amount of COMP to (possibly) transfer\r\n     * @return The amount of COMP which was NOT transferred to the user\r\n     */\r\n    function grantCompInternal(\r\n        address user,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        Comp comp = Comp(getCompAddress());\r\n        uint256 compRemaining = comp.balanceOf(address(this));\r\n        if (amount > 0 && amount <= compRemaining) {\r\n            comp.transfer(user, amount);\r\n            return 0;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /*** Comp Distribution Admin ***/\r\n\r\n    /**\r\n     * @notice Transfer COMP to the recipient\r\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\r\n     * @param recipient The address of the recipient to transfer COMP to\r\n     * @param amount The amount of COMP to (possibly) transfer\r\n     */\r\n    function _grantComp(address recipient, uint256 amount) public {\r\n        require(adminOrInitializing(), \"only admin can grant comp\");\r\n        uint256 amountLeft = grantCompInternal(recipient, amount);\r\n        require(amountLeft == 0, \"insufficient comp for grant\");\r\n        emit CompGranted(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set COMP borrow and supply speeds for the specified markets.\r\n     * @param cTokens The markets whose COMP speed to update.\r\n     * @param supplySpeeds New supply-side COMP speed for the corresponding market.\r\n     * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\r\n     */\r\n    function _setCompSpeeds(\r\n        CToken[] memory cTokens,\r\n        uint256[] memory supplySpeeds,\r\n        uint256[] memory borrowSpeeds\r\n    ) public {\r\n        require(adminOrInitializing(), \"only admin can set comp speed\");\r\n\r\n        uint256 numTokens = cTokens.length;\r\n        require(\r\n            numTokens == supplySpeeds.length &&\r\n                numTokens == borrowSpeeds.length,\r\n            \"Comptroller::_setCompSpeeds invalid input\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < numTokens; ++i) {\r\n            setCompSpeedInternal(cTokens[i], supplySpeeds[i], borrowSpeeds[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Set COMP speed for a single contributor\r\n     * @param contributor The contributor whose COMP speed to update\r\n     * @param compSpeed New COMP speed for contributor\r\n     */\r\n    function _setContributorCompSpeed(\r\n        address contributor,\r\n        uint256 compSpeed\r\n    ) public {\r\n        require(adminOrInitializing(), \"only admin can set comp speed\");\r\n\r\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\r\n        updateContributorRewards(contributor);\r\n        if (compSpeed == 0) {\r\n            // release storage\r\n            delete lastContributorBlock[contributor];\r\n        } else {\r\n            lastContributorBlock[contributor] = getBlockNumber();\r\n        }\r\n        compContributorSpeeds[contributor] = compSpeed;\r\n\r\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\r\n    }\r\n\r\n    /**\r\n     * @notice Return all of the markets\r\n     * @dev The automatic getter may be used to access an individual market.\r\n     * @return The list of market addresses\r\n     */\r\n    function getAllMarkets() public view returns (CToken[] memory) {\r\n        return allMarkets;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if the given cToken market has been deprecated\r\n     * @dev All borrows in a deprecated cToken market can be immediately liquidated\r\n     * @param cToken The market to check if deprecated\r\n     */\r\n    function isDeprecated(CToken cToken) public view returns (bool) {\r\n        return\r\n            markets[address(cToken)].collateralFactorMantissa == 0 &&\r\n            borrowGuardianPaused[address(cToken)] == true &&\r\n            cToken.reserveFactorMantissa() == 1e18;\r\n    }\r\n\r\n    function getBlockNumber() public view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the address of the SONNE token\r\n     * @return The address of SONNE\r\n     */\r\n    function getCompAddress() public view virtual returns (address) {\r\n        return 0x22a2488fE295047Ba13BD8cCCdBC8361DBD8cf7c;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the address of the external reward distributor\r\n     * @return The address of the external reward distributor\r\n     */\r\n    function getExternalRewardDistributorAddress()\r\n        public\r\n        view\r\n        virtual\r\n        returns (address)\r\n    {\r\n        return 0xd86C8d4279CCaFbec840c782BcC50D201f277419;\r\n    }\r\n}\r\n"
    },
    "contracts/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract ComptrollerInterface {\r\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\r\n    bool public constant isComptroller = true;\r\n\r\n    /*** Assets You Are In ***/\r\n\r\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\r\n    function exitMarket(address cToken) virtual external returns (uint);\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\r\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\r\n\r\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\r\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\r\n\r\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\r\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\r\n\r\n    function repayBorrowAllowed(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount) virtual external returns (uint);\r\n    function repayBorrowVerify(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint borrowerIndex) virtual external;\r\n\r\n    function liquidateBorrowAllowed(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount) virtual external returns (uint);\r\n    function liquidateBorrowVerify(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint seizeTokens) virtual external;\r\n\r\n    function seizeAllowed(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) virtual external returns (uint);\r\n    function seizeVerify(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) virtual external;\r\n\r\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\r\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        uint repayAmount) virtual external view returns (uint, uint);\r\n}\r\n"
    },
    "contracts/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\nimport \"./PriceOracle.sol\";\r\n\r\ncontract UnitrollerAdminStorage {\r\n    /**\r\n     * @notice Administrator for this contract\r\n     */\r\n    address public admin;\r\n\r\n    /**\r\n     * @notice Pending administrator for this contract\r\n     */\r\n    address public pendingAdmin;\r\n\r\n    /**\r\n     * @notice Active brains of Unitroller\r\n     */\r\n    address public comptrollerImplementation;\r\n\r\n    /**\r\n     * @notice Pending brains of Unitroller\r\n     */\r\n    address public pendingComptrollerImplementation;\r\n}\r\n\r\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\r\n    /**\r\n     * @notice Oracle which gives the price of any given asset\r\n     */\r\n    PriceOracle public oracle;\r\n\r\n    /**\r\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\r\n     */\r\n    uint256 public closeFactorMantissa;\r\n\r\n    /**\r\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\r\n     */\r\n    uint256 public liquidationIncentiveMantissa;\r\n\r\n    /**\r\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\r\n     */\r\n    uint256 public maxAssets;\r\n\r\n    /**\r\n     * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\r\n     */\r\n    mapping(address => CToken[]) public accountAssets;\r\n}\r\n\r\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\r\n    struct Market {\r\n        // Whether or not this market is listed\r\n        bool isListed;\r\n        //  Multiplier representing the most one can borrow against their collateral in this market.\r\n        //  For instance, 0.9 to allow borrowing 90% of collateral value.\r\n        //  Must be between 0 and 1, and stored as a mantissa.\r\n        uint256 collateralFactorMantissa;\r\n        // Per-market mapping of \"accounts in this asset\"\r\n        mapping(address => bool) accountMembership;\r\n        // Whether or not this market receives COMP\r\n        bool isComped;\r\n    }\r\n\r\n    /**\r\n     * @notice Official mapping of cTokens -> Market metadata\r\n     * @dev Used e.g. to determine if a market is supported\r\n     */\r\n    mapping(address => Market) public markets;\r\n\r\n    /**\r\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\r\n     *  Actions which allow users to remove their own assets cannot be paused.\r\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\r\n     */\r\n    address public pauseGuardian;\r\n    bool public _mintGuardianPaused;\r\n    bool public _borrowGuardianPaused;\r\n    bool public transferGuardianPaused;\r\n    bool public seizeGuardianPaused;\r\n    mapping(address => bool) public mintGuardianPaused;\r\n    mapping(address => bool) public borrowGuardianPaused;\r\n}\r\n\r\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\r\n    struct CompMarketState {\r\n        // The market's last updated compBorrowIndex or compSupplyIndex\r\n        uint224 index;\r\n        // The block number the index was last updated at\r\n        uint32 block;\r\n    }\r\n\r\n    /// @notice A list of all markets\r\n    CToken[] public allMarkets;\r\n\r\n    /// @notice The rate at which the flywheel distributes COMP, per block\r\n    uint256 public compRate;\r\n\r\n    /// @notice The portion of compRate that each market currently receives\r\n    mapping(address => uint256) public compSpeeds;\r\n\r\n    /// @notice The COMP market supply state for each market\r\n    mapping(address => CompMarketState) public compSupplyState;\r\n\r\n    /// @notice The COMP market borrow state for each market\r\n    mapping(address => CompMarketState) public compBorrowState;\r\n\r\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\r\n    mapping(address => mapping(address => uint256)) public compSupplierIndex;\r\n\r\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\r\n    mapping(address => mapping(address => uint256)) public compBorrowerIndex;\r\n\r\n    /// @notice The COMP accrued but not yet transferred to each user\r\n    mapping(address => uint256) public compAccrued;\r\n}\r\n\r\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\r\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\r\n    address public borrowCapGuardian;\r\n\r\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\r\n    mapping(address => uint256) public borrowCaps;\r\n}\r\n\r\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\r\n    /// @notice The portion of COMP that each contributor receives per block\r\n    mapping(address => uint256) public compContributorSpeeds;\r\n\r\n    /// @notice Last block at which a contributor's COMP rewards have been allocated\r\n    mapping(address => uint256) public lastContributorBlock;\r\n}\r\n\r\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\r\n    /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\r\n    mapping(address => uint256) public compBorrowSpeeds;\r\n\r\n    /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\r\n    mapping(address => uint256) public compSupplySpeeds;\r\n}\r\n\r\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\r\n    /// @notice Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\r\n    bool public proposal65FixExecuted;\r\n\r\n    /// @notice Accounting storage mapping account addresses to how much COMP they owe the protocol.\r\n    mapping(address => uint256) public compReceivable;\r\n}\r\n\r\ncontract ComptrollerV8Storage is ComptrollerV7Storage {\r\n    // @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying on the given market.\r\n    address public supplyCapGuardian;\r\n\r\n    // @notice Supply caps enforced by supplyAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\r\n    mapping(address => uint256) public supplyCaps;\r\n}\r\n"
    },
    "contracts/CToken.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./ComptrollerInterface.sol\";\r\nimport \"./CTokenInterfaces.sol\";\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./EIP20Interface.sol\";\r\nimport \"./InterestRateModel.sol\";\r\nimport \"./ExponentialNoError.sol\";\r\n\r\n/**\r\n * @title Compound's CToken Contract\r\n * @notice Abstract base for CTokens\r\n * @author Compound\r\n */\r\nabstract contract CToken is\r\n    CTokenInterface,\r\n    ExponentialNoError,\r\n    TokenErrorReporter\r\n{\r\n    /**\r\n     * @notice Initialize the money market\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ EIP-20 name of this token\r\n     * @param symbol_ EIP-20 symbol of this token\r\n     * @param decimals_ EIP-20 decimal precision of this token\r\n     */\r\n    function initialize(\r\n        ComptrollerInterface comptroller_,\r\n        InterestRateModel interestRateModel_,\r\n        uint256 initialExchangeRateMantissa_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) public {\r\n        require(msg.sender == admin, \"only admin may initialize the market\");\r\n        require(\r\n            accrualBlockNumber == 0 && borrowIndex == 0,\r\n            \"market may only be initialized once\"\r\n        );\r\n\r\n        // Set initial exchange rate\r\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\r\n        require(\r\n            initialExchangeRateMantissa > 0,\r\n            \"initial exchange rate must be greater than zero.\"\r\n        );\r\n\r\n        // Set the comptroller\r\n        uint256 err = _setComptroller(comptroller_);\r\n        require(err == NO_ERROR, \"setting comptroller failed\");\r\n\r\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\r\n        accrualBlockNumber = getBlockNumber();\r\n        borrowIndex = mantissaOne;\r\n\r\n        // Set the interest rate model (depends on block number / borrow index)\r\n        err = _setInterestRateModelFresh(interestRateModel_);\r\n        require(err == NO_ERROR, \"setting interest rate model failed\");\r\n\r\n        name = name_;\r\n        symbol = symbol_;\r\n        decimals = decimals_;\r\n\r\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\r\n     * @dev Called by both `transfer` and `transferFrom` internally\r\n     * @param spender The address of the account performing the transfer\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param tokens The number of tokens to transfer\r\n     * @return 0 if the transfer succeeded, else revert\r\n     */\r\n    function transferTokens(\r\n        address spender,\r\n        address src,\r\n        address dst,\r\n        uint256 tokens\r\n    ) internal returns (uint256) {\r\n        /* Fail if transfer not allowed */\r\n        uint256 allowed = comptroller.transferAllowed(\r\n            address(this),\r\n            src,\r\n            dst,\r\n            tokens\r\n        );\r\n        if (allowed != 0) {\r\n            revert TransferComptrollerRejection(allowed);\r\n        }\r\n\r\n        /* Do not allow self-transfers */\r\n        if (src == dst) {\r\n            revert TransferNotAllowed();\r\n        }\r\n\r\n        /* Get the allowance, infinite for the account owner */\r\n        uint256 startingAllowance = 0;\r\n        if (spender == src) {\r\n            startingAllowance = type(uint256).max;\r\n        } else {\r\n            startingAllowance = transferAllowances[src][spender];\r\n        }\r\n\r\n        /* Do the calculations, checking for {under,over}flow */\r\n        uint256 allowanceNew = startingAllowance - tokens;\r\n        uint256 srcTokensNew = accountTokens[src] - tokens;\r\n        uint256 dstTokensNew = accountTokens[dst] + tokens;\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        accountTokens[src] = srcTokensNew;\r\n        accountTokens[dst] = dstTokensNew;\r\n\r\n        /* Eat some of the allowance (if necessary) */\r\n        if (startingAllowance != type(uint256).max) {\r\n            transferAllowances[src][spender] = allowanceNew;\r\n        }\r\n\r\n        /* We emit a Transfer event */\r\n        emit Transfer(src, dst, tokens);\r\n\r\n        // unused function\r\n        // comptroller.transferVerify(address(this), src, dst, tokens);\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint256 amount)\r\n        external\r\n        override\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external override nonReentrant returns (bool) {\r\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        address src = msg.sender;\r\n        transferAllowances[src][spender] = amount;\r\n        emit Approval(src, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current allowance from `owner` for `spender`\r\n     * @param owner The address of the account which owns the tokens to be spent\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @return The number of tokens allowed to be spent (-1 means infinite)\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return transferAllowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the token balance of the `owner`\r\n     * @param owner The address of the account to query\r\n     * @return The number of tokens owned by `owner`\r\n     */\r\n    function balanceOf(address owner) external view override returns (uint256) {\r\n        return accountTokens[owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the underlying balance of the `owner`\r\n     * @dev This also accrues interest in a transaction\r\n     * @param owner The address of the account to query\r\n     * @return The amount of underlying owned by `owner`\r\n     */\r\n    function balanceOfUnderlying(address owner)\r\n        external\r\n        override\r\n        returns (uint256)\r\n    {\r\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\r\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\r\n    }\r\n\r\n    /**\r\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\r\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\r\n     * @param account Address of the account to snapshot\r\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\r\n     */\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            NO_ERROR,\r\n            accountTokens[account],\r\n            borrowBalanceStoredInternal(account),\r\n            exchangeRateStoredInternal()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Function to simply retrieve block number\r\n     *  This exists mainly for inheriting test contracts to stub this result.\r\n     */\r\n    function getBlockNumber() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current per-block borrow interest rate for this cToken\r\n     * @return The borrow interest rate per block, scaled by 1e18\r\n     */\r\n    function borrowRatePerBlock() external view override returns (uint256) {\r\n        return\r\n            interestRateModel.getBorrowRate(\r\n                getCashPrior(),\r\n                totalBorrows,\r\n                totalReserves\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current per-block supply interest rate for this cToken\r\n     * @return The supply interest rate per block, scaled by 1e18\r\n     */\r\n    function supplyRatePerBlock() external view override returns (uint256) {\r\n        return\r\n            interestRateModel.getSupplyRate(\r\n                getCashPrior(),\r\n                totalBorrows,\r\n                totalReserves,\r\n                reserveFactorMantissa\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current total borrows plus accrued interest\r\n     * @return The total borrows with interest\r\n     */\r\n    function totalBorrowsCurrent()\r\n        external\r\n        override\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        accrueInterest();\r\n        return totalBorrows;\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\r\n     * @param account The address whose balance should be calculated after updating borrowIndex\r\n     * @return The calculated balance\r\n     */\r\n    function borrowBalanceCurrent(address account)\r\n        external\r\n        override\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        accrueInterest();\r\n        return borrowBalanceStored(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the borrow balance of account based on stored data\r\n     * @param account The address whose balance should be calculated\r\n     * @return The calculated balance\r\n     */\r\n    function borrowBalanceStored(address account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return borrowBalanceStoredInternal(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the borrow balance of account based on stored data\r\n     * @param account The address whose balance should be calculated\r\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\r\n     */\r\n    function borrowBalanceStoredInternal(address account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        /* Get borrowBalance and borrowIndex */\r\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\r\n\r\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\r\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\r\n         */\r\n        if (borrowSnapshot.principal == 0) {\r\n            return 0;\r\n        }\r\n\r\n        /* Calculate new borrow balance using the interest index:\r\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\r\n         */\r\n        uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\r\n        return principalTimesIndex / borrowSnapshot.interestIndex;\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue interest then return the up-to-date exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateCurrent()\r\n        public\r\n        override\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        accrueInterest();\r\n        return exchangeRateStored();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateStored() public view override returns (uint256) {\r\n        return exchangeRateStoredInternal();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateStoredInternal()\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        uint256 _totalSupply = totalSupply;\r\n        if (_totalSupply == 0) {\r\n            /*\r\n             * If there are no tokens minted:\r\n             *  exchangeRate = initialExchangeRate\r\n             */\r\n            return initialExchangeRateMantissa;\r\n        } else {\r\n            /*\r\n             * Otherwise:\r\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\r\n             */\r\n            uint256 totalCash = getCashPrior();\r\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\r\n                totalBorrows -\r\n                totalReserves;\r\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\r\n                _totalSupply;\r\n\r\n            return exchangeRate;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get cash balance of this cToken in the underlying asset\r\n     * @return The quantity of underlying asset owned by this contract\r\n     */\r\n    function getCash() external view override returns (uint256) {\r\n        return getCashPrior();\r\n    }\r\n\r\n    /**\r\n     * @notice Applies accrued interest to total borrows and reserves\r\n     * @dev This calculates interest accrued from the last checkpointed block\r\n     *   up to the current block and writes new checkpoint to storage.\r\n     */\r\n    function accrueInterest() public virtual override returns (uint256) {\r\n        /* Remember the initial block number */\r\n        uint256 currentBlockNumber = getBlockNumber();\r\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\r\n\r\n        /* Short-circuit accumulating 0 interest */\r\n        if (accrualBlockNumberPrior == currentBlockNumber) {\r\n            return NO_ERROR;\r\n        }\r\n\r\n        /* Read the previous values out of storage */\r\n        uint256 cashPrior = getCashPrior();\r\n        uint256 borrowsPrior = totalBorrows;\r\n        uint256 reservesPrior = totalReserves;\r\n        uint256 borrowIndexPrior = borrowIndex;\r\n\r\n        /* Calculate the current borrow interest rate */\r\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\r\n            cashPrior,\r\n            borrowsPrior,\r\n            reservesPrior\r\n        );\r\n        require(\r\n            borrowRateMantissa <= borrowRateMaxMantissa,\r\n            \"borrow rate is absurdly high\"\r\n        );\r\n\r\n        /* Calculate the number of blocks elapsed since the last accrual */\r\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\r\n\r\n        /*\r\n         * Calculate the interest accumulated into borrows and reserves and the new index:\r\n         *  simpleInterestFactor = borrowRate * blockDelta\r\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\r\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\r\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\r\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\r\n         */\r\n\r\n        Exp memory simpleInterestFactor = mul_(\r\n            Exp({mantissa: borrowRateMantissa}),\r\n            blockDelta\r\n        );\r\n        uint256 interestAccumulated = mul_ScalarTruncate(\r\n            simpleInterestFactor,\r\n            borrowsPrior\r\n        );\r\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\r\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\r\n            Exp({mantissa: reserveFactorMantissa}),\r\n            interestAccumulated,\r\n            reservesPrior\r\n        );\r\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\r\n            simpleInterestFactor,\r\n            borrowIndexPrior,\r\n            borrowIndexPrior\r\n        );\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /* We write the previously calculated values into storage */\r\n        accrualBlockNumber = currentBlockNumber;\r\n        borrowIndex = borrowIndexNew;\r\n        totalBorrows = totalBorrowsNew;\r\n        totalReserves = totalReservesNew;\r\n\r\n        /* We emit an AccrueInterest event */\r\n        emit AccrueInterest(\r\n            cashPrior,\r\n            interestAccumulated,\r\n            borrowIndexNew,\r\n            totalBorrowsNew\r\n        );\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     */\r\n    function mintInternal(uint256 mintAmount) internal nonReentrant {\r\n        accrueInterest();\r\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\r\n        mintFresh(msg.sender, mintAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice User supplies assets into the market and receives cTokens in exchange\r\n     * @dev Assumes interest has already been accrued up to the current block\r\n     * @param minter The address of the account which is supplying the assets\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     */\r\n    function mintFresh(address minter, uint256 mintAmount) internal {\r\n        /* Fail if mint not allowed */\r\n        uint256 allowed = comptroller.mintAllowed(\r\n            address(this),\r\n            minter,\r\n            mintAmount\r\n        );\r\n        if (allowed != 0) {\r\n            revert MintComptrollerRejection(allowed);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert MintFreshnessCheck();\r\n        }\r\n\r\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         *  We call `doTransferIn` for the minter and the mintAmount.\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\r\n         *  side-effects occurred. The function returns the amount actually transferred,\r\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\r\n         *  of cash.\r\n         */\r\n        uint256 actualMintAmount = doTransferIn(minter, mintAmount);\r\n\r\n        /*\r\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\r\n         *  mintTokens = actualMintAmount / exchangeRate\r\n         */\r\n\r\n        uint256 mintTokens = div_(actualMintAmount, exchangeRate);\r\n\r\n        /*\r\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\r\n         *  totalSupplyNew = totalSupply + mintTokens\r\n         *  accountTokensNew = accountTokens[minter] + mintTokens\r\n         * And write them into storage\r\n         */\r\n        totalSupply = totalSupply + mintTokens;\r\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\r\n\r\n        /* We emit a Mint event, and a Transfer event */\r\n        emit Mint(minter, actualMintAmount, mintTokens);\r\n        emit Transfer(address(this), minter, mintTokens);\r\n\r\n        /* We call the defense hook */\r\n        comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     */\r\n    function redeemInternal(uint256 redeemTokens) internal nonReentrant {\r\n        accrueInterest();\r\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\r\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\r\n     */\r\n    function redeemUnderlyingInternal(uint256 redeemAmount)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        accrueInterest();\r\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\r\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice User redeems cTokens in exchange for the underlying asset\r\n     * @dev Assumes interest has already been accrued up to the current block\r\n     * @param redeemer The address of the account which is redeeming the tokens\r\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\r\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\r\n     */\r\n    function redeemFresh(\r\n        address payable redeemer,\r\n        uint256 redeemTokensIn,\r\n        uint256 redeemAmountIn\r\n    ) internal {\r\n        require(\r\n            redeemTokensIn == 0 || redeemAmountIn == 0,\r\n            \"one of redeemTokensIn or redeemAmountIn must be zero\"\r\n        );\r\n\r\n        /* exchangeRate = invoke Exchange Rate Stored() */\r\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\r\n\r\n        uint256 redeemTokens;\r\n        uint256 redeemAmount;\r\n        /* If redeemTokensIn > 0: */\r\n        if (redeemTokensIn > 0) {\r\n            /*\r\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\r\n             *  redeemTokens = redeemTokensIn\r\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\r\n             */\r\n            redeemTokens = redeemTokensIn;\r\n            redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\r\n        } else {\r\n            /*\r\n             * We get the current exchange rate and calculate the amount to be redeemed:\r\n             *  redeemTokens = redeemAmountIn / exchangeRate\r\n             *  redeemAmount = redeemAmountIn\r\n             */\r\n            redeemTokens = div_(redeemAmountIn, exchangeRate);\r\n            redeemAmount = redeemAmountIn;\r\n        }\r\n\r\n        /* Fail if redeem not allowed */\r\n        uint256 allowed = comptroller.redeemAllowed(\r\n            address(this),\r\n            redeemer,\r\n            redeemTokens\r\n        );\r\n        if (allowed != 0) {\r\n            revert RedeemComptrollerRejection(allowed);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert RedeemFreshnessCheck();\r\n        }\r\n\r\n        /* Fail gracefully if protocol has insufficient cash */\r\n        if (getCashPrior() < redeemAmount) {\r\n            revert RedeemTransferOutNotPossible();\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         * We write the previously calculated values into storage.\r\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\r\n         */\r\n        totalSupply = totalSupply - redeemTokens;\r\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\r\n\r\n        /*\r\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  On success, the cToken has redeemAmount less of cash.\r\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n         */\r\n        doTransferOut(redeemer, redeemAmount);\r\n\r\n        /* We emit a Transfer event, and a Redeem event */\r\n        emit Transfer(redeemer, address(this), redeemTokens);\r\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\r\n\r\n        /* We call the defense hook */\r\n        comptroller.redeemVerify(\r\n            address(this),\r\n            redeemer,\r\n            redeemAmount,\r\n            redeemTokens\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sender borrows assets from the protocol to their own address\r\n     * @param borrowAmount The amount of the underlying asset to borrow\r\n     */\r\n    function borrowInternal(uint256 borrowAmount) internal nonReentrant {\r\n        accrueInterest();\r\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\r\n        borrowFresh(payable(msg.sender), borrowAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Users borrow assets from the protocol to their own address\r\n     * @param borrowAmount The amount of the underlying asset to borrow\r\n     */\r\n    function borrowFresh(address payable borrower, uint256 borrowAmount)\r\n        internal\r\n    {\r\n        /* Fail if borrow not allowed */\r\n        uint256 allowed = comptroller.borrowAllowed(\r\n            address(this),\r\n            borrower,\r\n            borrowAmount\r\n        );\r\n        if (allowed != 0) {\r\n            revert BorrowComptrollerRejection(allowed);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert BorrowFreshnessCheck();\r\n        }\r\n\r\n        /* Fail gracefully if protocol has insufficient underlying cash */\r\n        if (getCashPrior() < borrowAmount) {\r\n            revert BorrowCashNotAvailable();\r\n        }\r\n\r\n        /*\r\n         * We calculate the new borrower and total borrow balances, failing on overflow:\r\n         *  accountBorrowNew = accountBorrow + borrowAmount\r\n         *  totalBorrowsNew = totalBorrows + borrowAmount\r\n         */\r\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\r\n        uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\r\n        uint256 totalBorrowsNew = totalBorrows + borrowAmount;\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         * We write the previously calculated values into storage.\r\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\r\n        `*/\r\n        accountBorrows[borrower].principal = accountBorrowsNew;\r\n        accountBorrows[borrower].interestIndex = borrowIndex;\r\n        totalBorrows = totalBorrowsNew;\r\n\r\n        /*\r\n         * We invoke doTransferOut for the borrower and the borrowAmount.\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  On success, the cToken borrowAmount less of cash.\r\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n         */\r\n        doTransferOut(borrower, borrowAmount);\r\n\r\n        /* We emit a Borrow event */\r\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     */\r\n    function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\r\n        accrueInterest();\r\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\r\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     */\r\n    function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        accrueInterest();\r\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\r\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Borrows are repaid by another user (possibly the borrower).\r\n     * @param payer the account paying off the borrow\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\r\n     * @return (uint) the actual repayment amount.\r\n     */\r\n    function repayBorrowFresh(\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) internal returns (uint256) {\r\n        /* Fail if repayBorrow not allowed */\r\n        uint256 allowed = comptroller.repayBorrowAllowed(\r\n            address(this),\r\n            payer,\r\n            borrower,\r\n            repayAmount\r\n        );\r\n        if (allowed != 0) {\r\n            revert RepayBorrowComptrollerRejection(allowed);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert RepayBorrowFreshnessCheck();\r\n        }\r\n\r\n        /* We fetch the amount the borrower owes, with accumulated interest */\r\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\r\n\r\n        /* If repayAmount == -1, repayAmount = accountBorrows */\r\n        uint256 repayAmountFinal = repayAmount == type(uint256).max\r\n            ? accountBorrowsPrev\r\n            : repayAmount;\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         * We call doTransferIn for the payer and the repayAmount\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  On success, the cToken holds an additional repayAmount of cash.\r\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n         *   it returns the amount actually transferred, in case of a fee.\r\n         */\r\n        uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\r\n\r\n        /*\r\n         * We calculate the new borrower and total borrow balances, failing on underflow:\r\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\r\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\r\n         */\r\n        uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\r\n        uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\r\n\r\n        /* We write the previously calculated values into storage */\r\n        accountBorrows[borrower].principal = accountBorrowsNew;\r\n        accountBorrows[borrower].interestIndex = borrowIndex;\r\n        totalBorrows = totalBorrowsNew;\r\n\r\n        /* We emit a RepayBorrow event */\r\n        emit RepayBorrow(\r\n            payer,\r\n            borrower,\r\n            actualRepayAmount,\r\n            accountBorrowsNew,\r\n            totalBorrowsNew\r\n        );\r\n\r\n        return actualRepayAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     */\r\n    function liquidateBorrowInternal(\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        CTokenInterface cTokenCollateral\r\n    ) internal nonReentrant {\r\n        accrueInterest();\r\n\r\n        uint256 error = cTokenCollateral.accrueInterest();\r\n        if (error != NO_ERROR) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\r\n            revert LiquidateAccrueCollateralInterestFailed(error);\r\n        }\r\n\r\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\r\n        liquidateBorrowFresh(\r\n            msg.sender,\r\n            borrower,\r\n            repayAmount,\r\n            cTokenCollateral\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice The liquidator liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param liquidator The address repaying the borrow and seizing collateral\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     */\r\n    function liquidateBorrowFresh(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        CTokenInterface cTokenCollateral\r\n    ) internal {\r\n        /* Fail if liquidate not allowed */\r\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\r\n            address(this),\r\n            address(cTokenCollateral),\r\n            liquidator,\r\n            borrower,\r\n            repayAmount\r\n        );\r\n        if (allowed != 0) {\r\n            revert LiquidateComptrollerRejection(allowed);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert LiquidateFreshnessCheck();\r\n        }\r\n\r\n        /* Verify cTokenCollateral market's block number equals current block number */\r\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\r\n            revert LiquidateCollateralFreshnessCheck();\r\n        }\r\n\r\n        /* Fail if borrower = liquidator */\r\n        if (borrower == liquidator) {\r\n            revert LiquidateLiquidatorIsBorrower();\r\n        }\r\n\r\n        /* Fail if repayAmount = 0 */\r\n        if (repayAmount == 0) {\r\n            revert LiquidateCloseAmountIsZero();\r\n        }\r\n\r\n        /* Fail if repayAmount = -1 */\r\n        if (repayAmount == type(uint256).max) {\r\n            revert LiquidateCloseAmountIsUintMax();\r\n        }\r\n\r\n        /* Fail if repayBorrow fails */\r\n        uint256 actualRepayAmount = repayBorrowFresh(\r\n            liquidator,\r\n            borrower,\r\n            repayAmount\r\n        );\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /* We calculate the number of collateral tokens that will be seized */\r\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\r\n            .liquidateCalculateSeizeTokens(\r\n                address(this),\r\n                address(cTokenCollateral),\r\n                actualRepayAmount\r\n            );\r\n        require(\r\n            amountSeizeError == NO_ERROR,\r\n            \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\"\r\n        );\r\n\r\n        /* Revert if borrower collateral token balance < seizeTokens */\r\n        require(\r\n            cTokenCollateral.balanceOf(borrower) >= seizeTokens,\r\n            \"LIQUIDATE_SEIZE_TOO_MUCH\"\r\n        );\r\n\r\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\r\n        if (address(cTokenCollateral) == address(this)) {\r\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\r\n        } else {\r\n            require(\r\n                cTokenCollateral.seize(liquidator, borrower, seizeTokens) ==\r\n                    NO_ERROR,\r\n                \"token seizure failed\"\r\n            );\r\n        }\r\n\r\n        /* We emit a LiquidateBorrow event */\r\n        emit LiquidateBorrow(\r\n            liquidator,\r\n            borrower,\r\n            actualRepayAmount,\r\n            address(cTokenCollateral),\r\n            seizeTokens\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers collateral tokens (this market) to the liquidator.\r\n     * @dev Will fail unless called by another cToken during the process of liquidation.\r\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\r\n     * @param liquidator The account receiving seized collateral\r\n     * @param borrower The account having collateral seized\r\n     * @param seizeTokens The number of cTokens to seize\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function seize(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external override nonReentrant returns (uint256) {\r\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers collateral tokens (this market) to the liquidator.\r\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\r\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\r\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\r\n     * @param liquidator The account receiving seized collateral\r\n     * @param borrower The account having collateral seized\r\n     * @param seizeTokens The number of cTokens to seize\r\n     */\r\n    function seizeInternal(\r\n        address seizerToken,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) internal {\r\n        /* Fail if seize not allowed */\r\n        uint256 allowed = comptroller.seizeAllowed(\r\n            address(this),\r\n            seizerToken,\r\n            liquidator,\r\n            borrower,\r\n            seizeTokens\r\n        );\r\n        if (allowed != 0) {\r\n            revert LiquidateSeizeComptrollerRejection(allowed);\r\n        }\r\n\r\n        /* Fail if borrower = liquidator */\r\n        if (borrower == liquidator) {\r\n            revert LiquidateSeizeLiquidatorIsBorrower();\r\n        }\r\n\r\n        /*\r\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\r\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\r\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\r\n         */\r\n        uint256 protocolSeizeTokens = mul_(\r\n            seizeTokens,\r\n            Exp({mantissa: protocolSeizeShareMantissa})\r\n        );\r\n        uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\r\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\r\n        uint256 protocolSeizeAmount = mul_ScalarTruncate(\r\n            exchangeRate,\r\n            protocolSeizeTokens\r\n        );\r\n        uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /* We write the calculated values into storage */\r\n        totalReserves = totalReservesNew;\r\n        totalSupply = totalSupply - protocolSeizeTokens;\r\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\r\n        accountTokens[liquidator] =\r\n            accountTokens[liquidator] +\r\n            liquidatorSeizeTokens;\r\n\r\n        /* Emit a Transfer event */\r\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\r\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\r\n        emit ReservesAdded(\r\n            address(this),\r\n            protocolSeizeAmount,\r\n            totalReservesNew\r\n        );\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    /**\r\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n     * @param newPendingAdmin New pending admin.\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setPendingAdmin(address payable newPendingAdmin)\r\n        external\r\n        override\r\n        returns (uint256)\r\n    {\r\n        // Check caller = admin\r\n        if (msg.sender != admin) {\r\n            revert SetPendingAdminOwnerCheck();\r\n        }\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n     * @dev Admin function for pending admin to accept role and update admin\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _acceptAdmin() external override returns (uint256) {\r\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n            revert AcceptAdminPendingAdminCheck();\r\n        }\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = payable(address(0));\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new comptroller for the market\r\n     * @dev Admin function to set a new comptroller\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setComptroller(ComptrollerInterface newComptroller)\r\n        public\r\n        override\r\n        returns (uint256)\r\n    {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            revert SetComptrollerOwnerCheck();\r\n        }\r\n\r\n        ComptrollerInterface oldComptroller = comptroller;\r\n        // Ensure invoke comptroller.isComptroller() returns true\r\n        require(newComptroller.isComptroller(), \"marker method returned false\");\r\n\r\n        // Set market's comptroller to newComptroller\r\n        comptroller = newComptroller;\r\n\r\n        // Emit NewComptroller(oldComptroller, newComptroller)\r\n        emit NewComptroller(oldComptroller, newComptroller);\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\r\n     * @dev Admin function to accrue interest and set a new reserve factor\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\r\n        external\r\n        override\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        accrueInterest();\r\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\r\n        return _setReserveFactorFresh(newReserveFactorMantissa);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\r\n     * @dev Admin function to set a new reserve factor\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            revert SetReserveFactorAdminCheck();\r\n        }\r\n\r\n        // Verify market's block number equals current block number\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert SetReserveFactorFreshCheck();\r\n        }\r\n\r\n        // Check newReserveFactor ≤ maxReserveFactor\r\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\r\n            revert SetReserveFactorBoundsCheck();\r\n        }\r\n\r\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\r\n        reserveFactorMantissa = newReserveFactorMantissa;\r\n\r\n        emit NewReserveFactor(\r\n            oldReserveFactorMantissa,\r\n            newReserveFactorMantissa\r\n        );\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\r\n     * @param addAmount Amount of addition to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _addReservesInternal(uint256 addAmount)\r\n        internal\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        accrueInterest();\r\n\r\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\r\n        _addReservesFresh(addAmount);\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Add reserves by transferring from caller\r\n     * @dev Requires fresh interest accrual\r\n     * @param addAmount Amount of addition to reserves\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\r\n     */\r\n    function _addReservesFresh(uint256 addAmount)\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        // totalReserves + actualAddAmount\r\n        uint256 totalReservesNew;\r\n        uint256 actualAddAmount;\r\n\r\n        // We fail gracefully unless market's block number equals current block number\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert AddReservesFactorFreshCheck(actualAddAmount);\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         * We call doTransferIn for the caller and the addAmount\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  On success, the cToken holds an additional addAmount of cash.\r\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n         *  it returns the amount actually transferred, in case of a fee.\r\n         */\r\n\r\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\r\n\r\n        totalReservesNew = totalReserves + actualAddAmount;\r\n\r\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\r\n        totalReserves = totalReservesNew;\r\n\r\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\r\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\r\n\r\n        /* Return (NO_ERROR, actualAddAmount) */\r\n        return (NO_ERROR, actualAddAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Accrues interest and reduces reserves by transferring to admin\r\n     * @param reduceAmount Amount of reduction to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _reduceReserves(uint256 reduceAmount)\r\n        external\r\n        override\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        accrueInterest();\r\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\r\n        return _reduceReservesFresh(reduceAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Reduces reserves by transferring to admin\r\n     * @dev Requires fresh interest accrual\r\n     * @param reduceAmount Amount of reduction to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _reduceReservesFresh(uint256 reduceAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // totalReserves - reduceAmount\r\n        uint256 totalReservesNew;\r\n\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            revert ReduceReservesAdminCheck();\r\n        }\r\n\r\n        // We fail gracefully unless market's block number equals current block number\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert ReduceReservesFreshCheck();\r\n        }\r\n\r\n        // Fail gracefully if protocol has insufficient underlying cash\r\n        if (getCashPrior() < reduceAmount) {\r\n            revert ReduceReservesCashNotAvailable();\r\n        }\r\n\r\n        // Check reduceAmount ≤ reserves[n] (totalReserves)\r\n        if (reduceAmount > totalReserves) {\r\n            revert ReduceReservesCashValidation();\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        totalReservesNew = totalReserves - reduceAmount;\r\n\r\n        // Store reserves[n+1] = reserves[n] - reduceAmount\r\n        totalReserves = totalReservesNew;\r\n\r\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n        doTransferOut(admin, reduceAmount);\r\n\r\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\r\n     * @dev Admin function to accrue interest and update the interest rate model\r\n     * @param newInterestRateModel the new interest rate model to use\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\r\n        public\r\n        override\r\n        returns (uint256)\r\n    {\r\n        accrueInterest();\r\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\r\n        return _setInterestRateModelFresh(newInterestRateModel);\r\n    }\r\n\r\n    /**\r\n     * @notice updates the interest rate model (*requires fresh interest accrual)\r\n     * @dev Admin function to update the interest rate model\r\n     * @param newInterestRateModel the new interest rate model to use\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Used to store old model for use in the event that is emitted on success\r\n        InterestRateModel oldInterestRateModel;\r\n\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            revert SetInterestRateModelOwnerCheck();\r\n        }\r\n\r\n        // We fail gracefully unless market's block number equals current block number\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            revert SetInterestRateModelFreshCheck();\r\n        }\r\n\r\n        // Track the market's current interest rate model\r\n        oldInterestRateModel = interestRateModel;\r\n\r\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\r\n        require(\r\n            newInterestRateModel.isInterestRateModel(),\r\n            \"marker method returned false\"\r\n        );\r\n\r\n        // Set the interest rate model to newInterestRateModel\r\n        interestRateModel = newInterestRateModel;\r\n\r\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\r\n        emit NewMarketInterestRateModel(\r\n            oldInterestRateModel,\r\n            newInterestRateModel\r\n        );\r\n\r\n        return NO_ERROR;\r\n    }\r\n\r\n    /*** Safe Token ***/\r\n\r\n    /**\r\n     * @notice Gets balance of this contract in terms of the underlying\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of underlying owned by this contract\r\n     */\r\n    function getCashPrior() internal view virtual returns (uint256);\r\n\r\n    /**\r\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\r\n     *  This may revert due to insufficient balance or insufficient allowance.\r\n     */\r\n    function doTransferIn(address from, uint256 amount)\r\n        internal\r\n        virtual\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\r\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\r\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\r\n     */\r\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\r\n\r\n    /*** Reentrancy Guard ***/\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     */\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"re-entered\");\r\n        _notEntered = false;\r\n        _;\r\n        _notEntered = true; // get a gas-refund post-Istanbul\r\n    }\r\n}\r\n"
    },
    "contracts/CTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./ComptrollerInterface.sol\";\r\nimport \"./InterestRateModel.sol\";\r\nimport \"./EIP20NonStandardInterface.sol\";\r\nimport \"./ErrorReporter.sol\";\r\n\r\ncontract CTokenStorage {\r\n    /**\r\n     * @dev Guard variable for re-entrancy checks\r\n     */\r\n    bool internal _notEntered;\r\n\r\n    /**\r\n     * @notice EIP-20 token name for this token\r\n     */\r\n    string public name;\r\n\r\n    /**\r\n     * @notice EIP-20 token symbol for this token\r\n     */\r\n    string public symbol;\r\n\r\n    /**\r\n     * @notice EIP-20 token decimals for this token\r\n     */\r\n    uint8 public decimals;\r\n\r\n    // Maximum borrow rate that can ever be applied (.00004% / block)\r\n    uint internal constant borrowRateMaxMantissa = 0.00004e16;\r\n\r\n    // Maximum fraction of interest that can be set aside for reserves\r\n    uint internal constant reserveFactorMaxMantissa = 1e18;\r\n\r\n    /**\r\n     * @notice Administrator for this contract\r\n     */\r\n    address payable public admin;\r\n\r\n    /**\r\n     * @notice Pending administrator for this contract\r\n     */\r\n    address payable public pendingAdmin;\r\n\r\n    /**\r\n     * @notice Contract which oversees inter-cToken operations\r\n     */\r\n    ComptrollerInterface public comptroller;\r\n\r\n    /**\r\n     * @notice Model which tells what the current interest rate should be\r\n     */\r\n    InterestRateModel public interestRateModel;\r\n\r\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\r\n    uint internal initialExchangeRateMantissa;\r\n\r\n    /**\r\n     * @notice Fraction of interest currently set aside for reserves\r\n     */\r\n    uint public reserveFactorMantissa;\r\n\r\n    /**\r\n     * @notice Block number that interest was last accrued at\r\n     */\r\n    uint public accrualBlockNumber;\r\n\r\n    /**\r\n     * @notice Accumulator of the total earned interest rate since the opening of the market\r\n     */\r\n    uint public borrowIndex;\r\n\r\n    /**\r\n     * @notice Total amount of outstanding borrows of the underlying in this market\r\n     */\r\n    uint public totalBorrows;\r\n\r\n    /**\r\n     * @notice Total amount of reserves of the underlying held in this market\r\n     */\r\n    uint public totalReserves;\r\n\r\n    /**\r\n     * @notice Total number of tokens in circulation\r\n     */\r\n    uint public totalSupply;\r\n\r\n    // Official record of token balances for each account\r\n    mapping (address => uint) internal accountTokens;\r\n\r\n    // Approved token transfer amounts on behalf of others\r\n    mapping (address => mapping (address => uint)) internal transferAllowances;\r\n\r\n    /**\r\n     * @notice Container for borrow balance information\r\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\r\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\r\n     */\r\n    struct BorrowSnapshot {\r\n        uint principal;\r\n        uint interestIndex;\r\n    }\r\n\r\n    // Mapping of account addresses to outstanding borrow balances\r\n    mapping(address => BorrowSnapshot) internal accountBorrows;\r\n\r\n    /**\r\n     * @notice Share of seized collateral that is added to reserves\r\n     */\r\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\r\n}\r\n\r\nabstract contract CTokenInterface is CTokenStorage {\r\n    /**\r\n     * @notice Indicator that this is a CToken contract (for inspection)\r\n     */\r\n    bool public constant isCToken = true;\r\n\r\n\r\n    /*** Market Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when interest is accrued\r\n     */\r\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are minted\r\n     */\r\n    event Mint(address minter, uint mintAmount, uint mintTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are redeemed\r\n     */\r\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when underlying is borrowed\r\n     */\r\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is repaid\r\n     */\r\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is liquidated\r\n     */\r\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\r\n\r\n\r\n    /*** Admin Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is changed\r\n     */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\r\n     */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when comptroller is changed\r\n     */\r\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\r\n\r\n    /**\r\n     * @notice Event emitted when interestRateModel is changed\r\n     */\r\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserve factor is changed\r\n     */\r\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are added\r\n     */\r\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are reduced\r\n     */\r\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\r\n\r\n    /**\r\n     * @notice EIP20 Transfer event\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    /**\r\n     * @notice EIP20 Approval event\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n\r\n    /*** User Interface ***/\r\n\r\n    function transfer(address dst, uint amount) virtual external returns (bool);\r\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\r\n    function approve(address spender, uint amount) virtual external returns (bool);\r\n    function allowance(address owner, address spender) virtual external view returns (uint);\r\n    function balanceOf(address owner) virtual external view returns (uint);\r\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\r\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\r\n    function borrowRatePerBlock() virtual external view returns (uint);\r\n    function supplyRatePerBlock() virtual external view returns (uint);\r\n    function totalBorrowsCurrent() virtual external returns (uint);\r\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\r\n    function borrowBalanceStored(address account) virtual external view returns (uint);\r\n    function exchangeRateCurrent() virtual external returns (uint);\r\n    function exchangeRateStored() virtual external view returns (uint);\r\n    function getCash() virtual external view returns (uint);\r\n    function accrueInterest() virtual external returns (uint);\r\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\r\n\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\r\n    function _acceptAdmin() virtual external returns (uint);\r\n    function _setComptroller(ComptrollerInterface newComptroller) virtual external returns (uint);\r\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\r\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\r\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual external returns (uint);\r\n}\r\n\r\ncontract CErc20Storage {\r\n    /**\r\n     * @notice Underlying asset for this CToken\r\n     */\r\n    address public underlying;\r\n}\r\n\r\nabstract contract CErc20Interface is CErc20Storage {\r\n\r\n    /*** User Interface ***/\r\n\r\n    function mint(uint mintAmount) virtual external returns (uint);\r\n    function redeem(uint redeemTokens) virtual external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\r\n    function borrow(uint borrowAmount) virtual external returns (uint);\r\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\r\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\r\n    function sweepToken(EIP20NonStandardInterface token) virtual external;\r\n\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    function _addReserves(uint addAmount) virtual external returns (uint);\r\n}\r\n\r\ncontract CDelegationStorage {\r\n    /**\r\n     * @notice Implementation address for this contract\r\n     */\r\n    address public implementation;\r\n}\r\n\r\nabstract contract CDelegatorInterface is CDelegationStorage {\r\n    /**\r\n     * @notice Emitted when implementation is changed\r\n     */\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /**\r\n     * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual external;\r\n}\r\n\r\nabstract contract CDelegateInterface is CDelegationStorage {\r\n    /**\r\n     * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @dev Should revert if any issues arise which make it unfit for delegation\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n    function _becomeImplementation(bytes memory data) virtual external;\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\r\n     */\r\n    function _resignImplementation() virtual external;\r\n}\r\n"
    },
    "contracts/EIP20Interface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @title ERC 20 Token Standard Interface\r\n *  https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface EIP20Interface {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n      * @notice Get the total number of tokens in circulation\r\n      * @return The supply of tokens\r\n      */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return balance The balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return success Whether or not the transfer succeeded\r\n      */\r\n    function transfer(address dst, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return success Whether or not the transfer succeeded\r\n      */\r\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved (-1 means infinite)\r\n      * @return success Whether or not the approval succeeded\r\n      */\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\r\n      */\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n"
    },
    "contracts/EIP20NonStandardInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @title EIP20NonStandardInterface\r\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n */\r\ninterface EIP20NonStandardInterface {\r\n\r\n    /**\r\n     * @notice Get the total number of tokens in circulation\r\n     * @return The supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return balance The balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n    function transferFrom(address src, address dst, uint256 amount) external;\r\n\r\n    /**\r\n      * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved\r\n      * @return success Whether or not the approval succeeded\r\n      */\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return remaining The number of tokens allowed to be spent\r\n      */\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n"
    },
    "contracts/ErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\ncontract ComptrollerErrorReporter {\r\n    enum Error {\r\n        NO_ERROR,\r\n        UNAUTHORIZED,\r\n        COMPTROLLER_MISMATCH,\r\n        INSUFFICIENT_SHORTFALL,\r\n        INSUFFICIENT_LIQUIDITY,\r\n        INVALID_CLOSE_FACTOR,\r\n        INVALID_COLLATERAL_FACTOR,\r\n        INVALID_LIQUIDATION_INCENTIVE,\r\n        MARKET_NOT_ENTERED, // no longer possible\r\n        MARKET_NOT_LISTED,\r\n        MARKET_ALREADY_LISTED,\r\n        MATH_ERROR,\r\n        NONZERO_BORROW_BALANCE,\r\n        PRICE_ERROR,\r\n        REJECTION,\r\n        SNAPSHOT_ERROR,\r\n        TOO_MANY_ASSETS,\r\n        TOO_MUCH_REPAY\r\n    }\r\n\r\n    enum FailureInfo {\r\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\r\n        EXIT_MARKET_BALANCE_OWED,\r\n        EXIT_MARKET_REJECTION,\r\n        SET_CLOSE_FACTOR_OWNER_CHECK,\r\n        SET_CLOSE_FACTOR_VALIDATION,\r\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\r\n        SET_COLLATERAL_FACTOR_VALIDATION,\r\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\r\n        SET_IMPLEMENTATION_OWNER_CHECK,\r\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\r\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\r\n        SET_MAX_ASSETS_OWNER_CHECK,\r\n        SET_PENDING_ADMIN_OWNER_CHECK,\r\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\r\n        SET_PRICE_ORACLE_OWNER_CHECK,\r\n        SUPPORT_MARKET_EXISTS,\r\n        SUPPORT_MARKET_OWNER_CHECK,\r\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\r\n    }\r\n\r\n    /**\r\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n      **/\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n    /**\r\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n      */\r\n    function fail(Error err, FailureInfo info) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), 0);\r\n\r\n        return uint(err);\r\n    }\r\n\r\n    /**\r\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n      */\r\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), opaqueError);\r\n\r\n        return uint(err);\r\n    }\r\n}\r\n\r\ncontract TokenErrorReporter {\r\n    uint public constant NO_ERROR = 0; // support legacy return codes\r\n\r\n    error TransferComptrollerRejection(uint256 errorCode);\r\n    error TransferNotAllowed();\r\n    error TransferNotEnough();\r\n    error TransferTooMuch();\r\n\r\n    error MintComptrollerRejection(uint256 errorCode);\r\n    error MintFreshnessCheck();\r\n\r\n    error RedeemComptrollerRejection(uint256 errorCode);\r\n    error RedeemFreshnessCheck();\r\n    error RedeemTransferOutNotPossible();\r\n\r\n    error BorrowComptrollerRejection(uint256 errorCode);\r\n    error BorrowFreshnessCheck();\r\n    error BorrowCashNotAvailable();\r\n\r\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\r\n    error RepayBorrowFreshnessCheck();\r\n\r\n    error LiquidateComptrollerRejection(uint256 errorCode);\r\n    error LiquidateFreshnessCheck();\r\n    error LiquidateCollateralFreshnessCheck();\r\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\r\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\r\n    error LiquidateLiquidatorIsBorrower();\r\n    error LiquidateCloseAmountIsZero();\r\n    error LiquidateCloseAmountIsUintMax();\r\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\r\n\r\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\r\n    error LiquidateSeizeLiquidatorIsBorrower();\r\n\r\n    error AcceptAdminPendingAdminCheck();\r\n\r\n    error SetComptrollerOwnerCheck();\r\n    error SetPendingAdminOwnerCheck();\r\n\r\n    error SetReserveFactorAdminCheck();\r\n    error SetReserveFactorFreshCheck();\r\n    error SetReserveFactorBoundsCheck();\r\n\r\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\r\n\r\n    error ReduceReservesAdminCheck();\r\n    error ReduceReservesFreshCheck();\r\n    error ReduceReservesCashNotAvailable();\r\n    error ReduceReservesCashValidation();\r\n\r\n    error SetInterestRateModelOwnerCheck();\r\n    error SetInterestRateModelFreshCheck();\r\n}\r\n"
    },
    "contracts/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author Compound\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract ExponentialNoError {\r\n    uint constant expScale = 1e18;\r\n    uint constant doubleScale = 1e36;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    struct Double {\r\n        uint mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\r\n        Exp memory product = mul_(a, scalar);\r\n        return truncate(product);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\r\n        Exp memory product = mul_(a, scalar);\r\n        return add_(truncate(product), addend);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if first Exp is less than second Exp.\r\n     */\r\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa < right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp <= right Exp.\r\n     */\r\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa <= right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp > right Exp.\r\n     */\r\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa > right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if Exp is exactly zero\r\n     */\r\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\r\n        return value.mantissa == 0;\r\n    }\r\n\r\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\r\n        require(n < 2**224, errorMessage);\r\n        return uint224(n);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(uint a, uint b) pure internal returns (uint) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(uint a, uint b) pure internal returns (uint) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\r\n    }\r\n\r\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / expScale;\r\n    }\r\n\r\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\r\n    }\r\n\r\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / doubleScale;\r\n    }\r\n\r\n    function mul_(uint a, uint b) pure internal returns (uint) {\r\n        return a * b;\r\n    }\r\n\r\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\r\n    }\r\n\r\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, expScale), b.mantissa);\r\n    }\r\n\r\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\r\n    }\r\n\r\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Double memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, doubleScale), b.mantissa);\r\n    }\r\n\r\n    function div_(uint a, uint b) pure internal returns (uint) {\r\n        return a / b;\r\n    }\r\n\r\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\r\n    }\r\n}\r\n"
    },
    "contracts/ExternalRewardDistributor.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport \"./CTokenInterfaces.sol\";\r\nimport \"./EIP20Interface.sol\";\r\nimport \"./ExponentialNoError.sol\";\r\n\r\nstruct RewardMarketState {\r\n    /// @notice The supply speed for each market\r\n    uint256 supplySpeed;\r\n    /// @notice The supply index for each market\r\n    uint224 supplyIndex;\r\n    /// @notice The last block number that Reward accrued for supply\r\n    uint32 supplyBlock;\r\n    /// @notice The borrow speed for each market\r\n    uint256 borrowSpeed;\r\n    /// @notice The borrow index for each market\r\n    uint224 borrowIndex;\r\n    /// @notice The last block number that Reward accrued for borrow\r\n    uint32 borrowBlock;\r\n}\r\n\r\nstruct RewardAccountState {\r\n    /// @notice The supply index for each market as of the last time the account accrued Reward\r\n    mapping(address => uint256) supplierIndex;\r\n    /// @notice The borrow index for each market as of the last time the account accrued Reward\r\n    mapping(address => uint256) borrowerIndex;\r\n    /// @notice Accrued Reward but not yet transferred\r\n    uint256 rewardAccrued;\r\n}\r\n\r\n/**\r\n * @title External Reward Distributor (version 1)\r\n * @author Sonne Finance\r\n * @notice This contract is used to distribute rewards to users for supplying and borrowing assets.\r\n * Each supply and borrow changing action from comptroller will trigger index update for each reward token.\r\n */\r\ncontract ExternalRewardDistributor is\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ExponentialNoError\r\n{\r\n    event RewardAccrued(\r\n        address indexed rewardToken,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    event RewardDistributed(\r\n        address indexed rewardToken,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    event SupplySpeedUpdated(\r\n        address indexed rewardToken,\r\n        address indexed cToken,\r\n        uint256 supplySpeed\r\n    );\r\n\r\n    event BorrowSpeedUpdated(\r\n        address indexed rewardToken,\r\n        address indexed cToken,\r\n        uint256 borrowSpeed\r\n    );\r\n\r\n    event ComptrollerUpdated(address indexed comptroller);\r\n\r\n    event RewardTokenAdded(address indexed rewardToken);\r\n\r\n    /// @notice The initial reward index for a market\r\n    uint224 public constant rewardInitialIndex = 1e36;\r\n\r\n    /// @notice The comptroller that rewards are distributed to\r\n    address public comptroller;\r\n\r\n    /// @notice The Reward state for each reward token for each market\r\n    mapping(address => mapping(address => RewardMarketState))\r\n        public rewardMarketState;\r\n\r\n    /// @notice The Reward state for each reward token for each account\r\n    mapping(address => mapping(address => RewardAccountState))\r\n        public rewardAccountState;\r\n\r\n    /// @notice Added reward tokens\r\n    address[] public rewardTokens;\r\n    /// @notice Flag to check if reward token added before\r\n    mapping(address => bool) public rewardTokenExists;\r\n\r\n    modifier onlyComptroller() {\r\n        require(\r\n            msg.sender == comptroller,\r\n            \"RewardDistributor: only comptroller can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function initialize(address comptroller_) public initializer {\r\n        __Ownable_init();\r\n\r\n        comptroller = comptroller_;\r\n    }\r\n\r\n    function _setComptroller(address comptroller_) public onlyOwner {\r\n        require(\r\n            comptroller_ != address(0),\r\n            \"RewardDistributor: comptroller cannot be zero address\"\r\n        );\r\n\r\n        comptroller = comptroller_;\r\n\r\n        emit ComptrollerUpdated(comptroller_);\r\n    }\r\n\r\n    function _whitelistToken(address rewardToken_) public onlyOwner {\r\n        require(\r\n            rewardToken_ != address(0),\r\n            \"RewardDistributor: reward token cannot be zero address\"\r\n        );\r\n        require(\r\n            !rewardTokenExists[rewardToken_],\r\n            \"RewardDistributor: reward token already exists\"\r\n        );\r\n\r\n        rewardTokens.push(rewardToken_);\r\n        rewardTokenExists[rewardToken_] = true;\r\n\r\n        emit RewardTokenAdded(rewardToken_);\r\n    }\r\n\r\n    function _updateRewardSpeeds(\r\n        address rewardToken_,\r\n        address[] memory cTokens,\r\n        uint256[] memory supplySpeeds,\r\n        uint256[] memory borrowSpeeds\r\n    ) public onlyOwner {\r\n        require(\r\n            rewardTokenExists[rewardToken_],\r\n            \"RewardDistributor: reward token does not exist\"\r\n        );\r\n        require(\r\n            cTokens.length == supplySpeeds.length,\r\n            \"RewardDistributor: supply speed array length mismatch\"\r\n        );\r\n        require(\r\n            cTokens.length == borrowSpeeds.length,\r\n            \"RewardDistributor: borrow speed array length mismatch\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < cTokens.length; i++) {\r\n            updateRewardSpeedInternal(\r\n                rewardToken_,\r\n                cTokens[i],\r\n                supplySpeeds[i],\r\n                borrowSpeeds[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function updateRewardSpeedInternal(\r\n        address rewardToken,\r\n        address cToken,\r\n        uint256 supplySpeed,\r\n        uint256 borrowSpeed\r\n    ) internal {\r\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\r\n            cToken\r\n        ];\r\n\r\n        if (marketState.supplySpeed != supplySpeed) {\r\n            if (marketState.supplyIndex == 0) {\r\n                marketState.supplyIndex = rewardInitialIndex;\r\n            }\r\n\r\n            notifySupplyIndexInternal(rewardToken, cToken);\r\n            marketState.supplySpeed = supplySpeed;\r\n            emit SupplySpeedUpdated(rewardToken, cToken, supplySpeed);\r\n        }\r\n\r\n        if (marketState.borrowSpeed != borrowSpeed) {\r\n            if (marketState.borrowIndex == 0) {\r\n                marketState.borrowIndex = rewardInitialIndex;\r\n            }\r\n\r\n            notifyBorrowIndexInternal(rewardToken, cToken);\r\n            marketState.borrowSpeed = borrowSpeed;\r\n            emit BorrowSpeedUpdated(rewardToken, cToken, borrowSpeed);\r\n        }\r\n    }\r\n\r\n    function notifySupplyIndex(address cToken) external onlyComptroller {\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            notifySupplyIndexInternal(rewardTokens[i], cToken);\r\n        }\r\n    }\r\n\r\n    function notifySupplyIndexInternal(\r\n        address rewardToken,\r\n        address cToken\r\n    ) internal {\r\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\r\n            cToken\r\n        ];\r\n\r\n        uint32 blockNumber = getBlockNumber();\r\n\r\n        if (blockNumber > marketState.supplyBlock) {\r\n            if (marketState.supplySpeed > 0) {\r\n                uint256 deltaBlocks = blockNumber - marketState.supplyBlock;\r\n                uint256 supplyTokens = CTokenInterface(cToken).totalSupply();\r\n                uint256 accrued = mul_(deltaBlocks, marketState.supplySpeed);\r\n                Double memory ratio = supplyTokens > 0\r\n                    ? fraction(accrued, supplyTokens)\r\n                    : Double({mantissa: 0});\r\n                marketState.supplyIndex = safe224(\r\n                    add_(Double({mantissa: marketState.supplyIndex}), ratio)\r\n                        .mantissa,\r\n                    \"new index exceeds 224 bits\"\r\n                );\r\n            }\r\n\r\n            marketState.supplyBlock = blockNumber;\r\n        }\r\n    }\r\n\r\n    function notifyBorrowIndex(address cToken) external onlyComptroller {\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            notifyBorrowIndexInternal(rewardTokens[i], cToken);\r\n        }\r\n    }\r\n\r\n    function notifyBorrowIndexInternal(\r\n        address rewardToken,\r\n        address cToken\r\n    ) internal {\r\n        Exp memory marketBorrowIndex = Exp({\r\n            mantissa: CTokenInterface(cToken).borrowIndex()\r\n        });\r\n\r\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\r\n            cToken\r\n        ];\r\n\r\n        uint32 blockNumber = getBlockNumber();\r\n\r\n        if (blockNumber > marketState.borrowBlock) {\r\n            if (marketState.borrowSpeed > 0) {\r\n                uint256 deltaBlocks = blockNumber - marketState.borrowBlock;\r\n                uint256 borrowAmount = div_(\r\n                    CTokenInterface(cToken).totalBorrows(),\r\n                    marketBorrowIndex\r\n                );\r\n                uint256 accrued = mul_(deltaBlocks, marketState.borrowSpeed);\r\n                Double memory ratio = borrowAmount > 0\r\n                    ? fraction(accrued, borrowAmount)\r\n                    : Double({mantissa: 0});\r\n                marketState.borrowIndex = safe224(\r\n                    add_(Double({mantissa: marketState.borrowIndex}), ratio)\r\n                        .mantissa,\r\n                    \"new index exceeds 224 bits\"\r\n                );\r\n            }\r\n\r\n            marketState.borrowBlock = blockNumber;\r\n        }\r\n    }\r\n\r\n    function notifySupplier(\r\n        address cToken,\r\n        address supplier\r\n    ) external onlyComptroller {\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            notifySupplierInternal(rewardTokens[i], cToken, supplier);\r\n        }\r\n    }\r\n\r\n    function notifySupplierInternal(\r\n        address rewardToken,\r\n        address cToken,\r\n        address supplier\r\n    ) internal {\r\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\r\n            cToken\r\n        ];\r\n        RewardAccountState storage accountState = rewardAccountState[\r\n            rewardToken\r\n        ][supplier];\r\n\r\n        uint256 supplyIndex = marketState.supplyIndex;\r\n        uint256 supplierIndex = accountState.supplierIndex[cToken];\r\n\r\n        // Update supplier's index to the current index since we are distributing accrued Reward\r\n        accountState.supplierIndex[cToken] = supplyIndex;\r\n\r\n        if (supplierIndex == 0 && supplyIndex >= rewardInitialIndex) {\r\n            supplierIndex = rewardInitialIndex;\r\n        }\r\n\r\n        // Calculate change in the cumulative sum of the Reward per cToken accrued\r\n        Double memory deltaIndex = Double({\r\n            mantissa: sub_(supplyIndex, supplierIndex)\r\n        });\r\n\r\n        uint256 supplierTokens = CTokenInterface(cToken).balanceOf(supplier);\r\n\r\n        // Calculate Reward accrued: cTokenAmount * accruedPerCToken\r\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\r\n\r\n        accountState.rewardAccrued = add_(\r\n            accountState.rewardAccrued,\r\n            supplierDelta\r\n        );\r\n    }\r\n\r\n    function notifyBorrower(\r\n        address cToken,\r\n        address borrower\r\n    ) external onlyComptroller {\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            notifyBorrowerInternal(rewardTokens[i], cToken, borrower);\r\n        }\r\n    }\r\n\r\n    function notifyBorrowerInternal(\r\n        address rewardToken,\r\n        address cToken,\r\n        address borrower\r\n    ) internal {\r\n        Exp memory marketBorrowIndex = Exp({\r\n            mantissa: CTokenInterface(cToken).borrowIndex()\r\n        });\r\n\r\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\r\n            cToken\r\n        ];\r\n        RewardAccountState storage accountState = rewardAccountState[\r\n            rewardToken\r\n        ][borrower];\r\n\r\n        uint256 borrowIndex = marketState.borrowIndex;\r\n        uint256 borrowerIndex = accountState.borrowerIndex[cToken];\r\n\r\n        // Update borrowers's index to the current index since we are distributing accrued Reward\r\n        accountState.borrowerIndex[cToken] = borrowIndex;\r\n\r\n        if (borrowerIndex == 0 && borrowIndex >= rewardInitialIndex) {\r\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\r\n            // Rewards the user with Reward accrued from the start of when borrower rewards were first\r\n            // set for the market.\r\n            borrowerIndex = rewardInitialIndex;\r\n        }\r\n\r\n        // Calculate change in the cumulative sum of the Reward per borrowed unit accrued\r\n        Double memory deltaIndex = Double({\r\n            mantissa: sub_(borrowIndex, borrowerIndex)\r\n        });\r\n\r\n        uint256 borrowerAmount = div_(\r\n            CTokenInterface(cToken).borrowBalanceStored(borrower),\r\n            marketBorrowIndex\r\n        );\r\n\r\n        // Calculate Reward accrued: cTokenAmount * accruedPerBorrowedUnit\r\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\r\n\r\n        accountState.rewardAccrued = add_(\r\n            accountState.rewardAccrued,\r\n            borrowerDelta\r\n        );\r\n    }\r\n\r\n    function claim(address[] memory holders) public onlyComptroller {\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            claimInternal(rewardTokens[i], holders);\r\n        }\r\n    }\r\n\r\n    function claimInternal(\r\n        address rewardToken,\r\n        address[] memory holders\r\n    ) internal {\r\n        for (uint256 j = 0; j < holders.length; j++) {\r\n            RewardAccountState storage accountState = rewardAccountState[\r\n                rewardToken\r\n            ][holders[j]];\r\n\r\n            accountState.rewardAccrued = grantRewardInternal(\r\n                rewardToken,\r\n                holders[j],\r\n                accountState.rewardAccrued\r\n            );\r\n        }\r\n    }\r\n\r\n    function getBlockNumber() public view returns (uint32) {\r\n        return safe32(block.timestamp, \"block number exceeds 32 bits\");\r\n    }\r\n\r\n    function _grantReward(\r\n        address token,\r\n        address user,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        require(\r\n            rewardTokenExists[token],\r\n            \"RewardDistributor: grant reward token does not exist\"\r\n        );\r\n        grantRewardInternal(token, user, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer Reward to the user\r\n     * @dev Note: If there is not enough Reward, we do not perform the transfer all.\r\n     * @param user The address of the user to transfer Reward to\r\n     * @param amount The amount of Reward to (possibly) transfer\r\n     * @return The amount of Reward which was NOT transferred to the user\r\n     */\r\n    function grantRewardInternal(\r\n        address token,\r\n        address user,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 remaining = EIP20Interface(token).balanceOf(address(this));\r\n        if (amount > 0 && amount <= remaining) {\r\n            EIP20Interface(token).transfer(user, amount);\r\n            return 0;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /** Getters */\r\n    function getRewardTokens() public view returns (address[] memory) {\r\n        return rewardTokens;\r\n    }\r\n}\r\n"
    },
    "contracts/Governance/Comp.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\ncontract Comp {\r\n    /// @notice EIP-20 token name for this token\r\n    string public constant name = \"Compound\";\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public constant symbol = \"COMP\";\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint256 public constant totalSupply = 10000000e18; // 10 million Comp\r\n\r\n    /// @notice Allowance amounts on behalf of others\r\n    mapping(address => mapping(address => uint96)) internal allowances;\r\n\r\n    /// @notice Official record of token balances for each account\r\n    mapping(address => uint96) internal balances;\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping(address => address) public delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping(address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\r\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n        );\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH =\r\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(\r\n        address indexed delegator,\r\n        address indexed fromDelegate,\r\n        address indexed toDelegate\r\n    );\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(\r\n        address indexed delegate,\r\n        uint256 previousBalance,\r\n        uint256 newBalance\r\n    );\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @notice Construct a new Comp token\r\n     * @param account The initial account to grant all the tokens\r\n     */\r\n    constructor(address account) public {\r\n        balances[account] = uint96(totalSupply);\r\n        emit Transfer(address(0), account, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint256 rawAmount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint96 amount;\r\n        if (rawAmount == type(uint256).max) {\r\n            amount = type(uint96).max;\r\n        } else {\r\n            amount = safe96(rawAmount, \"Comp::approve: amount exceeds 96 bits\");\r\n        }\r\n\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\r\n        uint96 amount = safe96(\r\n            rawAmount,\r\n            \"Comp::transfer: amount exceeds 96 bits\"\r\n        );\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 rawAmount\r\n    ) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint96 spenderAllowance = allowances[src][spender];\r\n        uint96 amount = safe96(\r\n            rawAmount,\r\n            \"Comp::approve: amount exceeds 96 bits\"\r\n        );\r\n\r\n        if (spender != src && spenderAllowance != type(uint96).max) {\r\n            uint96 newAllowance = sub96(\r\n                spenderAllowance,\r\n                amount,\r\n                \"Comp::transferFrom: transfer amount exceeds spender allowance\"\r\n            );\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) public {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n        );\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"Comp::delegateBySig: invalid signature\"\r\n        );\r\n        require(\r\n            nonce == nonces[signatory]++,\r\n            \"Comp::delegateBySig: invalid nonce\"\r\n        );\r\n        require(\r\n            block.timestamp <= expiry,\r\n            \"Comp::delegateBySig: signature expired\"\r\n        );\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint96) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return\r\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint256 blockNumber)\r\n        public\r\n        view\r\n        returns (uint96)\r\n    {\r\n        require(\r\n            blockNumber < block.number,\r\n            \"Comp::getPriorVotes: not yet determined\"\r\n        );\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint96 delegatorBalance = balances[delegator];\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _transferTokens(\r\n        address src,\r\n        address dst,\r\n        uint96 amount\r\n    ) internal {\r\n        require(\r\n            src != address(0),\r\n            \"Comp::_transferTokens: cannot transfer from the zero address\"\r\n        );\r\n        require(\r\n            dst != address(0),\r\n            \"Comp::_transferTokens: cannot transfer to the zero address\"\r\n        );\r\n\r\n        balances[src] = sub96(\r\n            balances[src],\r\n            amount,\r\n            \"Comp::_transferTokens: transfer amount exceeds balance\"\r\n        );\r\n        balances[dst] = add96(\r\n            balances[dst],\r\n            amount,\r\n            \"Comp::_transferTokens: transfer amount overflows\"\r\n        );\r\n        emit Transfer(src, dst, amount);\r\n\r\n        _moveDelegates(delegates[src], delegates[dst], amount);\r\n    }\r\n\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint96 amount\r\n    ) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint96 srcRepOld = srcRepNum > 0\r\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\r\n                    : 0;\r\n                uint96 srcRepNew = sub96(\r\n                    srcRepOld,\r\n                    amount,\r\n                    \"Comp::_moveVotes: vote amount underflows\"\r\n                );\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint96 dstRepOld = dstRepNum > 0\r\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\r\n                    : 0;\r\n                uint96 dstRepNew = add96(\r\n                    dstRepOld,\r\n                    amount,\r\n                    \"Comp::_moveVotes: vote amount overflows\"\r\n                );\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint96 oldVotes,\r\n        uint96 newVotes\r\n    ) internal {\r\n        uint32 blockNumber = safe32(\r\n            block.number,\r\n            \"Comp::_writeCheckpoint: block number exceeds 32 bits\"\r\n        );\r\n\r\n        if (\r\n            nCheckpoints > 0 &&\r\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\r\n        ) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\r\n                blockNumber,\r\n                newVotes\r\n            );\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint256 n, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe96(uint256 n, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint96)\r\n    {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(\r\n        uint96 a,\r\n        uint96 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(\r\n        uint96 a,\r\n        uint96 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal view returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n}\r\n"
    },
    "contracts/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n  * @title Compound's InterestRateModel Interface\r\n  * @author Compound\r\n  */\r\nabstract contract InterestRateModel {\r\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\r\n    bool public constant isInterestRateModel = true;\r\n\r\n    /**\r\n      * @notice Calculates the current borrow interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amount of reserves the market has\r\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\r\n\r\n    /**\r\n      * @notice Calculates the current supply interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amount of reserves the market has\r\n      * @param reserveFactorMantissa The current reserve factor the market has\r\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\r\n}\r\n"
    },
    "contracts/JumpRateModelV4.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./InterestRateModel.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownership/Ownable.sol\";\r\n\r\n/**\r\n * @title Compound's JumpRateModel Contract V3\r\n * @author Compound (modified by Dharma Labs)\r\n * @notice Version 2 modifies Version 1 by enabling updateable parameters.\r\n * @notice Version 3 includes Ownable and have updatable blocksPerYear.\r\n * @notice Version 4 moves blocksPerYear to the constructor.\r\n */\r\ncontract JumpRateModelV4 is InterestRateModel, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event NewInterestParams(\r\n        uint256 baseRatePerBlock,\r\n        uint256 multiplierPerBlock,\r\n        uint256 jumpMultiplierPerBlock,\r\n        uint256 kink\r\n    );\r\n\r\n    /**\r\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\r\n     */\r\n    uint256 public blocksPerYear;\r\n\r\n    /**\r\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\r\n     */\r\n    uint256 public multiplierPerBlock;\r\n\r\n    /**\r\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\r\n     */\r\n    uint256 public baseRatePerBlock;\r\n\r\n    /**\r\n     * @notice The multiplierPerBlock after hitting a specified utilization point\r\n     */\r\n    uint256 public jumpMultiplierPerBlock;\r\n\r\n    /**\r\n     * @notice The utilization point at which the jump multiplier is applied\r\n     */\r\n    uint256 public kink;\r\n\r\n    /**\r\n     * @notice A name for user-friendliness, e.g. WBTC\r\n     */\r\n    string public name;\r\n\r\n    /**\r\n     * @notice Construct an interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     * @param owner_ Sets the owner of the contract to someone other than msgSender\r\n     * @param name_ User-friendly name for the new contract\r\n     */\r\n    constructor(\r\n        uint256 blocksPerYear_,\r\n        uint256 baseRatePerYear,\r\n        uint256 multiplierPerYear,\r\n        uint256 jumpMultiplierPerYear,\r\n        uint256 kink_,\r\n        address owner_,\r\n        string memory name_\r\n    ) public {\r\n        blocksPerYear = blocksPerYear_;\r\n        name = name_;\r\n        _transferOwnership(owner_);\r\n        updateJumpRateModelInternal(\r\n            baseRatePerYear,\r\n            multiplierPerYear,\r\n            jumpMultiplierPerYear,\r\n            kink_\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n    function updateJumpRateModel(\r\n        uint256 baseRatePerYear,\r\n        uint256 multiplierPerYear,\r\n        uint256 jumpMultiplierPerYear,\r\n        uint256 kink_\r\n    ) external onlyOwner {\r\n        updateJumpRateModelInternal(\r\n            baseRatePerYear,\r\n            multiplierPerYear,\r\n            jumpMultiplierPerYear,\r\n            kink_\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market (currently unused)\r\n     * @return The utilization rate as a mantissa between [0, 1e18]\r\n     */\r\n    function utilizationRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves\r\n    ) public pure returns (uint256) {\r\n        // Utilization rate is 0 when there are no borrows\r\n        if (borrows == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the blocksPerYear in order to make interest calculations simpler\r\n     * @param blocksPerYear_ The new estimated eth blocks per year.\r\n     */\r\n    function updateBlocksPerYear(uint256 blocksPerYear_) external onlyOwner {\r\n        blocksPerYear = blocksPerYear_;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getBorrowRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves\r\n    ) public view override returns (uint256) {\r\n        uint256 util = utilizationRate(cash, borrows, reserves);\r\n\r\n        if (util <= kink) {\r\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\r\n        } else {\r\n            uint256 normalRate = kink.mul(multiplierPerBlock).div(1e18).add(\r\n                baseRatePerBlock\r\n            );\r\n            uint256 excessUtil = util.sub(kink);\r\n            return\r\n                excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(\r\n                    normalRate\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current supply rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @param reserveFactorMantissa The current reserve factor for the market\r\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getSupplyRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves,\r\n        uint256 reserveFactorMantissa\r\n    ) public view override returns (uint256) {\r\n        uint256 oneMinusReserveFactor = uint256(1e18).sub(\r\n            reserveFactorMantissa\r\n        );\r\n        uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\r\n        uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\r\n        return\r\n            utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to update the parameters of the interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n    function updateJumpRateModelInternal(\r\n        uint256 baseRatePerYear,\r\n        uint256 multiplierPerYear,\r\n        uint256 jumpMultiplierPerYear,\r\n        uint256 kink_\r\n    ) internal {\r\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\r\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(\r\n            blocksPerYear.mul(kink_)\r\n        );\r\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\r\n        kink = kink_;\r\n\r\n        emit NewInterestParams(\r\n            baseRatePerBlock,\r\n            multiplierPerBlock,\r\n            jumpMultiplierPerBlock,\r\n            kink\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/Lens/BasicLens.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"../EIP20Interface.sol\";\r\nimport \"../PriceOracle.sol\";\r\n\r\ninterface ComptrollerLensInterface {\r\n    function markets(address) external view returns (bool, uint256);\r\n\r\n    function oracle() external view returns (PriceOracle);\r\n\r\n    function getAccountLiquidity(\r\n        address\r\n    ) external view returns (uint256, uint256, uint256);\r\n\r\n    function getAssetsIn(address) external view returns (CToken[] memory);\r\n\r\n    function getCompAddress() external view returns (address);\r\n\r\n    function claimComp(address) external;\r\n\r\n    function compAccrued(address) external view returns (uint256);\r\n\r\n    function compSpeeds(address) external view returns (uint256);\r\n\r\n    function compSupplySpeeds(address) external view returns (uint256);\r\n\r\n    function compBorrowSpeeds(address) external view returns (uint256);\r\n\r\n    function borrowCaps(address) external view returns (uint256);\r\n\r\n    function getExternalRewardDistributorAddress()\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface ExternalRewardDistributorInterface {\r\n    function getRewardTokens() external view returns (address[] memory);\r\n\r\n    function rewardTokenExists(address token) external view returns (bool);\r\n}\r\n\r\ncontract BasicLens {\r\n    function rewardsAccrued(\r\n        ComptrollerLensInterface comptroller,\r\n        address account\r\n    )\r\n        external\r\n        returns (address[] memory rewardTokens, uint256[] memory accrued)\r\n    {\r\n        address externalRewardDistributor = comptroller\r\n            .getExternalRewardDistributorAddress();\r\n\r\n        rewardTokens = ExternalRewardDistributorInterface(\r\n            externalRewardDistributor\r\n        ).getRewardTokens();\r\n\r\n        address defaultRewardToken = comptroller.getCompAddress();\r\n        bool doesDefaultTokenExist = ExternalRewardDistributorInterface(\r\n            externalRewardDistributor\r\n        ).rewardTokenExists(defaultRewardToken);\r\n\r\n        if (!doesDefaultTokenExist) {\r\n            address[] memory tempRewardTokens = new address[](\r\n                rewardTokens.length + 1\r\n            );\r\n            tempRewardTokens[0] = defaultRewardToken;\r\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n                tempRewardTokens[i + 1] = rewardTokens[i];\r\n            }\r\n            rewardTokens = tempRewardTokens;\r\n        }\r\n\r\n        uint256[] memory beforeBalances = getBalancesInternal(\r\n            rewardTokens,\r\n            account\r\n        );\r\n\r\n        comptroller.claimComp(account);\r\n\r\n        uint256[] memory afterBalances = getBalancesInternal(\r\n            rewardTokens,\r\n            account\r\n        );\r\n\r\n        accrued = new uint256[](rewardTokens.length);\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            accrued[i] = afterBalances[i] - beforeBalances[i];\r\n        }\r\n    }\r\n\r\n    function getBalancesInternal(\r\n        address[] memory tokens,\r\n        address account\r\n    ) internal view returns (uint256[] memory balances) {\r\n        balances = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            balances[i] = EIP20Interface(tokens[i]).balanceOf(account);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/Ownership/Ownable.sol": {
      "content": "pragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"
    },
    "contracts/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\n\r\nabstract contract PriceOracle {\r\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\r\n    bool public constant isPriceOracle = true;\r\n\r\n    /**\r\n      * @notice Get the underlying price of a cToken asset\r\n      * @param cToken The cToken to get the underlying price of\r\n      * @return The underlying asset price mantissa (scaled by 1e18).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getUnderlyingPrice(CToken cToken) virtual external view returns (uint);\r\n}\r\n"
    },
    "contracts/PriceOracle/ChainlinkPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\nimport \"../PriceOracle.sol\";\r\n\r\ninterface IAggregatorV3 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ninterface ICToken {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ncontract ChainlinkPriceOracle is PriceOracle {\r\n    mapping(string => IAggregatorV3) public priceFeeds;\r\n    mapping(string => uint256) public baseUnits;\r\n\r\n    constructor(\r\n        string[] memory symbols_,\r\n        IAggregatorV3[] memory feeds_,\r\n        uint256[] memory baseUnits_\r\n    ) {\r\n        for (uint256 i = 0; i < symbols_.length; i++) {\r\n            priceFeeds[symbols_[i]] = feeds_[i];\r\n            baseUnits[symbols_[i]] = baseUnits_[i];\r\n        }\r\n    }\r\n\r\n    // price in 18 decimals\r\n    function getPrice(CToken cToken) public view returns (uint256) {\r\n        string memory symbol = cToken.symbol();\r\n        uint256 feedDecimals = priceFeeds[symbol].decimals();\r\n\r\n        (uint256 price, ) = _getLatestPrice(symbol);\r\n\r\n        return price * 10**(18 - feedDecimals);\r\n    }\r\n\r\n    // price is extended for comptroller usage based on decimals of exchangeRate\r\n    function getUnderlyingPrice(CToken cToken)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        string memory symbol = cToken.symbol();\r\n        uint256 feedDecimals = priceFeeds[symbol].decimals();\r\n\r\n        (uint256 price, ) = _getLatestPrice(symbol);\r\n        return (price * (10**(36 - feedDecimals))) / baseUnits[symbol];\r\n    }\r\n\r\n    function _getLatestPrice(string memory symbol)\r\n        internal\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        require(address(priceFeeds[symbol]) != address(0), \"missing priceFeed\");\r\n\r\n        (\r\n            ,\r\n            //uint80 roundID\r\n            int256 price, //uint256 startedAt\r\n            ,\r\n            uint256 timeStamp, //uint80 answeredInRound\r\n\r\n        ) = priceFeeds[symbol].latestRoundData();\r\n\r\n        require(price > 0, \"price cannot be zero\");\r\n        uint256 uPrice = uint256(price);\r\n\r\n        return (uPrice, timeStamp);\r\n    }\r\n}\r\n"
    },
    "contracts/PriceOracle/PriceOracleV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\nimport \"../PriceOracle.sol\";\r\n\r\ninterface IAggregatorV3 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ninterface ICToken {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\nstruct PriceConfig {\r\n    address feed;\r\n    string toSymbol;\r\n    uint256 underlyingDecimals;\r\n}\r\n\r\ncontract PriceOracleV2 is PriceOracle {\r\n    mapping(string => PriceConfig) public configs;\r\n\r\n    constructor(string[] memory symbols_, PriceConfig[] memory configs_) {\r\n        for (uint256 i = 0; i < symbols_.length; i++) {\r\n            configs[symbols_[i]] = configs_[i];\r\n        }\r\n    }\r\n\r\n    // price in usd with 18 decimals\r\n    function getPrice(CToken cToken) public view returns (uint256) {\r\n        string memory symbol = cToken.symbol();\r\n        return _getPriceUSD(symbol);\r\n    }\r\n\r\n    function _getPriceUSD(\r\n        string memory symbol\r\n    ) internal view returns (uint256) {\r\n        PriceConfig memory config = configs[symbol];\r\n        if (config.feed == address(0)) revert(\"missing priceFeed\");\r\n\r\n        uint256 feedDecimals = IAggregatorV3(config.feed).decimals();\r\n\r\n        (uint256 feedPrice, ) = _getLatestPrice(config);\r\n        uint256 price = feedPrice * 10 ** (18 - feedDecimals);\r\n\r\n        if (\r\n            keccak256(abi.encodePacked(config.toSymbol)) !=\r\n            keccak256(abi.encodePacked(\"USD\"))\r\n        ) {\r\n            price = price * _getPriceUSD(config.toSymbol);\r\n        }\r\n\r\n        return price;\r\n    }\r\n\r\n    // price is extended for comptroller usage based on decimals of exchangeRate\r\n    function getUnderlyingPrice(\r\n        CToken cToken\r\n    ) external view override returns (uint256) {\r\n        string memory symbol = cToken.symbol();\r\n        PriceConfig memory config = configs[symbol];\r\n        if (config.feed == address(0)) revert(\"missing priceFeed\");\r\n\r\n        uint256 feedDecimals = IAggregatorV3(config.feed).decimals();\r\n\r\n        (uint256 price, ) = _getLatestPrice(config);\r\n        return (price *\r\n            (10 ** (36 - feedDecimals - config.underlyingDecimals)));\r\n    }\r\n\r\n    function _getLatestPrice(\r\n        PriceConfig memory config\r\n    ) internal view returns (uint256, uint256) {\r\n        (\r\n            ,\r\n            //uint80 roundID\r\n            int256 price, //uint256 startedAt\r\n            ,\r\n            uint256 timeStamp, //uint80 answeredInRound\r\n\r\n        ) = IAggregatorV3(config.feed).latestRoundData();\r\n\r\n        require(price > 0, \"price cannot be zero\");\r\n        uint256 uPrice = uint256(price);\r\n\r\n        return (uPrice, timeStamp);\r\n    }\r\n}\r\n"
    },
    "contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c;\r\n        unchecked { c = a + b; }\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c;\r\n        unchecked { c = a + b; }\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c;\r\n        unchecked { c = a * b; }\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c;\r\n        unchecked { c = a * b; }\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "contracts/SonneTimelockController.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/governance/TimelockController.sol\";\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external;\r\n}\r\n\r\ninterface IMarket {\r\n    function symbol() external view returns (string memory);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function _reduceReserves(uint256 amount) external returns (uint256);\r\n}\r\n\r\ncontract SonneTimelockController is TimelockController {\r\n    bytes32 public constant SONNE_ADMIN_ROLE = keccak256(\"SONNE_ADMIN_ROLE\");\r\n    bytes32 public constant RESERVES_ROLE = keccak256(\"RESERVES_ROLE\");\r\n\r\n    constructor(\r\n        uint256 minDelay,\r\n        address[] memory proposers,\r\n        address[] memory executors,\r\n        address admin\r\n    ) TimelockController(minDelay, proposers, executors, admin) {\r\n        _setRoleAdmin(SONNE_ADMIN_ROLE, SONNE_ADMIN_ROLE);\r\n        _setRoleAdmin(RESERVES_ROLE, SONNE_ADMIN_ROLE);\r\n\r\n        _setupRole(SONNE_ADMIN_ROLE, _msgSender());\r\n        _setupRole(RESERVES_ROLE, _msgSender());\r\n    }\r\n\r\n    function _reduceReserves(\r\n        address cToken,\r\n        uint256 amount,\r\n        address to\r\n    ) public onlyRole(RESERVES_ROLE) {\r\n        require(to != address(0), \"SonneTimelock: To cannot be zero\");\r\n\r\n        address underlying = IMarket(cToken).underlying();\r\n        IERC20 token = IERC20(underlying);\r\n\r\n        uint256 beforeBalance = token.balanceOf(address(this));\r\n        IMarket(cToken)._reduceReserves(amount);\r\n        uint256 afterBalance = token.balanceOf(address(this));\r\n\r\n        token.transfer(to, afterBalance - beforeBalance);\r\n    }\r\n}\r\n"
    },
    "contracts/Unitroller.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./ComptrollerStorage.sol\";\r\n/**\r\n * @title ComptrollerCore\r\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\r\n * CTokens should reference this contract as their comptroller.\r\n */\r\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\r\n\r\n    /**\r\n      * @notice Emitted when pendingComptrollerImplementation is changed\r\n      */\r\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\r\n      */\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingAdmin is changed\r\n      */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n      */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    constructor() public {\r\n        // Set admin to caller\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\r\n\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\r\n        }\r\n\r\n        address oldPendingImplementation = pendingComptrollerImplementation;\r\n\r\n        pendingComptrollerImplementation = newPendingImplementation;\r\n\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\r\n    * @dev Admin function for new implementation to accept it's role as implementation\r\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n    */\r\n    function _acceptImplementation() public returns (uint) {\r\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\r\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\r\n        }\r\n\r\n        // Save current values for inclusion in log\r\n        address oldImplementation = comptrollerImplementation;\r\n        address oldPendingImplementation = pendingComptrollerImplementation;\r\n\r\n        comptrollerImplementation = pendingComptrollerImplementation;\r\n\r\n        pendingComptrollerImplementation = address(0);\r\n\r\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n\r\n    /**\r\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\r\n        // Check caller = admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\r\n        }\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _acceptAdmin() public returns (uint) {\r\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\r\n        }\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * It returns to the external caller whatever the implementation returns\r\n     * or forwards reverts.\r\n     */\r\n    fallback() payable external {\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\r\n\r\n        assembly {\r\n              let free_mem_ptr := mload(0x40)\r\n              returndatacopy(free_mem_ptr, 0, returndatasize())\r\n\r\n              switch success\r\n              case 0 { revert(free_mem_ptr, returndatasize()) }\r\n              default { return(free_mem_ptr, returndatasize()) }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}