{
  "address": "0x9ad415eD6E8803ce925A28d57a787b43fC0c3Bc0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "symbols_",
          "type": "string[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "feed",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "toSymbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            }
          ],
          "internalType": "struct PriceConfig[]",
          "name": "configs_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "configs",
      "outputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "toSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "underlyingDecimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPriceOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x436518a5b8be59600a84270d255f582ca52e508ee2ec585a313a5028bc7d5928",
  "receipt": {
    "to": null,
    "from": "0xFb59Ce8986943163F14C590755b29dB2998F2322",
    "contractAddress": "0x9ad415eD6E8803ce925A28d57a787b43fC0c3Bc0",
    "transactionIndex": 7,
    "gasUsed": "1150242",
    "logsBloom": "0x
    "blockHash": "0xb6da9b8327f91f6f985cd7e0db7bf668bf78ebaa15e96f813765b4ecc8ec84cc",
    "transactionHash": "0x436518a5b8be59600a84270d255f582ca52e508ee2ec585a313a5028bc7d5928",
    "logs": [],
    "blockNumber": 10007825,
    "cumulativeGasUsed": "1912382",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "sobWETH",
      "sobUSDC",
      "sobUSDbC",
      "sobDAI",
      "sobcbETH",
      "sobwstETH"
    ],
    [
      {
        "feed": "0x71041dddad3595F9CEd3DcCFBe3D1F4b0a16Bb70",
        "toSymbol": "USD",
        "underlyingDecimals": 18
      },
      {
        "feed": "0x7e860098F58bBFC8648a4311b374B1D669a2bc6B",
        "toSymbol": "USD",
        "underlyingDecimals": 6
      },
      {
        "feed": "0x7e860098F58bBFC8648a4311b374B1D669a2bc6B",
        "toSymbol": "USD",
        "underlyingDecimals": 6
      },
      {
        "feed": "0x591e79239a7d679378eC8c847e5038150364C78F",
        "toSymbol": "USD",
        "underlyingDecimals": 18
      },
      {
        "feed": "0xd7818272B9e248357d13057AAb0B417aF31E817d",
        "toSymbol": "USD",
        "underlyingDecimals": 18
      },
      {
        "feed": "0xa669E5272E60f78299F4824495cE01a3923f4380",
        "toSymbol": "sobWETH",
        "underlyingDecimals": 18
      }
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "f78d7dac029f433afd40953d40473b36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PriceConfig[]\",\"name\":\"configs_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"configs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUnderlyingPrice(address)\":{\"params\":{\"cToken\":\"The cToken to get the underlying price of\"},\"returns\":{\"_0\":\"The underlying asset price mantissa (scaled by 1e18).  Zero means the price is unavailable.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken asset\"},\"isPriceOracle()\":{\"notice\":\"Indicator that this is a PriceOracle contract (for inspection)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle/PriceOracleV2.sol\":\"PriceOracleV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./CTokenInterfaces.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./EIP20Interface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound's CToken Contract\\r\\n * @notice Abstract base for CTokens\\r\\n * @author Compound\\r\\n */\\r\\nabstract contract CToken is\\r\\n    CTokenInterface,\\r\\n    ExponentialNoError,\\r\\n    TokenErrorReporter\\r\\n{\\r\\n    /**\\r\\n     * @notice Initialize the money market\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ EIP-20 name of this token\\r\\n     * @param symbol_ EIP-20 symbol of this token\\r\\n     * @param decimals_ EIP-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(\\r\\n        ComptrollerInterface comptroller_,\\r\\n        InterestRateModel interestRateModel_,\\r\\n        uint256 initialExchangeRateMantissa_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n    ) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\r\\n        require(\\r\\n            accrualBlockNumber == 0 && borrowIndex == 0,\\r\\n            \\\"market may only be initialized once\\\"\\r\\n        );\\r\\n\\r\\n        // Set initial exchange rate\\r\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\r\\n        require(\\r\\n            initialExchangeRateMantissa > 0,\\r\\n            \\\"initial exchange rate must be greater than zero.\\\"\\r\\n        );\\r\\n\\r\\n        // Set the comptroller\\r\\n        uint256 err = _setComptroller(comptroller_);\\r\\n        require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\r\\n\\r\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\r\\n        accrualBlockNumber = getBlockNumber();\\r\\n        borrowIndex = mantissaOne;\\r\\n\\r\\n        // Set the interest rate model (depends on block number / borrow index)\\r\\n        err = _setInterestRateModelFresh(interestRateModel_);\\r\\n        require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\r\\n\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        decimals = decimals_;\\r\\n\\r\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\r\\n     * @dev Called by both `transfer` and `transferFrom` internally\\r\\n     * @param spender The address of the account performing the transfer\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param tokens The number of tokens to transfer\\r\\n     * @return 0 if the transfer succeeded, else revert\\r\\n     */\\r\\n    function transferTokens(\\r\\n        address spender,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 tokens\\r\\n    ) internal returns (uint256) {\\r\\n        /* Fail if transfer not allowed */\\r\\n        uint256 allowed = comptroller.transferAllowed(\\r\\n            address(this),\\r\\n            src,\\r\\n            dst,\\r\\n            tokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert TransferComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Do not allow self-transfers */\\r\\n        if (src == dst) {\\r\\n            revert TransferNotAllowed();\\r\\n        }\\r\\n\\r\\n        /* Get the allowance, infinite for the account owner */\\r\\n        uint256 startingAllowance = 0;\\r\\n        if (spender == src) {\\r\\n            startingAllowance = type(uint256).max;\\r\\n        } else {\\r\\n            startingAllowance = transferAllowances[src][spender];\\r\\n        }\\r\\n\\r\\n        /* Do the calculations, checking for {under,over}flow */\\r\\n        uint256 allowanceNew = startingAllowance - tokens;\\r\\n        uint256 srcTokensNew = accountTokens[src] - tokens;\\r\\n        uint256 dstTokensNew = accountTokens[dst] + tokens;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        accountTokens[src] = srcTokensNew;\\r\\n        accountTokens[dst] = dstTokensNew;\\r\\n\\r\\n        /* Eat some of the allowance (if necessary) */\\r\\n        if (startingAllowance != type(uint256).max) {\\r\\n            transferAllowances[src][spender] = allowanceNew;\\r\\n        }\\r\\n\\r\\n        /* We emit a Transfer event */\\r\\n        emit Transfer(src, dst, tokens);\\r\\n\\r\\n        // unused function\\r\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (bool)\\r\\n    {\\r\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) external override nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address src = msg.sender;\\r\\n        transferAllowances[src][spender] = amount;\\r\\n        emit Approval(src, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return transferAllowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the token balance of the `owner`\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The number of tokens owned by `owner`\\r\\n     */\\r\\n    function balanceOf(address owner) external view override returns (uint256) {\\r\\n        return accountTokens[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying balance of the `owner`\\r\\n     * @dev This also accrues interest in a transaction\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The amount of underlying owned by `owner`\\r\\n     */\\r\\n    function balanceOfUnderlying(address owner)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\r\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\r\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\r\\n     * @param account Address of the account to snapshot\\r\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\r\\n     */\\r\\n    function getAccountSnapshot(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            NO_ERROR,\\r\\n            accountTokens[account],\\r\\n            borrowBalanceStoredInternal(account),\\r\\n            exchangeRateStoredInternal()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to simply retrieve block number\\r\\n     *  This exists mainly for inheriting test contracts to stub this result.\\r\\n     */\\r\\n    function getBlockNumber() internal view virtual returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\r\\n     * @return The borrow interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function borrowRatePerBlock() external view override returns (uint256) {\\r\\n        return\\r\\n            interestRateModel.getBorrowRate(\\r\\n                getCashPrior(),\\r\\n                totalBorrows,\\r\\n                totalReserves\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block supply interest rate for this cToken\\r\\n     * @return The supply interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function supplyRatePerBlock() external view override returns (uint256) {\\r\\n        return\\r\\n            interestRateModel.getSupplyRate(\\r\\n                getCashPrior(),\\r\\n                totalBorrows,\\r\\n                totalReserves,\\r\\n                reserveFactorMantissa\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current total borrows plus accrued interest\\r\\n     * @return The total borrows with interest\\r\\n     */\\r\\n    function totalBorrowsCurrent()\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return totalBorrows;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\r\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceCurrent(address account)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return borrowBalanceStored(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceStored(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return borrowBalanceStoredInternal(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\r\\n     */\\r\\n    function borrowBalanceStoredInternal(address account)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        /* Get borrowBalance and borrowIndex */\\r\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\r\\n\\r\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\r\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\r\\n         */\\r\\n        if (borrowSnapshot.principal == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        /* Calculate new borrow balance using the interest index:\\r\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\r\\n         */\\r\\n        uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\r\\n        return principalTimesIndex / borrowSnapshot.interestIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest then return the up-to-date exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateCurrent()\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStored() public view override returns (uint256) {\\r\\n        return exchangeRateStoredInternal();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStoredInternal()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _totalSupply = totalSupply;\\r\\n        if (_totalSupply == 0) {\\r\\n            /*\\r\\n             * If there are no tokens minted:\\r\\n             *  exchangeRate = initialExchangeRate\\r\\n             */\\r\\n            return initialExchangeRateMantissa;\\r\\n        } else {\\r\\n            /*\\r\\n             * Otherwise:\\r\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\r\\n             */\\r\\n            uint256 totalCash = getCashPrior();\\r\\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\\r\\n                totalBorrows -\\r\\n                totalReserves;\\r\\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\\r\\n                _totalSupply;\\r\\n\\r\\n            return exchangeRate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get cash balance of this cToken in the underlying asset\\r\\n     * @return The quantity of underlying asset owned by this contract\\r\\n     */\\r\\n    function getCash() external view override returns (uint256) {\\r\\n        return getCashPrior();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Applies accrued interest to total borrows and reserves\\r\\n     * @dev This calculates interest accrued from the last checkpointed block\\r\\n     *   up to the current block and writes new checkpoint to storage.\\r\\n     */\\r\\n    function accrueInterest() public virtual override returns (uint256) {\\r\\n        /* Remember the initial block number */\\r\\n        uint256 currentBlockNumber = getBlockNumber();\\r\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\r\\n\\r\\n        /* Short-circuit accumulating 0 interest */\\r\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\r\\n            return NO_ERROR;\\r\\n        }\\r\\n\\r\\n        /* Read the previous values out of storage */\\r\\n        uint256 cashPrior = getCashPrior();\\r\\n        uint256 borrowsPrior = totalBorrows;\\r\\n        uint256 reservesPrior = totalReserves;\\r\\n        uint256 borrowIndexPrior = borrowIndex;\\r\\n\\r\\n        /* Calculate the current borrow interest rate */\\r\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\r\\n            cashPrior,\\r\\n            borrowsPrior,\\r\\n            reservesPrior\\r\\n        );\\r\\n        require(\\r\\n            borrowRateMantissa <= borrowRateMaxMantissa,\\r\\n            \\\"borrow rate is absurdly high\\\"\\r\\n        );\\r\\n\\r\\n        /* Calculate the number of blocks elapsed since the last accrual */\\r\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\r\\n\\r\\n        /*\\r\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\r\\n         *  simpleInterestFactor = borrowRate * blockDelta\\r\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\r\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\r\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\r\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\r\\n         */\\r\\n\\r\\n        Exp memory simpleInterestFactor = mul_(\\r\\n            Exp({mantissa: borrowRateMantissa}),\\r\\n            blockDelta\\r\\n        );\\r\\n        uint256 interestAccumulated = mul_ScalarTruncate(\\r\\n            simpleInterestFactor,\\r\\n            borrowsPrior\\r\\n        );\\r\\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\r\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\r\\n            Exp({mantissa: reserveFactorMantissa}),\\r\\n            interestAccumulated,\\r\\n            reservesPrior\\r\\n        );\\r\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\\r\\n            simpleInterestFactor,\\r\\n            borrowIndexPrior,\\r\\n            borrowIndexPrior\\r\\n        );\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accrualBlockNumber = currentBlockNumber;\\r\\n        borrowIndex = borrowIndexNew;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* We emit an AccrueInterest event */\\r\\n        emit AccrueInterest(\\r\\n            cashPrior,\\r\\n            interestAccumulated,\\r\\n            borrowIndexNew,\\r\\n            totalBorrowsNew\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     */\\r\\n    function mintInternal(uint256 mintAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\r\\n        mintFresh(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param minter The address of the account which is supplying the assets\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     */\\r\\n    function mintFresh(address minter, uint256 mintAmount) internal {\\r\\n        /* Fail if mint not allowed */\\r\\n        uint256 allowed = comptroller.mintAllowed(\\r\\n            address(this),\\r\\n            minter,\\r\\n            mintAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert MintComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert MintFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        uint256 actualMintAmount = doTransferIn(minter, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        uint256 mintTokens = div_(actualMintAmount, exchangeRate);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\r\\n         * And write them into storage\\r\\n         */\\r\\n        totalSupply = totalSupply + mintTokens;\\r\\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\\r\\n\\r\\n        /* We emit a Mint event, and a Transfer event */\\r\\n        emit Mint(minter, actualMintAmount, mintTokens);\\r\\n        emit Transfer(address(this), minter, mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\r\\n     */\\r\\n    function redeemInternal(uint256 redeemTokens) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\r\\n     */\\r\\n    function redeemUnderlyingInternal(uint256 redeemAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param redeemer The address of the account which is redeeming the tokens\\r\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     */\\r\\n    function redeemFresh(\\r\\n        address payable redeemer,\\r\\n        uint256 redeemTokensIn,\\r\\n        uint256 redeemAmountIn\\r\\n    ) internal {\\r\\n        require(\\r\\n            redeemTokensIn == 0 || redeemAmountIn == 0,\\r\\n            \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\r\\n        );\\r\\n\\r\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n\\r\\n        uint256 redeemTokens;\\r\\n        uint256 redeemAmount;\\r\\n        /* If redeemTokensIn > 0: */\\r\\n        if (redeemTokensIn > 0) {\\r\\n            /*\\r\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\r\\n             *  redeemTokens = redeemTokensIn\\r\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\r\\n             */\\r\\n            redeemTokens = redeemTokensIn;\\r\\n            redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\r\\n        } else {\\r\\n            /*\\r\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\r\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\r\\n             *  redeemAmount = redeemAmountIn\\r\\n             */\\r\\n            redeemTokens = div_(redeemAmountIn, exchangeRate);\\r\\n            redeemAmount = redeemAmountIn;\\r\\n        }\\r\\n\\r\\n        /* Fail if redeem not allowed */\\r\\n        uint256 allowed = comptroller.redeemAllowed(\\r\\n            address(this),\\r\\n            redeemer,\\r\\n            redeemTokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert RedeemComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert RedeemFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient cash */\\r\\n        if (getCashPrior() < redeemAmount) {\\r\\n            revert RedeemTransferOutNotPossible();\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We write the previously calculated values into storage.\\r\\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\r\\n         */\\r\\n        totalSupply = totalSupply - redeemTokens;\\r\\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken has redeemAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(redeemer, redeemAmount);\\r\\n\\r\\n        /* We emit a Transfer event, and a Redeem event */\\r\\n        emit Transfer(redeemer, address(this), redeemTokens);\\r\\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.redeemVerify(\\r\\n            address(this),\\r\\n            redeemer,\\r\\n            redeemAmount,\\r\\n            redeemTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender borrows assets from the protocol to their own address\\r\\n     * @param borrowAmount The amount of the underlying asset to borrow\\r\\n     */\\r\\n    function borrowInternal(uint256 borrowAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        borrowFresh(payable(msg.sender), borrowAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Users borrow assets from the protocol to their own address\\r\\n     * @param borrowAmount The amount of the underlying asset to borrow\\r\\n     */\\r\\n    function borrowFresh(address payable borrower, uint256 borrowAmount)\\r\\n        internal\\r\\n    {\\r\\n        /* Fail if borrow not allowed */\\r\\n        uint256 allowed = comptroller.borrowAllowed(\\r\\n            address(this),\\r\\n            borrower,\\r\\n            borrowAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert BorrowComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert BorrowFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\r\\n        if (getCashPrior() < borrowAmount) {\\r\\n            revert BorrowCashNotAvailable();\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\r\\n         *  accountBorrowNew = accountBorrow + borrowAmount\\r\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\r\\n         */\\r\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\r\\n        uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\r\\n        uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We write the previously calculated values into storage.\\r\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\r\\n        `*/\\r\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken borrowAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(borrower, borrowAmount);\\r\\n\\r\\n        /* We emit a Borrow event */\\r\\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\r\\n     */\\r\\n    function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\r\\n     */\\r\\n    function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\r\\n     * @param payer the account paying off the borrow\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\r\\n     * @return (uint) the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowFresh(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint256 repayAmount\\r\\n    ) internal returns (uint256) {\\r\\n        /* Fail if repayBorrow not allowed */\\r\\n        uint256 allowed = comptroller.repayBorrowAllowed(\\r\\n            address(this),\\r\\n            payer,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert RepayBorrowComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert RepayBorrowFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\r\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\r\\n\\r\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\r\\n        uint256 repayAmountFinal = repayAmount == type(uint256).max\\r\\n            ? accountBorrowsPrev\\r\\n            : repayAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the payer and the repayAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional repayAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *   it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n        uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\r\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\r\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\r\\n         */\\r\\n        uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\r\\n        uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n\\r\\n        /* We emit a RepayBorrow event */\\r\\n        emit RepayBorrow(\\r\\n            payer,\\r\\n            borrower,\\r\\n            actualRepayAmount,\\r\\n            accountBorrowsNew,\\r\\n            totalBorrowsNew\\r\\n        );\\r\\n\\r\\n        return actualRepayAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     */\\r\\n    function liquidateBorrowInternal(\\r\\n        address borrower,\\r\\n        uint256 repayAmount,\\r\\n        CTokenInterface cTokenCollateral\\r\\n    ) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n\\r\\n        uint256 error = cTokenCollateral.accrueInterest();\\r\\n        if (error != NO_ERROR) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            revert LiquidateAccrueCollateralInterestFailed(error);\\r\\n        }\\r\\n\\r\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        liquidateBorrowFresh(\\r\\n            msg.sender,\\r\\n            borrower,\\r\\n            repayAmount,\\r\\n            cTokenCollateral\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The liquidator liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param liquidator The address repaying the borrow and seizing collateral\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     */\\r\\n    function liquidateBorrowFresh(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 repayAmount,\\r\\n        CTokenInterface cTokenCollateral\\r\\n    ) internal {\\r\\n        /* Fail if liquidate not allowed */\\r\\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\\r\\n            address(this),\\r\\n            address(cTokenCollateral),\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert LiquidateComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert LiquidateFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Verify cTokenCollateral market's block number equals current block number */\\r\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\r\\n            revert LiquidateCollateralFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            revert LiquidateLiquidatorIsBorrower();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = 0 */\\r\\n        if (repayAmount == 0) {\\r\\n            revert LiquidateCloseAmountIsZero();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = -1 */\\r\\n        if (repayAmount == type(uint256).max) {\\r\\n            revert LiquidateCloseAmountIsUintMax();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayBorrow fails */\\r\\n        uint256 actualRepayAmount = repayBorrowFresh(\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We calculate the number of collateral tokens that will be seized */\\r\\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\\r\\n            .liquidateCalculateSeizeTokens(\\r\\n                address(this),\\r\\n                address(cTokenCollateral),\\r\\n                actualRepayAmount\\r\\n            );\\r\\n        require(\\r\\n            amountSeizeError == NO_ERROR,\\r\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\"\\r\\n        );\\r\\n\\r\\n        /* Revert if borrower collateral token balance < seizeTokens */\\r\\n        require(\\r\\n            cTokenCollateral.balanceOf(borrower) >= seizeTokens,\\r\\n            \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\"\\r\\n        );\\r\\n\\r\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\r\\n        if (address(cTokenCollateral) == address(this)) {\\r\\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\\r\\n        } else {\\r\\n            require(\\r\\n                cTokenCollateral.seize(liquidator, borrower, seizeTokens) ==\\r\\n                    NO_ERROR,\\r\\n                \\\"token seizure failed\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        /* We emit a LiquidateBorrow event */\\r\\n        emit LiquidateBorrow(\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            actualRepayAmount,\\r\\n            address(cTokenCollateral),\\r\\n            seizeTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\r\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seize(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 seizeTokens\\r\\n    ) external override nonReentrant returns (uint256) {\\r\\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\r\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\r\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     */\\r\\n    function seizeInternal(\\r\\n        address seizerToken,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 seizeTokens\\r\\n    ) internal {\\r\\n        /* Fail if seize not allowed */\\r\\n        uint256 allowed = comptroller.seizeAllowed(\\r\\n            address(this),\\r\\n            seizerToken,\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            seizeTokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert LiquidateSeizeComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            revert LiquidateSeizeLiquidatorIsBorrower();\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\r\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\r\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\r\\n         */\\r\\n        uint256 protocolSeizeTokens = mul_(\\r\\n            seizeTokens,\\r\\n            Exp({mantissa: protocolSeizeShareMantissa})\\r\\n        );\\r\\n        uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n        uint256 protocolSeizeAmount = mul_ScalarTruncate(\\r\\n            exchangeRate,\\r\\n            protocolSeizeTokens\\r\\n        );\\r\\n        uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the calculated values into storage */\\r\\n        totalReserves = totalReservesNew;\\r\\n        totalSupply = totalSupply - protocolSeizeTokens;\\r\\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\r\\n        accountTokens[liquidator] =\\r\\n            accountTokens[liquidator] +\\r\\n            liquidatorSeizeTokens;\\r\\n\\r\\n        /* Emit a Transfer event */\\r\\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\r\\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\\r\\n        emit ReservesAdded(\\r\\n            address(this),\\r\\n            protocolSeizeAmount,\\r\\n            totalReservesNew\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n     * @param newPendingAdmin New pending admin.\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setPendingAdmin(address payable newPendingAdmin)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetPendingAdminOwnerCheck();\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n     * @dev Admin function for pending admin to accept role and update admin\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _acceptAdmin() external override returns (uint256) {\\r\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\r\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\r\\n            revert AcceptAdminPendingAdminCheck();\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = payable(address(0));\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new comptroller for the market\\r\\n     * @dev Admin function to set a new comptroller\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setComptroller(ComptrollerInterface newComptroller)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetComptrollerOwnerCheck();\\r\\n        }\\r\\n\\r\\n        ComptrollerInterface oldComptroller = comptroller;\\r\\n        // Ensure invoke comptroller.isComptroller() returns true\\r\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set market's comptroller to newComptroller\\r\\n        comptroller = newComptroller;\\r\\n\\r\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\r\\n        emit NewComptroller(oldComptroller, newComptroller);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\r\\n     * @dev Admin function to accrue interest and set a new reserve factor\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\r\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\r\\n     * @dev Admin function to set a new reserve factor\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetReserveFactorAdminCheck();\\r\\n        }\\r\\n\\r\\n        // Verify market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert SetReserveFactorFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\r\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\r\\n            revert SetReserveFactorBoundsCheck();\\r\\n        }\\r\\n\\r\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\r\\n        reserveFactorMantissa = newReserveFactorMantissa;\\r\\n\\r\\n        emit NewReserveFactor(\\r\\n            oldReserveFactorMantissa,\\r\\n            newReserveFactorMantissa\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReservesInternal(uint256 addAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n\\r\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\r\\n        _addReservesFresh(addAmount);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add reserves by transferring from caller\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\r\\n     */\\r\\n    function _addReservesFresh(uint256 addAmount)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        // totalReserves + actualAddAmount\\r\\n        uint256 totalReservesNew;\\r\\n        uint256 actualAddAmount;\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert AddReservesFactorFreshCheck(actualAddAmount);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the caller and the addAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional addAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *  it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n\\r\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\r\\n\\r\\n        totalReservesNew = totalReserves + actualAddAmount;\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\r\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\r\\n\\r\\n        /* Return (NO_ERROR, actualAddAmount) */\\r\\n        return (NO_ERROR, actualAddAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReserves(uint256 reduceAmount)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\r\\n        return _reduceReservesFresh(reduceAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces reserves by transferring to admin\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReservesFresh(uint256 reduceAmount)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // totalReserves - reduceAmount\\r\\n        uint256 totalReservesNew;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert ReduceReservesAdminCheck();\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert ReduceReservesFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() < reduceAmount) {\\r\\n            revert ReduceReservesCashNotAvailable();\\r\\n        }\\r\\n\\r\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\r\\n        if (reduceAmount > totalReserves) {\\r\\n            revert ReduceReservesCashValidation();\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        totalReservesNew = totalReserves - reduceAmount;\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n        doTransferOut(admin, reduceAmount);\\r\\n\\r\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\r\\n     * @dev Admin function to accrue interest and update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\r\\n        return _setInterestRateModelFresh(newInterestRateModel);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\r\\n     * @dev Admin function to update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Used to store old model for use in the event that is emitted on success\\r\\n        InterestRateModel oldInterestRateModel;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetInterestRateModelOwnerCheck();\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert SetInterestRateModelFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Track the market's current interest rate model\\r\\n        oldInterestRateModel = interestRateModel;\\r\\n\\r\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\r\\n        require(\\r\\n            newInterestRateModel.isInterestRateModel(),\\r\\n            \\\"marker method returned false\\\"\\r\\n        );\\r\\n\\r\\n        // Set the interest rate model to newInterestRateModel\\r\\n        interestRateModel = newInterestRateModel;\\r\\n\\r\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\r\\n        emit NewMarketInterestRateModel(\\r\\n            oldInterestRateModel,\\r\\n            newInterestRateModel\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying owned by this contract\\r\\n     */\\r\\n    function getCashPrior() internal view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\r\\n     *  This may revert due to insufficient balance or insufficient allowance.\\r\\n     */\\r\\n    function doTransferIn(address from, uint256 amount)\\r\\n        internal\\r\\n        virtual\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\r\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\r\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\\r\\n\\r\\n    /*** Reentrancy Guard ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x17f98706dda2550609f3ad1a0f587b42dafd4ef6e2fc294b29d86eb84baf6444\",\"license\":\"BSD-3-Clause\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\n\\r\\ncontract CTokenStorage {\\r\\n    /**\\r\\n     * @dev Guard variable for re-entrancy checks\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token name for this token\\r\\n     */\\r\\n    string public name;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token symbol for this token\\r\\n     */\\r\\n    string public symbol;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token decimals for this token\\r\\n     */\\r\\n    uint8 public decimals;\\r\\n\\r\\n    // Maximum borrow rate that can ever be applied (.00004% / block)\\r\\n    uint internal constant borrowRateMaxMantissa = 0.00004e16;\\r\\n\\r\\n    // Maximum fraction of interest that can be set aside for reserves\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address payable public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract which oversees inter-cToken operations\\r\\n     */\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /**\\r\\n     * @notice Model which tells what the current interest rate should be\\r\\n     */\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for reserves\\r\\n     */\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Block number that interest was last accrued at\\r\\n     */\\r\\n    uint public accrualBlockNumber;\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n     */\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n     */\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of reserves of the underlying held in this market\\r\\n     */\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of tokens in circulation\\r\\n     */\\r\\n    uint public totalSupply;\\r\\n\\r\\n    // Official record of token balances for each account\\r\\n    mapping (address => uint) internal accountTokens;\\r\\n\\r\\n    // Approved token transfer amounts on behalf of others\\r\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    // Mapping of account addresses to outstanding borrow balances\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Share of seized collateral that is added to reserves\\r\\n     */\\r\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\r\\n}\\r\\n\\r\\nabstract contract CTokenInterface is CTokenStorage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a CToken contract (for inspection)\\r\\n     */\\r\\n    bool public constant isCToken = true;\\r\\n\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interest is accrued\\r\\n     */\\r\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted\\r\\n     */\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed\\r\\n     */\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when underlying is borrowed\\r\\n     */\\r\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is repaid\\r\\n     */\\r\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is liquidated\\r\\n     */\\r\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\r\\n\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is changed\\r\\n     */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n     */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when comptroller is changed\\r\\n     */\\r\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interestRateModel is changed\\r\\n     */\\r\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserve factor is changed\\r\\n     */\\r\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are added\\r\\n     */\\r\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are reduced\\r\\n     */\\r\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Transfer event\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Approval event\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\r\\n    function approve(address spender, uint amount) virtual external returns (bool);\\r\\n    function allowance(address owner, address spender) virtual external view returns (uint);\\r\\n    function balanceOf(address owner) virtual external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\r\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() virtual external view returns (uint);\\r\\n    function supplyRatePerBlock() virtual external view returns (uint);\\r\\n    function totalBorrowsCurrent() virtual external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\r\\n    function borrowBalanceStored(address account) virtual external view returns (uint);\\r\\n    function exchangeRateCurrent() virtual external returns (uint);\\r\\n    function exchangeRateStored() virtual external view returns (uint);\\r\\n    function getCash() virtual external view returns (uint);\\r\\n    function accrueInterest() virtual external returns (uint);\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\\r\\n    function _acceptAdmin() virtual external returns (uint);\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) virtual external returns (uint);\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual external returns (uint);\\r\\n}\\r\\n\\r\\ncontract CErc20Storage {\\r\\n    /**\\r\\n     * @notice Underlying asset for this CToken\\r\\n     */\\r\\n    address public underlying;\\r\\n}\\r\\n\\r\\nabstract contract CErc20Interface is CErc20Storage {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) virtual external returns (uint);\\r\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\r\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\r\\n    function sweepToken(EIP20NonStandardInterface token) virtual external;\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _addReserves(uint addAmount) virtual external returns (uint);\\r\\n}\\r\\n\\r\\ncontract CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Implementation address for this contract\\r\\n     */\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\nabstract contract CDelegatorInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Emitted when implementation is changed\\r\\n     */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual external;\\r\\n}\\r\\n\\r\\nabstract contract CDelegateInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) virtual external;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() virtual external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8a954ad43ef40d3ef7f3b0cc0786e1fb346a8cbed0c7e760d83ab796bbae0a1\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nabstract contract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\r\\n    function exitMarket(address cToken) virtual external returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\r\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\r\\n\\r\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\r\\n\\r\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\r\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowVerify(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex) virtual external;\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrowVerify(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external returns (uint);\\r\\n    function seizeVerify(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\r\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        uint repayAmount) virtual external view returns (uint, uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x35b21331eeb8adcbe6c81ef059f467051db884d42a5816c9254ad5df33e1ddc1\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title ERC 20 Token Standard Interface\\r\\n *  https://eips.ethereum.org/EIPS/eip-20\\r\\n */\\r\\ninterface EIP20Interface {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the total number of tokens in circulation\\r\\n      * @return The supply of tokens\\r\\n      */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return success Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return success Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n      * @return success Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x6766042a407f17e340589ec7c0205456ddb83db990fe917586cbaec8e381e506\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved\\r\\n      * @return success Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return remaining The number of tokens allowed to be spent\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0xc73640b236e5f5993d48ea7b8607c1825d700b852fe3fbc2bc07112b62bd249e\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\r\\n\\r\\n    error TransferComptrollerRejection(uint256 errorCode);\\r\\n    error TransferNotAllowed();\\r\\n    error TransferNotEnough();\\r\\n    error TransferTooMuch();\\r\\n\\r\\n    error MintComptrollerRejection(uint256 errorCode);\\r\\n    error MintFreshnessCheck();\\r\\n\\r\\n    error RedeemComptrollerRejection(uint256 errorCode);\\r\\n    error RedeemFreshnessCheck();\\r\\n    error RedeemTransferOutNotPossible();\\r\\n\\r\\n    error BorrowComptrollerRejection(uint256 errorCode);\\r\\n    error BorrowFreshnessCheck();\\r\\n    error BorrowCashNotAvailable();\\r\\n\\r\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\r\\n    error RepayBorrowFreshnessCheck();\\r\\n\\r\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\r\\n    error LiquidateFreshnessCheck();\\r\\n    error LiquidateCollateralFreshnessCheck();\\r\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\r\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\r\\n    error LiquidateLiquidatorIsBorrower();\\r\\n    error LiquidateCloseAmountIsZero();\\r\\n    error LiquidateCloseAmountIsUintMax();\\r\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\r\\n\\r\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\r\\n    error LiquidateSeizeLiquidatorIsBorrower();\\r\\n\\r\\n    error AcceptAdminPendingAdminCheck();\\r\\n\\r\\n    error SetComptrollerOwnerCheck();\\r\\n    error SetPendingAdminOwnerCheck();\\r\\n\\r\\n    error SetReserveFactorAdminCheck();\\r\\n    error SetReserveFactorFreshCheck();\\r\\n    error SetReserveFactorBoundsCheck();\\r\\n\\r\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\r\\n\\r\\n    error ReduceReservesAdminCheck();\\r\\n    error ReduceReservesFreshCheck();\\r\\n    error ReduceReservesCashNotAvailable();\\r\\n    error ReduceReservesCashValidation();\\r\\n\\r\\n    error SetInterestRateModelOwnerCheck();\\r\\n    error SetInterestRateModelFreshCheck();\\r\\n}\\r\\n\",\"keccak256\":\"0x3f8fa3350921f633b45a9312a90b3375db3c6844dca40daaf8256ab4f32d902c\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Compound\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract ExponentialNoError {\\r\\n    uint constant expScale = 1e18;\\r\\n    uint constant doubleScale = 1e36;\\r\\n    uint constant halfExpScale = expScale/2;\\r\\n    uint constant mantissaOne = expScale;\\r\\n\\r\\n    struct Exp {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    struct Double {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Truncates the given exp to a whole number value.\\r\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\r\\n     */\\r\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\r\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\r\\n        return exp.mantissa / expScale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return add_(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if first Exp is less than second Exp.\\r\\n     */\\r\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa < right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp <= right Exp.\\r\\n     */\\r\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa <= right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp > right Exp.\\r\\n     */\\r\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa > right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if Exp is exactly zero\\r\\n     */\\r\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\r\\n        return value.mantissa == 0;\\r\\n    }\\r\\n\\r\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\r\\n        require(n < 2**224, errorMessage);\\r\\n        return uint224(n);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / expScale;\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / doubleScale;\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, expScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, doubleScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x37e1a38f9d77e12761f079a277904f2fd20b80fb79da9f5854851fefe1b5d358\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n  * @title Compound's InterestRateModel Interface\\r\\n  * @author Compound\\r\\n  */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xc9165c6470843312db10221c408840d907786ab238156cd22b1e428b9dc93c2a\",\"license\":\"BSD-3-Clause\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\n\\r\\nabstract contract PriceOracle {\\r\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\r\\n    bool public constant isPriceOracle = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Get the underlying price of a cToken asset\\r\\n      * @param cToken The cToken to get the underlying price of\\r\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n      *  Zero means the price is unavailable.\\r\\n      */\\r\\n    function getUnderlyingPrice(CToken cToken) virtual external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xa4111f8a66c03b8784b91d6bfd7b410236fe16629115ab12f543b7cd1720a6a0\",\"license\":\"BSD-3-Clause\"},\"contracts/PriceOracle/PriceOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"../PriceOracle.sol\\\";\\r\\n\\r\\ninterface IAggregatorV3 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function latestRoundData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface ICToken {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\nstruct PriceConfig {\\r\\n    address feed;\\r\\n    string toSymbol;\\r\\n    uint256 underlyingDecimals;\\r\\n}\\r\\n\\r\\ncontract PriceOracleV2 is PriceOracle {\\r\\n    mapping(string => PriceConfig) public configs;\\r\\n\\r\\n    constructor(string[] memory symbols_, PriceConfig[] memory configs_) {\\r\\n        for (uint256 i = 0; i < symbols_.length; i++) {\\r\\n            configs[symbols_[i]] = configs_[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // price in usd with 18 decimals\\r\\n    function getPrice(CToken cToken) public view returns (uint256) {\\r\\n        string memory symbol = cToken.symbol();\\r\\n        return _getPriceUSD(symbol);\\r\\n    }\\r\\n\\r\\n    function getPrice(string memory symbol) public view returns (uint256) {\\r\\n        return _getPriceUSD(symbol);\\r\\n    }\\r\\n\\r\\n    function getUnderlyingPrice(\\r\\n        CToken cToken\\r\\n    ) external view override returns (uint256) {\\r\\n        string memory symbol = cToken.symbol();\\r\\n        return _getUnderlyingPrice(symbol);\\r\\n    }\\r\\n\\r\\n    // price is extended for comptroller usage based on decimals of exchangeRate\\r\\n    function getUnderlyingPrice(\\r\\n        string memory symbol\\r\\n    ) external view returns (uint256) {\\r\\n        return _getUnderlyingPrice(symbol);\\r\\n    }\\r\\n\\r\\n    function _getUnderlyingPrice(\\r\\n        string memory symbol\\r\\n    ) internal view returns (uint256) {\\r\\n        PriceConfig memory config = configs[symbol];\\r\\n        if (config.feed == address(0)) revert(\\\"missing priceFeed\\\");\\r\\n\\r\\n        uint256 priceUsd = _getPriceUSD(symbol);\\r\\n\\r\\n        return priceUsd * 10 ** (18 - config.underlyingDecimals);\\r\\n    }\\r\\n\\r\\n    function _getPriceUSD(\\r\\n        string memory symbol\\r\\n    ) internal view returns (uint256) {\\r\\n        PriceConfig memory config = configs[symbol];\\r\\n        if (config.feed == address(0)) revert(\\\"missing priceFeed\\\");\\r\\n\\r\\n        uint256 feedDecimals = IAggregatorV3(config.feed).decimals();\\r\\n\\r\\n        (uint256 feedPrice, ) = _getLatestPrice(config);\\r\\n        uint256 price = feedPrice * 10 ** (18 - feedDecimals);\\r\\n\\r\\n        if (\\r\\n            keccak256(abi.encodePacked(config.toSymbol)) !=\\r\\n            keccak256(abi.encodePacked(\\\"USD\\\"))\\r\\n        ) {\\r\\n            price = (price * _getPriceUSD(config.toSymbol)) / 10 ** 18;\\r\\n        }\\r\\n\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    function _getLatestPrice(\\r\\n        PriceConfig memory config\\r\\n    ) internal view returns (uint256, uint256) {\\r\\n        (\\r\\n            ,\\r\\n            //uint80 roundID\\r\\n            int256 price, //uint256 startedAt\\r\\n            ,\\r\\n            uint256 timeStamp, //uint80 answeredInRound\\r\\n\\r\\n        ) = IAggregatorV3(config.feed).latestRoundData();\\r\\n\\r\\n        require(price > 0, \\\"price cannot be zero\\\");\\r\\n        uint256 uPrice = uint256(price);\\r\\n\\r\\n        return (uPrice, timeStamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x78070767cadc131e9fa3d116d020a1894ca22bd242c59ae80c23e4c355fec729\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001141380380620011418339810160408190526200003491620003e7565b60005b8251811015620000f757818181518110620000565762000056620004cc565b60200260200101516000848381518110620000755762000075620004cc565b60200260200101516040516200008c9190620004e2565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781558282015180519192620000d49260018501929091019062000100565b506040919091015160029091015580620000ee8162000500565b91505062000037565b50505062000567565b8280546200010e906200052a565b90600052602060002090601f0160209004810192826200013257600085556200017d565b82601f106200014d57805160ff19168380011785556200017d565b828001600101855582156200017d579182015b828111156200017d57825182559160200191906001019062000160565b506200018b9291506200018f565b5090565b5b808211156200018b576000815560010162000190565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620001e157620001e1620001a6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002125762000212620001a6565b604052919050565b60006001600160401b03821115620002365762000236620001a6565b5060051b60200190565b60005b838110156200025d57818101518382015260200162000243565b838111156200026d576000848401525b50505050565b600082601f8301126200028557600080fd5b81516001600160401b03811115620002a157620002a1620001a6565b620002b6601f8201601f1916602001620001e7565b818152846020838601011115620002cc57600080fd5b620002df82602083016020870162000240565b949350505050565b600082601f830112620002f957600080fd5b81516020620003126200030c836200021a565b620001e7565b82815260059290921b840181019181810190868411156200033257600080fd5b8286015b84811015620003dc5780516001600160401b0380821115620003585760008081fd5b908801906060828b03601f1901811315620003735760008081fd5b6200037d620001bc565b838801516001600160a01b0381168114620003985760008081fd5b815260408481015184811115620003af5760008081fd5b620003bf8e8b8389010162000273565b8a8401525091909301519083015250835291830191830162000336565b509695505050505050565b60008060408385031215620003fb57600080fd5b82516001600160401b03808211156200041357600080fd5b818501915085601f8301126200042857600080fd5b815160206200043b6200030c836200021a565b82815260059290921b840181019181810190898411156200045b57600080fd5b8286015b848110156200049857805186811115620004795760008081fd5b620004898c86838b010162000273565b8452509183019183016200045f565b5091880151919650909350505080821115620004b357600080fd5b50620004c285828601620002e7565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b60008251620004f681846020870162000240565b9190910192915050565b60006000198214156200052357634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200053f57607f821691505b602082108114156200056157634e487b7160e01b600052602260045260246000fd5b50919050565b610bca80620005776000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806341976e0914610067578063524f38891461008d5780635ef7fbad146100a057806366331bba146100c25780636d7f2895146100da578063fc57d4df146100ed575b600080fd5b61007a61007536600461074d565b610100565b6040519081526020015b60405180910390f35b61007a61009b3660046107e5565b61017b565b6100b36100ae3660046107e5565b61018c565b60405161008493929190610895565b6100ca600181565b6040519015158152602001610084565b61007a6100e83660046107e5565b61024c565b61007a6100fb36600461074d565b610257565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610141573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261016991908101906108df565b9050610174816102cb565b9392505050565b6000610186826102cb565b92915050565b8051602081830181018051600082529282019190930120915280546001820180546001600160a01b0390921692916101c39061094d565b80601f01602080910402602001604051908101604052809291908181526020018280546101ef9061094d565b801561023c5780601f106102115761010080835404028352916020019161023c565b820191906000526020600020905b81548152906001019060200180831161021f57829003601f168201915b5050505050908060020154905083565b600061018682610526565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610298573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102c091908101906108df565b905061017481610526565b6000806000836040516102de9190610988565b9081526040805191829003602090810183206060840190925281546001600160a01b03168352600182018054918401916103179061094d565b80601f01602080910402602001604051908101604052809291908181526020018280546103439061094d565b80156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b50505091835250506002919091015460209091015280519091506001600160a01b03166103f85760405162461bcd60e51b81526020600482015260116024820152701b5a5cdcda5b99c81c1c9a58d951995959607a1b60448201526064015b60405180910390fd5b600081600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906109a4565b60ff169050600061047083610689565b50905060006104808360126109dd565b61048b90600a610ad8565b6104959083610ae4565b604051621554d160ea1b60208201529091506023016040516020818303038152906040528051906020012084602001516040516020016104d59190610988565b604051602081830303815290604052805190602001201461051d57670de0b6b3a764000061050685602001516102cb565b6105109083610ae4565b61051a9190610b03565b90505b95945050505050565b6000806000836040516105399190610988565b9081526040805191829003602090810183206060840190925281546001600160a01b03168352600182018054918401916105729061094d565b80601f016020809104026020016040519081016040528092919081815260200182805461059e9061094d565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b50505091835250506002919091015460209091015280519091506001600160a01b031661064e5760405162461bcd60e51b81526020600482015260116024820152701b5a5cdcda5b99c81c1c9a58d951995959607a1b60448201526064016103ef565b6000610659846102cb565b90508160400151601261066c91906109dd565b61067790600a610ad8565b6106819082610ae4565b949350505050565b60008060008084600001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190610b44565b50935050925050600082136107435760405162461bcd60e51b815260206004820152601460248201527370726963652063616e6e6f74206265207a65726f60601b60448201526064016103ef565b9094909350915050565b60006020828403121561075f57600080fd5b81356001600160a01b038116811461017457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107b5576107b5610776565b604052919050565b600067ffffffffffffffff8211156107d7576107d7610776565b50601f01601f191660200190565b6000602082840312156107f757600080fd5b813567ffffffffffffffff81111561080e57600080fd5b8201601f8101841361081f57600080fd5b803561083261082d826107bd565b61078c565b81815285602083850101111561084757600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015610880578181015183820152602001610868565b8381111561088f576000848401525b50505050565b60018060a01b038416815260606020820152600083518060608401526108c2816080850160208801610865565b604083019390935250601f91909101601f19160160800192915050565b6000602082840312156108f157600080fd5b815167ffffffffffffffff81111561090857600080fd5b8201601f8101841361091957600080fd5b805161092761082d826107bd565b81815285602083850101111561093c57600080fd5b61051d826020830160208601610865565b600181811c9082168061096157607f821691505b6020821081141561098257634e487b7160e01b600052602260045260246000fd5b50919050565b6000825161099a818460208701610865565b9190910192915050565b6000602082840312156109b657600080fd5b815160ff8116811461017457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156109ef576109ef6109c7565b500390565b600181815b80851115610a2f578160001904821115610a1557610a156109c7565b80851615610a2257918102915b93841c93908002906109f9565b509250929050565b600082610a4657506001610186565b81610a5357506000610186565b8160018114610a695760028114610a7357610a8f565b6001915050610186565b60ff841115610a8457610a846109c7565b50506001821b610186565b5060208310610133831016604e8410600b8410161715610ab2575081810a610186565b610abc83836109f4565b8060001904821115610ad057610ad06109c7565b029392505050565b60006101748383610a37565b6000816000190483118215151615610afe57610afe6109c7565b500290565b600082610b2057634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff81168114610b3f57600080fd5b919050565b600080600080600060a08688031215610b5c57600080fd5b610b6586610b25565b9450602086015193506040860151925060608601519150610b8860808701610b25565b9050929550929590935056fea2646970667358221220b5f24e920e37273523f7c554c5b4bf3d450dde6c7d960d03ffd13138e872487e64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806341976e0914610067578063524f38891461008d5780635ef7fbad146100a057806366331bba146100c25780636d7f2895146100da578063fc57d4df146100ed575b600080fd5b61007a61007536600461074d565b610100565b6040519081526020015b60405180910390f35b61007a61009b3660046107e5565b61017b565b6100b36100ae3660046107e5565b61018c565b60405161008493929190610895565b6100ca600181565b6040519015158152602001610084565b61007a6100e83660046107e5565b61024c565b61007a6100fb36600461074d565b610257565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610141573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261016991908101906108df565b9050610174816102cb565b9392505050565b6000610186826102cb565b92915050565b8051602081830181018051600082529282019190930120915280546001820180546001600160a01b0390921692916101c39061094d565b80601f01602080910402602001604051908101604052809291908181526020018280546101ef9061094d565b801561023c5780601f106102115761010080835404028352916020019161023c565b820191906000526020600020905b81548152906001019060200180831161021f57829003601f168201915b5050505050908060020154905083565b600061018682610526565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610298573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102c091908101906108df565b905061017481610526565b6000806000836040516102de9190610988565b9081526040805191829003602090810183206060840190925281546001600160a01b03168352600182018054918401916103179061094d565b80601f01602080910402602001604051908101604052809291908181526020018280546103439061094d565b80156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b50505091835250506002919091015460209091015280519091506001600160a01b03166103f85760405162461bcd60e51b81526020600482015260116024820152701b5a5cdcda5b99c81c1c9a58d951995959607a1b60448201526064015b60405180910390fd5b600081600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906109a4565b60ff169050600061047083610689565b50905060006104808360126109dd565b61048b90600a610ad8565b6104959083610ae4565b604051621554d160ea1b60208201529091506023016040516020818303038152906040528051906020012084602001516040516020016104d59190610988565b604051602081830303815290604052805190602001201461051d57670de0b6b3a764000061050685602001516102cb565b6105109083610ae4565b61051a9190610b03565b90505b95945050505050565b6000806000836040516105399190610988565b9081526040805191829003602090810183206060840190925281546001600160a01b03168352600182018054918401916105729061094d565b80601f016020809104026020016040519081016040528092919081815260200182805461059e9061094d565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b50505091835250506002919091015460209091015280519091506001600160a01b031661064e5760405162461bcd60e51b81526020600482015260116024820152701b5a5cdcda5b99c81c1c9a58d951995959607a1b60448201526064016103ef565b6000610659846102cb565b90508160400151601261066c91906109dd565b61067790600a610ad8565b6106819082610ae4565b949350505050565b60008060008084600001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190610b44565b50935050925050600082136107435760405162461bcd60e51b815260206004820152601460248201527370726963652063616e6e6f74206265207a65726f60601b60448201526064016103ef565b9094909350915050565b60006020828403121561075f57600080fd5b81356001600160a01b038116811461017457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107b5576107b5610776565b604052919050565b600067ffffffffffffffff8211156107d7576107d7610776565b50601f01601f191660200190565b6000602082840312156107f757600080fd5b813567ffffffffffffffff81111561080e57600080fd5b8201601f8101841361081f57600080fd5b803561083261082d826107bd565b61078c565b81815285602083850101111561084757600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015610880578181015183820152602001610868565b8381111561088f576000848401525b50505050565b60018060a01b038416815260606020820152600083518060608401526108c2816080850160208801610865565b604083019390935250601f91909101601f19160160800192915050565b6000602082840312156108f157600080fd5b815167ffffffffffffffff81111561090857600080fd5b8201601f8101841361091957600080fd5b805161092761082d826107bd565b81815285602083850101111561093c57600080fd5b61051d826020830160208601610865565b600181811c9082168061096157607f821691505b6020821081141561098257634e487b7160e01b600052602260045260246000fd5b50919050565b6000825161099a818460208701610865565b9190910192915050565b6000602082840312156109b657600080fd5b815160ff8116811461017457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156109ef576109ef6109c7565b500390565b600181815b80851115610a2f578160001904821115610a1557610a156109c7565b80851615610a2257918102915b93841c93908002906109f9565b509250929050565b600082610a4657506001610186565b81610a5357506000610186565b8160018114610a695760028114610a7357610a8f565b6001915050610186565b60ff841115610a8457610a846109c7565b50506001821b610186565b5060208310610133831016604e8410600b8410161715610ab2575081810a610186565b610abc83836109f4565b8060001904821115610ad057610ad06109c7565b029392505050565b60006101748383610a37565b6000816000190483118215151615610afe57610afe6109c7565b500290565b600082610b2057634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff81168114610b3f57600080fd5b919050565b600080600080600060a08688031215610b5c57600080fd5b610b6586610b25565b9450602086015193506040860151925060608601519150610b8860808701610b25565b9050929550929590935056fea2646970667358221220b5f24e920e37273523f7c554c5b4bf3d450dde6c7d960d03ffd13138e872487e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUnderlyingPrice(address)": {
        "params": {
          "cToken": "The cToken to get the underlying price of"
        },
        "returns": {
          "_0": "The underlying asset price mantissa (scaled by 1e18).  Zero means the price is unavailable."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUnderlyingPrice(address)": {
        "notice": "Get the underlying price of a cToken asset"
      },
      "isPriceOracle()": {
        "notice": "Indicator that this is a PriceOracle contract (for inspection)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4018,
        "contract": "contracts/PriceOracle/PriceOracleV2.sol:PriceOracleV2",
        "label": "configs",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_struct(PriceConfig)4011_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_struct(PriceConfig)4011_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct PriceConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceConfig)4011_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PriceConfig)4011_storage": {
        "encoding": "inplace",
        "label": "struct PriceConfig",
        "members": [
          {
            "astId": 4006,
            "contract": "contracts/PriceOracle/PriceOracleV2.sol:PriceOracleV2",
            "label": "feed",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4008,
            "contract": "contracts/PriceOracle/PriceOracleV2.sol:PriceOracleV2",
            "label": "toSymbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4010,
            "contract": "contracts/PriceOracle/PriceOracleV2.sol:PriceOracleV2",
            "label": "underlyingDecimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}