{
  "address": "0xE8FF1489227fa74f77E49C688903e69E1583C03f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCompAccrued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCompAccrued",
          "type": "uint256"
        }
      ],
      "name": "CompAccruedAdjusted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "CompBorrowSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CompGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCompReceivable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCompReceivable",
          "type": "uint256"
        }
      ],
      "name": "CompReceivableUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "CompSupplySpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "ContributorCompSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedBorrowerComp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedSupplierComp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrowCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewBorrowCapGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "NewSupplyCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldSupplyCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSupplyCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewSupplyCapGuardian",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Unitroller",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_grantComp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setBorrowCapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setBorrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "supplySpeeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowSpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_setCompSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "compSpeed",
          "type": "uint256"
        }
      ],
      "name": "_setContributorCompSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketSupplyCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setMintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setSeizePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSupplyCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setSupplyCapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setTransferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "_supportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compBorrowSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compContributorSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compReceivable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSupplySpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "affectedUsers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "fixBadAccruals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCompAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExternalRewardDistributorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "isDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastContributorBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isComped",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "mintVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposal65FixExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowerIndex",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seizeGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "updateContributorRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d7fa22d6e049154128d4181010832bc37ab92c136d444fbf82c84c99afa85ae",
  "receipt": {
    "to": null,
    "from": "0xFb59Ce8986943163F14C590755b29dB2998F2322",
    "contractAddress": "0xE8FF1489227fa74f77E49C688903e69E1583C03f",
    "transactionIndex": 25,
    "gasUsed": "5159912",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa2facc2de5010565badcfcc963687e8c91a5906c4dab76bcefd51356d91c4ca3",
    "transactionHash": "0x4d7fa22d6e049154128d4181010832bc37ab92c136d444fbf82c84c99afa85ae",
    "logs": [],
    "blockNumber": 118184564,
    "cumulativeGasUsed": "7613130",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8207a79173cca7213df20c8bcc4c3ae3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCompAccrued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCompAccrued\",\"type\":\"uint256\"}],\"name\":\"CompAccruedAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompBorrowSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCompReceivable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCompReceivable\",\"type\":\"uint256\"}],\"name\":\"CompReceivableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompSupplySpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"ContributorCompSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"NewSupplyCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSupplyCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSupplyCapGuardian\",\"type\":\"address\"}],\"name\":\"NewSupplyCapGuardian\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setCompSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSpeed\",\"type\":\"uint256\"}],\"name\":\"_setContributorCompSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSupplyCapGuardian\",\"type\":\"address\"}],\"name\":\"_setSupplyCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compContributorSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compReceivable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"affectedUsers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"fixBadAccruals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExternalRewardDistributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"isDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastContributorBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isComped\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposal65FixExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"updateContributorRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"_grantComp(address,uint256)\":{\"details\":\"Note: If there is not enough COMP, we do not perform the transfer all.\",\"params\":{\"amount\":\"The amount of COMP to (possibly) transfer\",\"recipient\":\"The address of the recipient to transfer COMP to\"}},\"_setBorrowCapGuardian(address)\":{\"params\":{\"newBorrowCapGuardian\":\"The address of the new Borrow Cap Guardian\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure\"}},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"cToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setCompSpeeds(address[],uint256[],uint256[])\":{\"params\":{\"borrowSpeeds\":\"New borrow-side COMP speed for the corresponding market.\",\"cTokens\":\"The markets whose COMP speed to update.\",\"supplySpeeds\":\"New supply-side COMP speed for the corresponding market.\"}},\"_setContributorCompSpeed(address,uint256)\":{\"params\":{\"compSpeed\":\"New COMP speed for contributor\",\"contributor\":\"The contributor whose COMP speed to update\"}},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"_setMarketSupplyCaps(address[],uint256[])\":{\"details\":\"Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the supply caps for\",\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setSupplyCapGuardian(address)\":{\"params\":{\"newSupplyCapGuardian\":\"The address of the new Supply Cap Guardian\"}},\"_supportMarket(address)\":{\"details\":\"Admin function to set isListed and add support for the market\",\"params\":{\"cToken\":\"The address of the market (token) to list\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"cToken\":\"The market to verify the borrow against\"},\"returns\":{\"_0\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"borrowVerify(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset requested to borrow\",\"borrower\":\"The address borrowing the underlying\",\"cToken\":\"Asset whose underlying is being borrowed\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"cToken\":\"The cToken to check\"},\"returns\":{\"_0\":\"True if the account is in the asset, otherwise false.\"}},\"claimComp(address)\":{\"params\":{\"holder\":\"The address to claim COMP for\"}},\"claimComp(address,address[])\":{\"params\":{\"cTokens\":\"The list of markets to claim COMP in\",\"holder\":\"The address to claim COMP for\"}},\"claimComp(address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim COMP earned by borrowing\",\"cTokens\":\"The list of markets to claim COMP in\",\"holders\":\"The addresses to claim COMP for\",\"suppliers\":\"Whether or not to claim COMP earned by supplying\"}},\"enterMarkets(address[])\":{\"params\":{\"cTokens\":\"The list of addresses of the cToken markets to be enabled\"},\"returns\":{\"_0\":\"Success indicator for whether each corresponding market was entered\"}},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"cTokenAddress\":\"The address of the asset to be removed\"},\"returns\":{\"_0\":\"Whether or not the account successfully exited the market\"}},\"getAccountLiquidity(address)\":{\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"returns\":{\"_0\":\"The list of market addresses\"}},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"returns\":{\"_0\":\"A dynamic list with the assets the account has entered\"}},\"getCompAddress()\":{\"returns\":{\"_0\":\"The address of SONNE\"}},\"getExternalRewardDistributorAddress()\":{\"returns\":{\"_0\":\"The address of the external reward distributor\"}},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"cTokenModify\":\"The market to hypothetically redeem/borrow in\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)\"}},\"isDeprecated(address)\":{\"details\":\"All borrows in a deprecated cToken market can be immediately liquidated\",\"params\":{\"cToken\":\"The market to check if deprecated\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\"}},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in cToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\",\"cTokenBorrowed\":\"The address of the borrowed cToken\",\"cTokenCollateral\":\"The address of the collateral cToken\"},\"returns\":{\"_0\":\"(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\"}},\"mintAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"returns\":{\"_0\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"mintVerify(address,address,uint256,uint256)\":{\"params\":{\"actualMintAmount\":\"The amount of the underlying asset being minted\",\"cToken\":\"Asset being minted\",\"mintTokens\":\"The number of tokens being minted\",\"minter\":\"The address minting the tokens\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of cTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"returns\":{\"_0\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"cToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"cToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"returns\":{\"_0\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cToken\":\"Asset being repaid\",\"payer\":\"The address repaying the borrow\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"seizeVerify(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the transfer against\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"},\"returns\":{\"_0\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"transferVerify(address,address,address,uint256)\":{\"params\":{\"cToken\":\"Asset being transferred\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"}},\"updateContributorRewards(address)\":{\"params\":{\"contributor\":\"The address to calculate contributor rewards for\"}}},\"title\":\"Compound's Comptroller Contract\",\"version\":1},\"userdoc\":{\"events\":{\"ActionPaused(address,string,bool)\":{\"notice\":\"Emitted when an action is paused on a market\"},\"ActionPaused(string,bool)\":{\"notice\":\"Emitted when an action is paused globally\"},\"CompAccruedAdjusted(address,uint256,uint256)\":{\"notice\":\"Emitted when COMP accrued for a user has been manually adjusted.\"},\"CompBorrowSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new borrow-side COMP speed is calculated for a market\"},\"CompGranted(address,uint256)\":{\"notice\":\"Emitted when COMP is granted by admin\"},\"CompReceivableUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when COMP receivable for a user has been updated.\"},\"CompSupplySpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new supply-side COMP speed is calculated for a market\"},\"ContributorCompSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new COMP speed is set for a contributor\"},\"DistributedBorrowerComp(address,address,uint256,uint256)\":{\"notice\":\"Emitted when COMP is distributed to a borrower\"},\"DistributedSupplierComp(address,address,uint256,uint256)\":{\"notice\":\"Emitted when COMP is distributed to a supplier\"},\"MarketEntered(address,address)\":{\"notice\":\"Emitted when an account enters a market\"},\"MarketExited(address,address)\":{\"notice\":\"Emitted when an account exits a market\"},\"MarketListed(address)\":{\"notice\":\"Emitted when an admin supports a market\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Emitted when borrow cap for a cToken is changed\"},\"NewBorrowCapGuardian(address,address)\":{\"notice\":\"Emitted when borrow cap guardian is changed\"},\"NewCloseFactor(uint256,uint256)\":{\"notice\":\"Emitted when close factor is changed by admin\"},\"NewCollateralFactor(address,uint256,uint256)\":{\"notice\":\"Emitted when a collateral factor is changed by admin\"},\"NewLiquidationIncentive(uint256,uint256)\":{\"notice\":\"Emitted when liquidation incentive is changed by admin\"},\"NewPauseGuardian(address,address)\":{\"notice\":\"Emitted when pause guardian is changed\"},\"NewPriceOracle(address,address)\":{\"notice\":\"Emitted when price oracle is changed\"},\"NewSupplyCap(address,uint256)\":{\"notice\":\"Emitted when supply cap for a cToken is changed\"},\"NewSupplyCapGuardian(address,address)\":{\"notice\":\"Emitted when supply cap guardian is changed\"}},\"kind\":\"user\",\"methods\":{\"_grantComp(address,uint256)\":{\"notice\":\"Transfer COMP to the recipient\"},\"_setBorrowCapGuardian(address)\":{\"notice\":\"Admin function to change the Borrow Cap Guardian\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setCompSpeeds(address[],uint256[],uint256[])\":{\"notice\":\"Set COMP borrow and supply speeds for the specified markets.\"},\"_setContributorCompSpeed(address,uint256)\":{\"notice\":\"Set COMP speed for a single contributor\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Set the given supply caps for the given cToken markets. Supplying that brings total supply to or above supply cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_setSupplyCapGuardian(address)\":{\"notice\":\"Admin function to change the Supply Cap Guardian\"},\"_supportMarket(address)\":{\"notice\":\"Add the market to the markets mapping and set it as listed\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"borrowVerify(address,address,uint256)\":{\"notice\":\"Validates borrow and reverts on rejection. May emit logs.\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"claimComp(address)\":{\"notice\":\"Claim all the comp accrued by holder in all markets\"},\"claimComp(address,address[])\":{\"notice\":\"Claim all the comp accrued by holder in the specified markets\"},\"claimComp(address[],address[],bool,bool)\":{\"notice\":\"Claim all comp accrued by the holders\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"compAccrued(address)\":{\"notice\":\"The COMP accrued but not yet transferred to each user\"},\"compBorrowSpeeds(address)\":{\"notice\":\"The rate at which comp is distributed to the corresponding borrow market (per block)\"},\"compBorrowState(address)\":{\"notice\":\"The COMP market borrow state for each market\"},\"compBorrowerIndex(address,address)\":{\"notice\":\"The COMP borrow index for each market for each borrower as of the last time they accrued COMP\"},\"compContributorSpeeds(address)\":{\"notice\":\"The portion of COMP that each contributor receives per block\"},\"compInitialIndex()\":{\"notice\":\"The initial COMP index for a market\"},\"compRate()\":{\"notice\":\"The rate at which the flywheel distributes COMP, per block\"},\"compReceivable(address)\":{\"notice\":\"Accounting storage mapping account addresses to how much COMP they owe the protocol.\"},\"compSpeeds(address)\":{\"notice\":\"The portion of compRate that each market currently receives\"},\"compSupplierIndex(address,address)\":{\"notice\":\"The COMP borrow index for each market for each supplier as of the last time they accrued COMP\"},\"compSupplySpeeds(address)\":{\"notice\":\"The rate at which comp is distributed to the corresponding supply market (per block)\"},\"compSupplyState(address)\":{\"notice\":\"The COMP market supply state for each market\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"fixBadAccruals(address[],uint256[])\":{\"notice\":\"Delete this function after proposal 65 is executed\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getCompAddress()\":{\"notice\":\"Return the address of the SONNE token\"},\"getExternalRewardDistributorAddress()\":{\"notice\":\"Return the address of the external reward distributor\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"isComptroller()\":{\"notice\":\"Indicator that this is a Comptroller contract (for inspection)\"},\"isDeprecated(address)\":{\"notice\":\"Returns true if the given cToken market has been deprecated\"},\"lastContributorBlock(address)\":{\"notice\":\"Last block at which a contributor's COMP rewards have been allocated\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"notice\":\"Validates liquidateBorrow and reverts on rejection. May emit logs.\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"liquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives\"},\"markets(address)\":{\"notice\":\"Official mapping of cTokens -> Market metadata\"},\"maxAssets()\":{\"notice\":\"Max number of assets a single account can participate in (borrow or use as collateral)\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"mintVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates mint and reverts on rejection. May emit logs.\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"proposal65FixExecuted()\":{\"notice\":\"Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"notice\":\"Validates repayBorrow and reverts on rejection. May emit logs.\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"seizeVerify(address,address,address,address,uint256)\":{\"notice\":\"Validates seize and reverts on rejection. May emit logs.\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"transferVerify(address,address,address,uint256)\":{\"notice\":\"Validates transfer and reverts on rejection. May emit logs.\"},\"updateContributorRewards(address)\":{\"notice\":\"Calculate additional accrued COMP for a contributor since last accrual\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./CTokenInterfaces.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./EIP20Interface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound's CToken Contract\\r\\n * @notice Abstract base for CTokens\\r\\n * @author Compound\\r\\n */\\r\\nabstract contract CToken is\\r\\n    CTokenInterface,\\r\\n    ExponentialNoError,\\r\\n    TokenErrorReporter\\r\\n{\\r\\n    /**\\r\\n     * @notice Initialize the money market\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ EIP-20 name of this token\\r\\n     * @param symbol_ EIP-20 symbol of this token\\r\\n     * @param decimals_ EIP-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(\\r\\n        ComptrollerInterface comptroller_,\\r\\n        InterestRateModel interestRateModel_,\\r\\n        uint256 initialExchangeRateMantissa_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n    ) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\r\\n        require(\\r\\n            accrualBlockNumber == 0 && borrowIndex == 0,\\r\\n            \\\"market may only be initialized once\\\"\\r\\n        );\\r\\n\\r\\n        // Set initial exchange rate\\r\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\r\\n        require(\\r\\n            initialExchangeRateMantissa > 0,\\r\\n            \\\"initial exchange rate must be greater than zero.\\\"\\r\\n        );\\r\\n\\r\\n        // Set the comptroller\\r\\n        uint256 err = _setComptroller(comptroller_);\\r\\n        require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\r\\n\\r\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\r\\n        accrualBlockNumber = getBlockNumber();\\r\\n        borrowIndex = mantissaOne;\\r\\n\\r\\n        // Set the interest rate model (depends on block number / borrow index)\\r\\n        err = _setInterestRateModelFresh(interestRateModel_);\\r\\n        require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\r\\n\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        decimals = decimals_;\\r\\n\\r\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\r\\n     * @dev Called by both `transfer` and `transferFrom` internally\\r\\n     * @param spender The address of the account performing the transfer\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param tokens The number of tokens to transfer\\r\\n     * @return 0 if the transfer succeeded, else revert\\r\\n     */\\r\\n    function transferTokens(\\r\\n        address spender,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 tokens\\r\\n    ) internal returns (uint256) {\\r\\n        /* Fail if transfer not allowed */\\r\\n        uint256 allowed = comptroller.transferAllowed(\\r\\n            address(this),\\r\\n            src,\\r\\n            dst,\\r\\n            tokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert TransferComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Do not allow self-transfers */\\r\\n        if (src == dst) {\\r\\n            revert TransferNotAllowed();\\r\\n        }\\r\\n\\r\\n        /* Get the allowance, infinite for the account owner */\\r\\n        uint256 startingAllowance = 0;\\r\\n        if (spender == src) {\\r\\n            startingAllowance = type(uint256).max;\\r\\n        } else {\\r\\n            startingAllowance = transferAllowances[src][spender];\\r\\n        }\\r\\n\\r\\n        /* Do the calculations, checking for {under,over}flow */\\r\\n        uint256 allowanceNew = startingAllowance - tokens;\\r\\n        uint256 srcTokensNew = accountTokens[src] - tokens;\\r\\n        uint256 dstTokensNew = accountTokens[dst] + tokens;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        accountTokens[src] = srcTokensNew;\\r\\n        accountTokens[dst] = dstTokensNew;\\r\\n\\r\\n        /* Eat some of the allowance (if necessary) */\\r\\n        if (startingAllowance != type(uint256).max) {\\r\\n            transferAllowances[src][spender] = allowanceNew;\\r\\n        }\\r\\n\\r\\n        /* We emit a Transfer event */\\r\\n        emit Transfer(src, dst, tokens);\\r\\n\\r\\n        // unused function\\r\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (bool)\\r\\n    {\\r\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) external override nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address src = msg.sender;\\r\\n        transferAllowances[src][spender] = amount;\\r\\n        emit Approval(src, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return transferAllowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the token balance of the `owner`\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The number of tokens owned by `owner`\\r\\n     */\\r\\n    function balanceOf(address owner) external view override returns (uint256) {\\r\\n        return accountTokens[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying balance of the `owner`\\r\\n     * @dev This also accrues interest in a transaction\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The amount of underlying owned by `owner`\\r\\n     */\\r\\n    function balanceOfUnderlying(address owner)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\r\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\r\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\r\\n     * @param account Address of the account to snapshot\\r\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\r\\n     */\\r\\n    function getAccountSnapshot(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            NO_ERROR,\\r\\n            accountTokens[account],\\r\\n            borrowBalanceStoredInternal(account),\\r\\n            exchangeRateStoredInternal()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to simply retrieve block number\\r\\n     *  This exists mainly for inheriting test contracts to stub this result.\\r\\n     */\\r\\n    function getBlockNumber() internal view virtual returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\r\\n     * @return The borrow interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function borrowRatePerBlock() external view override returns (uint256) {\\r\\n        return\\r\\n            interestRateModel.getBorrowRate(\\r\\n                getCashPrior(),\\r\\n                totalBorrows,\\r\\n                totalReserves\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block supply interest rate for this cToken\\r\\n     * @return The supply interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function supplyRatePerBlock() external view override returns (uint256) {\\r\\n        return\\r\\n            interestRateModel.getSupplyRate(\\r\\n                getCashPrior(),\\r\\n                totalBorrows,\\r\\n                totalReserves,\\r\\n                reserveFactorMantissa\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current total borrows plus accrued interest\\r\\n     * @return The total borrows with interest\\r\\n     */\\r\\n    function totalBorrowsCurrent()\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return totalBorrows;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\r\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceCurrent(address account)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return borrowBalanceStored(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceStored(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return borrowBalanceStoredInternal(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\r\\n     */\\r\\n    function borrowBalanceStoredInternal(address account)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        /* Get borrowBalance and borrowIndex */\\r\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\r\\n\\r\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\r\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\r\\n         */\\r\\n        if (borrowSnapshot.principal == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        /* Calculate new borrow balance using the interest index:\\r\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\r\\n         */\\r\\n        uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\r\\n        return principalTimesIndex / borrowSnapshot.interestIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest then return the up-to-date exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateCurrent()\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStored() public view override returns (uint256) {\\r\\n        return exchangeRateStoredInternal();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStoredInternal()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _totalSupply = totalSupply;\\r\\n        if (_totalSupply == 0) {\\r\\n            /*\\r\\n             * If there are no tokens minted:\\r\\n             *  exchangeRate = initialExchangeRate\\r\\n             */\\r\\n            return initialExchangeRateMantissa;\\r\\n        } else {\\r\\n            /*\\r\\n             * Otherwise:\\r\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\r\\n             */\\r\\n            uint256 totalCash = getCashPrior();\\r\\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\\r\\n                totalBorrows -\\r\\n                totalReserves;\\r\\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\\r\\n                _totalSupply;\\r\\n\\r\\n            return exchangeRate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get cash balance of this cToken in the underlying asset\\r\\n     * @return The quantity of underlying asset owned by this contract\\r\\n     */\\r\\n    function getCash() external view override returns (uint256) {\\r\\n        return getCashPrior();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Applies accrued interest to total borrows and reserves\\r\\n     * @dev This calculates interest accrued from the last checkpointed block\\r\\n     *   up to the current block and writes new checkpoint to storage.\\r\\n     */\\r\\n    function accrueInterest() public virtual override returns (uint256) {\\r\\n        /* Remember the initial block number */\\r\\n        uint256 currentBlockNumber = getBlockNumber();\\r\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\r\\n\\r\\n        /* Short-circuit accumulating 0 interest */\\r\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\r\\n            return NO_ERROR;\\r\\n        }\\r\\n\\r\\n        /* Read the previous values out of storage */\\r\\n        uint256 cashPrior = getCashPrior();\\r\\n        uint256 borrowsPrior = totalBorrows;\\r\\n        uint256 reservesPrior = totalReserves;\\r\\n        uint256 borrowIndexPrior = borrowIndex;\\r\\n\\r\\n        /* Calculate the current borrow interest rate */\\r\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\r\\n            cashPrior,\\r\\n            borrowsPrior,\\r\\n            reservesPrior\\r\\n        );\\r\\n        require(\\r\\n            borrowRateMantissa <= borrowRateMaxMantissa,\\r\\n            \\\"borrow rate is absurdly high\\\"\\r\\n        );\\r\\n\\r\\n        /* Calculate the number of blocks elapsed since the last accrual */\\r\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\r\\n\\r\\n        /*\\r\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\r\\n         *  simpleInterestFactor = borrowRate * blockDelta\\r\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\r\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\r\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\r\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\r\\n         */\\r\\n\\r\\n        Exp memory simpleInterestFactor = mul_(\\r\\n            Exp({mantissa: borrowRateMantissa}),\\r\\n            blockDelta\\r\\n        );\\r\\n        uint256 interestAccumulated = mul_ScalarTruncate(\\r\\n            simpleInterestFactor,\\r\\n            borrowsPrior\\r\\n        );\\r\\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\r\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\r\\n            Exp({mantissa: reserveFactorMantissa}),\\r\\n            interestAccumulated,\\r\\n            reservesPrior\\r\\n        );\\r\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\\r\\n            simpleInterestFactor,\\r\\n            borrowIndexPrior,\\r\\n            borrowIndexPrior\\r\\n        );\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accrualBlockNumber = currentBlockNumber;\\r\\n        borrowIndex = borrowIndexNew;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* We emit an AccrueInterest event */\\r\\n        emit AccrueInterest(\\r\\n            cashPrior,\\r\\n            interestAccumulated,\\r\\n            borrowIndexNew,\\r\\n            totalBorrowsNew\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     */\\r\\n    function mintInternal(uint256 mintAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\r\\n        mintFresh(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param minter The address of the account which is supplying the assets\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     */\\r\\n    function mintFresh(address minter, uint256 mintAmount) internal {\\r\\n        /* Fail if mint not allowed */\\r\\n        uint256 allowed = comptroller.mintAllowed(\\r\\n            address(this),\\r\\n            minter,\\r\\n            mintAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert MintComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert MintFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        uint256 actualMintAmount = doTransferIn(minter, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        uint256 mintTokens = div_(actualMintAmount, exchangeRate);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\r\\n         * And write them into storage\\r\\n         */\\r\\n        totalSupply = totalSupply + mintTokens;\\r\\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\\r\\n\\r\\n        /* We emit a Mint event, and a Transfer event */\\r\\n        emit Mint(minter, actualMintAmount, mintTokens);\\r\\n        emit Transfer(address(this), minter, mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\r\\n     */\\r\\n    function redeemInternal(uint256 redeemTokens) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\r\\n     */\\r\\n    function redeemUnderlyingInternal(uint256 redeemAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param redeemer The address of the account which is redeeming the tokens\\r\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     */\\r\\n    function redeemFresh(\\r\\n        address payable redeemer,\\r\\n        uint256 redeemTokensIn,\\r\\n        uint256 redeemAmountIn\\r\\n    ) internal {\\r\\n        require(\\r\\n            redeemTokensIn == 0 || redeemAmountIn == 0,\\r\\n            \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\r\\n        );\\r\\n\\r\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n\\r\\n        uint256 redeemTokens;\\r\\n        uint256 redeemAmount;\\r\\n        /* If redeemTokensIn > 0: */\\r\\n        if (redeemTokensIn > 0) {\\r\\n            /*\\r\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\r\\n             *  redeemTokens = redeemTokensIn\\r\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\r\\n             */\\r\\n            redeemTokens = redeemTokensIn;\\r\\n            redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\r\\n        } else {\\r\\n            /*\\r\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\r\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\r\\n             *  redeemAmount = redeemAmountIn\\r\\n             */\\r\\n            redeemTokens = div_(redeemAmountIn, exchangeRate);\\r\\n            redeemAmount = redeemAmountIn;\\r\\n        }\\r\\n\\r\\n        /* Fail if redeem not allowed */\\r\\n        uint256 allowed = comptroller.redeemAllowed(\\r\\n            address(this),\\r\\n            redeemer,\\r\\n            redeemTokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert RedeemComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert RedeemFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient cash */\\r\\n        if (getCashPrior() < redeemAmount) {\\r\\n            revert RedeemTransferOutNotPossible();\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We write the previously calculated values into storage.\\r\\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\r\\n         */\\r\\n        totalSupply = totalSupply - redeemTokens;\\r\\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken has redeemAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(redeemer, redeemAmount);\\r\\n\\r\\n        /* We emit a Transfer event, and a Redeem event */\\r\\n        emit Transfer(redeemer, address(this), redeemTokens);\\r\\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.redeemVerify(\\r\\n            address(this),\\r\\n            redeemer,\\r\\n            redeemAmount,\\r\\n            redeemTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender borrows assets from the protocol to their own address\\r\\n     * @param borrowAmount The amount of the underlying asset to borrow\\r\\n     */\\r\\n    function borrowInternal(uint256 borrowAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        borrowFresh(payable(msg.sender), borrowAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Users borrow assets from the protocol to their own address\\r\\n     * @param borrowAmount The amount of the underlying asset to borrow\\r\\n     */\\r\\n    function borrowFresh(address payable borrower, uint256 borrowAmount)\\r\\n        internal\\r\\n    {\\r\\n        /* Fail if borrow not allowed */\\r\\n        uint256 allowed = comptroller.borrowAllowed(\\r\\n            address(this),\\r\\n            borrower,\\r\\n            borrowAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert BorrowComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert BorrowFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\r\\n        if (getCashPrior() < borrowAmount) {\\r\\n            revert BorrowCashNotAvailable();\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\r\\n         *  accountBorrowNew = accountBorrow + borrowAmount\\r\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\r\\n         */\\r\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\r\\n        uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\r\\n        uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We write the previously calculated values into storage.\\r\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\r\\n        `*/\\r\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken borrowAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(borrower, borrowAmount);\\r\\n\\r\\n        /* We emit a Borrow event */\\r\\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\r\\n     */\\r\\n    function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\r\\n     */\\r\\n    function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\r\\n     * @param payer the account paying off the borrow\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\r\\n     * @return (uint) the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowFresh(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint256 repayAmount\\r\\n    ) internal returns (uint256) {\\r\\n        /* Fail if repayBorrow not allowed */\\r\\n        uint256 allowed = comptroller.repayBorrowAllowed(\\r\\n            address(this),\\r\\n            payer,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert RepayBorrowComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert RepayBorrowFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\r\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\r\\n\\r\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\r\\n        uint256 repayAmountFinal = repayAmount == type(uint256).max\\r\\n            ? accountBorrowsPrev\\r\\n            : repayAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the payer and the repayAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional repayAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *   it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n        uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\r\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\r\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\r\\n         */\\r\\n        uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\r\\n        uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n\\r\\n        /* We emit a RepayBorrow event */\\r\\n        emit RepayBorrow(\\r\\n            payer,\\r\\n            borrower,\\r\\n            actualRepayAmount,\\r\\n            accountBorrowsNew,\\r\\n            totalBorrowsNew\\r\\n        );\\r\\n\\r\\n        return actualRepayAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     */\\r\\n    function liquidateBorrowInternal(\\r\\n        address borrower,\\r\\n        uint256 repayAmount,\\r\\n        CTokenInterface cTokenCollateral\\r\\n    ) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n\\r\\n        uint256 error = cTokenCollateral.accrueInterest();\\r\\n        if (error != NO_ERROR) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            revert LiquidateAccrueCollateralInterestFailed(error);\\r\\n        }\\r\\n\\r\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        liquidateBorrowFresh(\\r\\n            msg.sender,\\r\\n            borrower,\\r\\n            repayAmount,\\r\\n            cTokenCollateral\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The liquidator liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param liquidator The address repaying the borrow and seizing collateral\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     */\\r\\n    function liquidateBorrowFresh(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 repayAmount,\\r\\n        CTokenInterface cTokenCollateral\\r\\n    ) internal {\\r\\n        /* Fail if liquidate not allowed */\\r\\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\\r\\n            address(this),\\r\\n            address(cTokenCollateral),\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert LiquidateComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert LiquidateFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Verify cTokenCollateral market's block number equals current block number */\\r\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\r\\n            revert LiquidateCollateralFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            revert LiquidateLiquidatorIsBorrower();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = 0 */\\r\\n        if (repayAmount == 0) {\\r\\n            revert LiquidateCloseAmountIsZero();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = -1 */\\r\\n        if (repayAmount == type(uint256).max) {\\r\\n            revert LiquidateCloseAmountIsUintMax();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayBorrow fails */\\r\\n        uint256 actualRepayAmount = repayBorrowFresh(\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We calculate the number of collateral tokens that will be seized */\\r\\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\\r\\n            .liquidateCalculateSeizeTokens(\\r\\n                address(this),\\r\\n                address(cTokenCollateral),\\r\\n                actualRepayAmount\\r\\n            );\\r\\n        require(\\r\\n            amountSeizeError == NO_ERROR,\\r\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\"\\r\\n        );\\r\\n\\r\\n        /* Revert if borrower collateral token balance < seizeTokens */\\r\\n        require(\\r\\n            cTokenCollateral.balanceOf(borrower) >= seizeTokens,\\r\\n            \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\"\\r\\n        );\\r\\n\\r\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\r\\n        if (address(cTokenCollateral) == address(this)) {\\r\\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\\r\\n        } else {\\r\\n            require(\\r\\n                cTokenCollateral.seize(liquidator, borrower, seizeTokens) ==\\r\\n                    NO_ERROR,\\r\\n                \\\"token seizure failed\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        /* We emit a LiquidateBorrow event */\\r\\n        emit LiquidateBorrow(\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            actualRepayAmount,\\r\\n            address(cTokenCollateral),\\r\\n            seizeTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\r\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seize(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 seizeTokens\\r\\n    ) external override nonReentrant returns (uint256) {\\r\\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\r\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\r\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     */\\r\\n    function seizeInternal(\\r\\n        address seizerToken,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 seizeTokens\\r\\n    ) internal {\\r\\n        /* Fail if seize not allowed */\\r\\n        uint256 allowed = comptroller.seizeAllowed(\\r\\n            address(this),\\r\\n            seizerToken,\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            seizeTokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert LiquidateSeizeComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            revert LiquidateSeizeLiquidatorIsBorrower();\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\r\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\r\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\r\\n         */\\r\\n        uint256 protocolSeizeTokens = mul_(\\r\\n            seizeTokens,\\r\\n            Exp({mantissa: protocolSeizeShareMantissa})\\r\\n        );\\r\\n        uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n        uint256 protocolSeizeAmount = mul_ScalarTruncate(\\r\\n            exchangeRate,\\r\\n            protocolSeizeTokens\\r\\n        );\\r\\n        uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the calculated values into storage */\\r\\n        totalReserves = totalReservesNew;\\r\\n        totalSupply = totalSupply - protocolSeizeTokens;\\r\\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\r\\n        accountTokens[liquidator] =\\r\\n            accountTokens[liquidator] +\\r\\n            liquidatorSeizeTokens;\\r\\n\\r\\n        /* Emit a Transfer event */\\r\\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\r\\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\\r\\n        emit ReservesAdded(\\r\\n            address(this),\\r\\n            protocolSeizeAmount,\\r\\n            totalReservesNew\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n     * @param newPendingAdmin New pending admin.\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setPendingAdmin(address payable newPendingAdmin)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetPendingAdminOwnerCheck();\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n     * @dev Admin function for pending admin to accept role and update admin\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _acceptAdmin() external override returns (uint256) {\\r\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\r\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\r\\n            revert AcceptAdminPendingAdminCheck();\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = payable(address(0));\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new comptroller for the market\\r\\n     * @dev Admin function to set a new comptroller\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setComptroller(ComptrollerInterface newComptroller)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetComptrollerOwnerCheck();\\r\\n        }\\r\\n\\r\\n        ComptrollerInterface oldComptroller = comptroller;\\r\\n        // Ensure invoke comptroller.isComptroller() returns true\\r\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set market's comptroller to newComptroller\\r\\n        comptroller = newComptroller;\\r\\n\\r\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\r\\n        emit NewComptroller(oldComptroller, newComptroller);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\r\\n     * @dev Admin function to accrue interest and set a new reserve factor\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\r\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\r\\n     * @dev Admin function to set a new reserve factor\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetReserveFactorAdminCheck();\\r\\n        }\\r\\n\\r\\n        // Verify market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert SetReserveFactorFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\r\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\r\\n            revert SetReserveFactorBoundsCheck();\\r\\n        }\\r\\n\\r\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\r\\n        reserveFactorMantissa = newReserveFactorMantissa;\\r\\n\\r\\n        emit NewReserveFactor(\\r\\n            oldReserveFactorMantissa,\\r\\n            newReserveFactorMantissa\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReservesInternal(uint256 addAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n\\r\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\r\\n        _addReservesFresh(addAmount);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add reserves by transferring from caller\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\r\\n     */\\r\\n    function _addReservesFresh(uint256 addAmount)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        // totalReserves + actualAddAmount\\r\\n        uint256 totalReservesNew;\\r\\n        uint256 actualAddAmount;\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert AddReservesFactorFreshCheck(actualAddAmount);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the caller and the addAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional addAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *  it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n\\r\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\r\\n\\r\\n        totalReservesNew = totalReserves + actualAddAmount;\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\r\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\r\\n\\r\\n        /* Return (NO_ERROR, actualAddAmount) */\\r\\n        return (NO_ERROR, actualAddAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReserves(uint256 reduceAmount)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\r\\n        return _reduceReservesFresh(reduceAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces reserves by transferring to admin\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReservesFresh(uint256 reduceAmount)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // totalReserves - reduceAmount\\r\\n        uint256 totalReservesNew;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert ReduceReservesAdminCheck();\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert ReduceReservesFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() < reduceAmount) {\\r\\n            revert ReduceReservesCashNotAvailable();\\r\\n        }\\r\\n\\r\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\r\\n        if (reduceAmount > totalReserves) {\\r\\n            revert ReduceReservesCashValidation();\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        totalReservesNew = totalReserves - reduceAmount;\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n        doTransferOut(admin, reduceAmount);\\r\\n\\r\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\r\\n     * @dev Admin function to accrue interest and update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\r\\n        return _setInterestRateModelFresh(newInterestRateModel);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\r\\n     * @dev Admin function to update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Used to store old model for use in the event that is emitted on success\\r\\n        InterestRateModel oldInterestRateModel;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetInterestRateModelOwnerCheck();\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert SetInterestRateModelFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Track the market's current interest rate model\\r\\n        oldInterestRateModel = interestRateModel;\\r\\n\\r\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\r\\n        require(\\r\\n            newInterestRateModel.isInterestRateModel(),\\r\\n            \\\"marker method returned false\\\"\\r\\n        );\\r\\n\\r\\n        // Set the interest rate model to newInterestRateModel\\r\\n        interestRateModel = newInterestRateModel;\\r\\n\\r\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\r\\n        emit NewMarketInterestRateModel(\\r\\n            oldInterestRateModel,\\r\\n            newInterestRateModel\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying owned by this contract\\r\\n     */\\r\\n    function getCashPrior() internal view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\r\\n     *  This may revert due to insufficient balance or insufficient allowance.\\r\\n     */\\r\\n    function doTransferIn(address from, uint256 amount)\\r\\n        internal\\r\\n        virtual\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\r\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\r\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\\r\\n\\r\\n    /*** Reentrancy Guard ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x17f98706dda2550609f3ad1a0f587b42dafd4ef6e2fc294b29d86eb84baf6444\",\"license\":\"BSD-3-Clause\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\n\\r\\ncontract CTokenStorage {\\r\\n    /**\\r\\n     * @dev Guard variable for re-entrancy checks\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token name for this token\\r\\n     */\\r\\n    string public name;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token symbol for this token\\r\\n     */\\r\\n    string public symbol;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token decimals for this token\\r\\n     */\\r\\n    uint8 public decimals;\\r\\n\\r\\n    // Maximum borrow rate that can ever be applied (.00004% / block)\\r\\n    uint internal constant borrowRateMaxMantissa = 0.00004e16;\\r\\n\\r\\n    // Maximum fraction of interest that can be set aside for reserves\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address payable public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract which oversees inter-cToken operations\\r\\n     */\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /**\\r\\n     * @notice Model which tells what the current interest rate should be\\r\\n     */\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for reserves\\r\\n     */\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Block number that interest was last accrued at\\r\\n     */\\r\\n    uint public accrualBlockNumber;\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n     */\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n     */\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of reserves of the underlying held in this market\\r\\n     */\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of tokens in circulation\\r\\n     */\\r\\n    uint public totalSupply;\\r\\n\\r\\n    // Official record of token balances for each account\\r\\n    mapping (address => uint) internal accountTokens;\\r\\n\\r\\n    // Approved token transfer amounts on behalf of others\\r\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    // Mapping of account addresses to outstanding borrow balances\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Share of seized collateral that is added to reserves\\r\\n     */\\r\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\r\\n}\\r\\n\\r\\nabstract contract CTokenInterface is CTokenStorage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a CToken contract (for inspection)\\r\\n     */\\r\\n    bool public constant isCToken = true;\\r\\n\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interest is accrued\\r\\n     */\\r\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted\\r\\n     */\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed\\r\\n     */\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when underlying is borrowed\\r\\n     */\\r\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is repaid\\r\\n     */\\r\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is liquidated\\r\\n     */\\r\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\r\\n\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is changed\\r\\n     */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n     */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when comptroller is changed\\r\\n     */\\r\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interestRateModel is changed\\r\\n     */\\r\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserve factor is changed\\r\\n     */\\r\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are added\\r\\n     */\\r\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are reduced\\r\\n     */\\r\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Transfer event\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Approval event\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\r\\n    function approve(address spender, uint amount) virtual external returns (bool);\\r\\n    function allowance(address owner, address spender) virtual external view returns (uint);\\r\\n    function balanceOf(address owner) virtual external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\r\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() virtual external view returns (uint);\\r\\n    function supplyRatePerBlock() virtual external view returns (uint);\\r\\n    function totalBorrowsCurrent() virtual external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\r\\n    function borrowBalanceStored(address account) virtual external view returns (uint);\\r\\n    function exchangeRateCurrent() virtual external returns (uint);\\r\\n    function exchangeRateStored() virtual external view returns (uint);\\r\\n    function getCash() virtual external view returns (uint);\\r\\n    function accrueInterest() virtual external returns (uint);\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\\r\\n    function _acceptAdmin() virtual external returns (uint);\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) virtual external returns (uint);\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual external returns (uint);\\r\\n}\\r\\n\\r\\ncontract CErc20Storage {\\r\\n    /**\\r\\n     * @notice Underlying asset for this CToken\\r\\n     */\\r\\n    address public underlying;\\r\\n}\\r\\n\\r\\nabstract contract CErc20Interface is CErc20Storage {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) virtual external returns (uint);\\r\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\r\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\r\\n    function sweepToken(EIP20NonStandardInterface token) virtual external;\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _addReserves(uint addAmount) virtual external returns (uint);\\r\\n}\\r\\n\\r\\ncontract CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Implementation address for this contract\\r\\n     */\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\nabstract contract CDelegatorInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Emitted when implementation is changed\\r\\n     */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual external;\\r\\n}\\r\\n\\r\\nabstract contract CDelegateInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) virtual external;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() virtual external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8a954ad43ef40d3ef7f3b0cc0786e1fb346a8cbed0c7e760d83ab796bbae0a1\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\nimport \\\"./Unitroller.sol\\\";\\r\\nimport \\\"./Governance/Comp.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound's Comptroller Contract\\r\\n * @author Compound\\r\\n */\\r\\ncontract Comptroller is\\r\\n    ComptrollerV8Storage,\\r\\n    ComptrollerInterface,\\r\\n    ComptrollerErrorReporter,\\r\\n    ExponentialNoError\\r\\n{\\r\\n    /// @notice Emitted when an admin supports a market\\r\\n    event MarketListed(CToken cToken);\\r\\n\\r\\n    /// @notice Emitted when an account enters a market\\r\\n    event MarketEntered(CToken cToken, address account);\\r\\n\\r\\n    /// @notice Emitted when an account exits a market\\r\\n    event MarketExited(CToken cToken, address account);\\r\\n\\r\\n    /// @notice Emitted when close factor is changed by admin\\r\\n    event NewCloseFactor(\\r\\n        uint256 oldCloseFactorMantissa,\\r\\n        uint256 newCloseFactorMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when a collateral factor is changed by admin\\r\\n    event NewCollateralFactor(\\r\\n        CToken cToken,\\r\\n        uint256 oldCollateralFactorMantissa,\\r\\n        uint256 newCollateralFactorMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when liquidation incentive is changed by admin\\r\\n    event NewLiquidationIncentive(\\r\\n        uint256 oldLiquidationIncentiveMantissa,\\r\\n        uint256 newLiquidationIncentiveMantissa\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when price oracle is changed\\r\\n    event NewPriceOracle(\\r\\n        PriceOracle oldPriceOracle,\\r\\n        PriceOracle newPriceOracle\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when pause guardian is changed\\r\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\r\\n\\r\\n    /// @notice Emitted when an action is paused globally\\r\\n    event ActionPaused(string action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when an action is paused on a market\\r\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when a new borrow-side COMP speed is calculated for a market\\r\\n    event CompBorrowSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\r\\n\\r\\n    /// @notice Emitted when a new supply-side COMP speed is calculated for a market\\r\\n    event CompSupplySpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\r\\n\\r\\n    /// @notice Emitted when a new COMP speed is set for a contributor\\r\\n    event ContributorCompSpeedUpdated(\\r\\n        address indexed contributor,\\r\\n        uint256 newSpeed\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when COMP is distributed to a supplier\\r\\n    event DistributedSupplierComp(\\r\\n        CToken indexed cToken,\\r\\n        address indexed supplier,\\r\\n        uint256 compDelta,\\r\\n        uint256 compSupplyIndex\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when COMP is distributed to a borrower\\r\\n    event DistributedBorrowerComp(\\r\\n        CToken indexed cToken,\\r\\n        address indexed borrower,\\r\\n        uint256 compDelta,\\r\\n        uint256 compBorrowIndex\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when borrow cap for a cToken is changed\\r\\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\\r\\n\\r\\n    /// @notice Emitted when supply cap for a cToken is changed\\r\\n    event NewSupplyCap(CToken indexed cToken, uint256 newSupplyCap);\\r\\n\\r\\n    /// @notice Emitted when borrow cap guardian is changed\\r\\n    event NewBorrowCapGuardian(\\r\\n        address oldBorrowCapGuardian,\\r\\n        address newBorrowCapGuardian\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when supply cap guardian is changed\\r\\n    event NewSupplyCapGuardian(\\r\\n        address oldSupplyCapGuardian,\\r\\n        address newSupplyCapGuardian\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when COMP is granted by admin\\r\\n    event CompGranted(address recipient, uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when COMP accrued for a user has been manually adjusted.\\r\\n    event CompAccruedAdjusted(\\r\\n        address indexed user,\\r\\n        uint256 oldCompAccrued,\\r\\n        uint256 newCompAccrued\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when COMP receivable for a user has been updated.\\r\\n    event CompReceivableUpdated(\\r\\n        address indexed user,\\r\\n        uint256 oldCompReceivable,\\r\\n        uint256 newCompReceivable\\r\\n    );\\r\\n\\r\\n    /// @notice The initial COMP index for a market\\r\\n    uint224 public constant compInitialIndex = 1e36;\\r\\n\\r\\n    // closeFactorMantissa must be strictly greater than this value\\r\\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\r\\n\\r\\n    // closeFactorMantissa must not exceed this value\\r\\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    // No collateralFactorMantissa may exceed this value\\r\\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    constructor() {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the assets an account has entered\\r\\n     * @param account The address of the account to pull assets for\\r\\n     * @return A dynamic list with the assets the account has entered\\r\\n     */\\r\\n    function getAssetsIn(\\r\\n        address account\\r\\n    ) external view returns (CToken[] memory) {\\r\\n        CToken[] memory assetsIn = accountAssets[account];\\r\\n\\r\\n        return assetsIn;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the given account is entered in the given asset\\r\\n     * @param account The address of the account to check\\r\\n     * @param cToken The cToken to check\\r\\n     * @return True if the account is in the asset, otherwise false.\\r\\n     */\\r\\n    function checkMembership(\\r\\n        address account,\\r\\n        CToken cToken\\r\\n    ) external view returns (bool) {\\r\\n        return markets[address(cToken)].accountMembership[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add assets to be included in account liquidity calculation\\r\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\r\\n     * @return Success indicator for whether each corresponding market was entered\\r\\n     */\\r\\n    function enterMarkets(\\r\\n        address[] memory cTokens\\r\\n    ) public override returns (uint256[] memory) {\\r\\n        uint256 len = cTokens.length;\\r\\n\\r\\n        uint256[] memory results = new uint256[](len);\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            CToken cToken = CToken(cTokens[i]);\\r\\n\\r\\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\r\\n     * @param cToken The market to enter\\r\\n     * @param borrower The address of the account to modify\\r\\n     * @return Success indicator for whether the market was entered\\r\\n     */\\r\\n    function addToMarketInternal(\\r\\n        CToken cToken,\\r\\n        address borrower\\r\\n    ) internal returns (Error) {\\r\\n        Market storage marketToJoin = markets[address(cToken)];\\r\\n\\r\\n        if (!marketToJoin.isListed) {\\r\\n            // market is not listed, cannot join\\r\\n            return Error.MARKET_NOT_LISTED;\\r\\n        }\\r\\n\\r\\n        if (marketToJoin.accountMembership[borrower] == true) {\\r\\n            // already joined\\r\\n            return Error.NO_ERROR;\\r\\n        }\\r\\n\\r\\n        // survived the gauntlet, add to list\\r\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\r\\n        //  this avoids having to iterate through the list for the most common use cases\\r\\n        //  that is, only when we need to perform liquidity checks\\r\\n        //  and not whenever we want to check if an account is in a particular market\\r\\n        marketToJoin.accountMembership[borrower] = true;\\r\\n        accountAssets[borrower].push(cToken);\\r\\n\\r\\n        emit MarketEntered(cToken, borrower);\\r\\n\\r\\n        return Error.NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes asset from sender's account liquidity calculation\\r\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\r\\n     *  or be providing necessary collateral for an outstanding borrow.\\r\\n     * @param cTokenAddress The address of the asset to be removed\\r\\n     * @return Whether or not the account successfully exited the market\\r\\n     */\\r\\n    function exitMarket(\\r\\n        address cTokenAddress\\r\\n    ) external override returns (uint256) {\\r\\n        CToken cToken = CToken(cTokenAddress);\\r\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\r\\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\\r\\n            .getAccountSnapshot(msg.sender);\\r\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\r\\n\\r\\n        /* Fail if the sender has a borrow balance */\\r\\n        if (amountOwed != 0) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.NONZERO_BORROW_BALANCE,\\r\\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\\r\\n                );\\r\\n        }\\r\\n\\r\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\r\\n        uint256 allowed = redeemAllowedInternal(\\r\\n            cTokenAddress,\\r\\n            msg.sender,\\r\\n            tokensHeld\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            return\\r\\n                failOpaque(\\r\\n                    Error.REJECTION,\\r\\n                    FailureInfo.EXIT_MARKET_REJECTION,\\r\\n                    allowed\\r\\n                );\\r\\n        }\\r\\n\\r\\n        Market storage marketToExit = markets[address(cToken)];\\r\\n\\r\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\r\\n        if (!marketToExit.accountMembership[msg.sender]) {\\r\\n            return uint256(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Set cToken account membership to false */\\r\\n        delete marketToExit.accountMembership[msg.sender];\\r\\n\\r\\n        /* Delete cToken from the account\\u2019s list of assets */\\r\\n        // load into memory for faster iteration\\r\\n        CToken[] memory userAssetList = accountAssets[msg.sender];\\r\\n        uint256 len = userAssetList.length;\\r\\n        uint256 assetIndex = len;\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            if (userAssetList[i] == cToken) {\\r\\n                assetIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\r\\n        assert(assetIndex < len);\\r\\n\\r\\n        // copy last item in list to location of item to be removed, reduce length by 1\\r\\n        CToken[] storage storedList = accountAssets[msg.sender];\\r\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\r\\n        storedList.pop();\\r\\n\\r\\n        emit MarketExited(cToken, msg.sender);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\r\\n     * @param cToken The market to verify the mint against\\r\\n     * @param minter The account which would get the minted tokens\\r\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\r\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function mintAllowed(\\r\\n        address cToken,\\r\\n        address minter,\\r\\n        uint256 mintAmount\\r\\n    ) external override returns (uint256) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\r\\n\\r\\n        // Shh - currently unused\\r\\n        minter;\\r\\n        mintAmount;\\r\\n\\r\\n        if (!markets[cToken].isListed) {\\r\\n            return uint256(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateCompSupplyIndex(cToken);\\r\\n        distributeSupplierComp(cToken, minter);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset being minted\\r\\n     * @param minter The address minting the tokens\\r\\n     * @param actualMintAmount The amount of the underlying asset being minted\\r\\n     * @param mintTokens The number of tokens being minted\\r\\n     */\\r\\n    function mintVerify(\\r\\n        address cToken,\\r\\n        address minter,\\r\\n        uint256 actualMintAmount,\\r\\n        uint256 mintTokens\\r\\n    ) external override {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        minter;\\r\\n        actualMintAmount;\\r\\n        mintTokens;\\r\\n\\r\\n        uint256 supplyCap = supplyCaps[cToken];\\r\\n        // Supply cap of 0 corresponds to unlimited borrowing\\r\\n        if (supplyCap != 0) {\\r\\n            uint256 totalSupply = CToken(cToken).totalSupply();\\r\\n            Exp memory exchangeRate = Exp({\\r\\n                mantissa: CToken(cToken).exchangeRateStored()\\r\\n            });\\r\\n            uint256 totalAmount = mul_ScalarTruncate(exchangeRate, totalSupply);\\r\\n            require(totalAmount <= supplyCap, \\\"market supply cap reached\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\r\\n     * @param cToken The market to verify the redeem against\\r\\n     * @param redeemer The account which would redeem the tokens\\r\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\r\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function redeemAllowed(\\r\\n        address cToken,\\r\\n        address redeemer,\\r\\n        uint256 redeemTokens\\r\\n    ) external override returns (uint256) {\\r\\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\r\\n        if (allowed != uint256(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateCompSupplyIndex(cToken);\\r\\n        distributeSupplierComp(cToken, redeemer);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function redeemAllowedInternal(\\r\\n        address cToken,\\r\\n        address redeemer,\\r\\n        uint256 redeemTokens\\r\\n    ) internal view returns (uint256) {\\r\\n        if (!markets[cToken].isListed) {\\r\\n            return uint256(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\r\\n        if (!markets[cToken].accountMembership[redeemer]) {\\r\\n            return uint256(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\r\\n        (\\r\\n            Error err,\\r\\n            ,\\r\\n            uint256 shortfall\\r\\n        ) = getHypotheticalAccountLiquidityInternal(\\r\\n                redeemer,\\r\\n                CToken(cToken),\\r\\n                redeemTokens,\\r\\n                0\\r\\n            );\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint256(err);\\r\\n        }\\r\\n        if (shortfall > 0) {\\r\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset being redeemed\\r\\n     * @param redeemer The address redeeming the tokens\\r\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\r\\n     * @param redeemTokens The number of tokens being redeemed\\r\\n     */\\r\\n    function redeemVerify(\\r\\n        address cToken,\\r\\n        address redeemer,\\r\\n        uint256 redeemAmount,\\r\\n        uint256 redeemTokens\\r\\n    ) external override {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        redeemer;\\r\\n\\r\\n        // Require tokens is zero or amount is also zero\\r\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\r\\n            revert(\\\"redeemTokens zero\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\r\\n     * @param cToken The market to verify the borrow against\\r\\n     * @param borrower The account which would borrow the asset\\r\\n     * @param borrowAmount The amount of underlying the account would borrow\\r\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function borrowAllowed(\\r\\n        address cToken,\\r\\n        address borrower,\\r\\n        uint256 borrowAmount\\r\\n    ) external override returns (uint256) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\r\\n\\r\\n        if (!markets[cToken].isListed) {\\r\\n            return uint256(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        if (!markets[cToken].accountMembership[borrower]) {\\r\\n            // only cTokens may call borrowAllowed if borrower not in market\\r\\n            require(msg.sender == cToken, \\\"sender must be cToken\\\");\\r\\n\\r\\n            // attempt to add borrower to the market\\r\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\r\\n            if (err != Error.NO_ERROR) {\\r\\n                return uint256(err);\\r\\n            }\\r\\n\\r\\n            // it should be impossible to break the important invariant\\r\\n            assert(markets[cToken].accountMembership[borrower]);\\r\\n        }\\r\\n\\r\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\r\\n            return uint256(Error.PRICE_ERROR);\\r\\n        }\\r\\n\\r\\n        uint256 borrowCap = borrowCaps[cToken];\\r\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\r\\n        if (borrowCap != 0) {\\r\\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\\r\\n            uint256 nextTotalBorrows = add_(totalBorrows, borrowAmount);\\r\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\r\\n        }\\r\\n\\r\\n        (\\r\\n            Error err,\\r\\n            ,\\r\\n            uint256 shortfall\\r\\n        ) = getHypotheticalAccountLiquidityInternal(\\r\\n                borrower,\\r\\n                CToken(cToken),\\r\\n                0,\\r\\n                borrowAmount\\r\\n            );\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint256(err);\\r\\n        }\\r\\n        if (shortfall > 0) {\\r\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\r\\n        updateCompBorrowIndex(cToken, borrowIndex);\\r\\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset whose underlying is being borrowed\\r\\n     * @param borrower The address borrowing the underlying\\r\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\r\\n     */\\r\\n    function borrowVerify(\\r\\n        address cToken,\\r\\n        address borrower,\\r\\n        uint256 borrowAmount\\r\\n    ) external override {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        borrower;\\r\\n        borrowAmount;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\r\\n     * @param cToken The market to verify the repay against\\r\\n     * @param payer The account which would repay the asset\\r\\n     * @param borrower The account which would borrowed the asset\\r\\n     * @param repayAmount The amount of the underlying asset the account would repay\\r\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function repayBorrowAllowed(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint256 repayAmount\\r\\n    ) external override returns (uint256) {\\r\\n        // Shh - currently unused\\r\\n        payer;\\r\\n        borrower;\\r\\n        repayAmount;\\r\\n\\r\\n        if (!markets[cToken].isListed) {\\r\\n            return uint256(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\r\\n        updateCompBorrowIndex(cToken, borrowIndex);\\r\\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset being repaid\\r\\n     * @param payer The address repaying the borrow\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param actualRepayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function repayBorrowVerify(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint256 actualRepayAmount,\\r\\n        uint256 borrowerIndex\\r\\n    ) external override {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        payer;\\r\\n        borrower;\\r\\n        actualRepayAmount;\\r\\n        borrowerIndex;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the liquidation should be allowed to occur\\r\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param repayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function liquidateBorrowAllowed(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 repayAmount\\r\\n    ) external override returns (uint256) {\\r\\n        // Shh - currently unused\\r\\n        liquidator;\\r\\n\\r\\n        if (\\r\\n            !markets[cTokenBorrowed].isListed ||\\r\\n            !markets[cTokenCollateral].isListed\\r\\n        ) {\\r\\n            return uint256(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\\r\\n            borrower\\r\\n        );\\r\\n\\r\\n        /* allow accounts to be liquidated if the market is deprecated */\\r\\n        if (isDeprecated(CToken(cTokenBorrowed))) {\\r\\n            require(\\r\\n                borrowBalance >= repayAmount,\\r\\n                \\\"Can not repay more than the total borrow\\\"\\r\\n            );\\r\\n        } else {\\r\\n            /* The borrower must have shortfall in order to be liquidatable */\\r\\n            (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\\r\\n                borrower\\r\\n            );\\r\\n            if (err != Error.NO_ERROR) {\\r\\n                return uint256(err);\\r\\n            }\\r\\n\\r\\n            if (shortfall == 0) {\\r\\n                return uint256(Error.INSUFFICIENT_SHORTFALL);\\r\\n            }\\r\\n\\r\\n            /* The liquidator may not repay more than what is allowed by the closeFactor */\\r\\n            uint256 maxClose = mul_ScalarTruncate(\\r\\n                Exp({mantissa: closeFactorMantissa}),\\r\\n                borrowBalance\\r\\n            );\\r\\n            if (repayAmount > maxClose) {\\r\\n                return uint256(Error.TOO_MUCH_REPAY);\\r\\n            }\\r\\n        }\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\r\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param actualRepayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function liquidateBorrowVerify(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 actualRepayAmount,\\r\\n        uint256 seizeTokens\\r\\n    ) external override {\\r\\n        // Shh - currently unused\\r\\n        cTokenBorrowed;\\r\\n        cTokenCollateral;\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        actualRepayAmount;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the seizing of assets should be allowed to occur\\r\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeAllowed(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 seizeTokens\\r\\n    ) external override returns (uint256) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\r\\n\\r\\n        // Shh - currently unused\\r\\n        seizeTokens;\\r\\n\\r\\n        if (\\r\\n            !markets[cTokenCollateral].isListed ||\\r\\n            !markets[cTokenBorrowed].isListed\\r\\n        ) {\\r\\n            return uint256(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            CToken(cTokenCollateral).comptroller() !=\\r\\n            CToken(cTokenBorrowed).comptroller()\\r\\n        ) {\\r\\n            return uint256(Error.COMPTROLLER_MISMATCH);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateCompSupplyIndex(cTokenCollateral);\\r\\n        distributeSupplierComp(cTokenCollateral, borrower);\\r\\n        distributeSupplierComp(cTokenCollateral, liquidator);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\r\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeVerify(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 seizeTokens\\r\\n    ) external override {\\r\\n        // Shh - currently unused\\r\\n        cTokenCollateral;\\r\\n        cTokenBorrowed;\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\r\\n     * @param cToken The market to verify the transfer against\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of cTokens to transfer\\r\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function transferAllowed(\\r\\n        address cToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 transferTokens\\r\\n    ) external override returns (uint256) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\r\\n\\r\\n        // Currently the only consideration is whether or not\\r\\n        //  the src is allowed to redeem this many tokens\\r\\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\\r\\n        if (allowed != uint256(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateCompSupplyIndex(cToken);\\r\\n        distributeSupplierComp(cToken, src);\\r\\n        distributeSupplierComp(cToken, dst);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset being transferred\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of cTokens to transfer\\r\\n     */\\r\\n    function transferVerify(\\r\\n        address cToken,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 transferTokens\\r\\n    ) external override {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        src;\\r\\n        dst;\\r\\n        transferTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\r\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\r\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\r\\n     */\\r\\n    struct AccountLiquidityLocalVars {\\r\\n        uint256 sumCollateral;\\r\\n        uint256 sumBorrowPlusEffects;\\r\\n        uint256 cTokenBalance;\\r\\n        uint256 borrowBalance;\\r\\n        uint256 exchangeRateMantissa;\\r\\n        uint256 oraclePriceMantissa;\\r\\n        Exp collateralFactor;\\r\\n        Exp exchangeRate;\\r\\n        Exp oraclePrice;\\r\\n        Exp tokensToDenom;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the current account liquidity wrt collateral requirements\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                account liquidity in excess of collateral requirements,\\r\\n     *          account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getAccountLiquidity(\\r\\n        address account\\r\\n    ) public view returns (uint256, uint256, uint256) {\\r\\n        (\\r\\n            Error err,\\r\\n            uint256 liquidity,\\r\\n            uint256 shortfall\\r\\n        ) = getHypotheticalAccountLiquidityInternal(\\r\\n                account,\\r\\n                CToken(address(0)),\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n\\r\\n        return (uint256(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the current account liquidity wrt collateral requirements\\r\\n     * @return (possible error code,\\r\\n                account liquidity in excess of collateral requirements,\\r\\n     *          account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getAccountLiquidityInternal(\\r\\n        address account\\r\\n    ) internal view returns (Error, uint256, uint256) {\\r\\n        return\\r\\n            getHypotheticalAccountLiquidityInternal(\\r\\n                account,\\r\\n                CToken(address(0)),\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address account,\\r\\n        address cTokenModify,\\r\\n        uint256 redeemTokens,\\r\\n        uint256 borrowAmount\\r\\n    ) public view returns (uint256, uint256, uint256) {\\r\\n        (\\r\\n            Error err,\\r\\n            uint256 liquidity,\\r\\n            uint256 shortfall\\r\\n        ) = getHypotheticalAccountLiquidityInternal(\\r\\n                account,\\r\\n                CToken(cTokenModify),\\r\\n                redeemTokens,\\r\\n                borrowAmount\\r\\n            );\\r\\n        return (uint256(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\r\\n     *  without calculating accumulated interest.\\r\\n     * @return (possible error code,\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidityInternal(\\r\\n        address account,\\r\\n        CToken cTokenModify,\\r\\n        uint256 redeemTokens,\\r\\n        uint256 borrowAmount\\r\\n    ) internal view returns (Error, uint256, uint256) {\\r\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\r\\n        uint256 oErr;\\r\\n\\r\\n        // For each asset the account is in\\r\\n        CToken[] memory assets = accountAssets[account];\\r\\n        for (uint256 i = 0; i < assets.length; i++) {\\r\\n            CToken asset = assets[i];\\r\\n\\r\\n            // Read the balances and exchange rate from the cToken\\r\\n            (\\r\\n                oErr,\\r\\n                vars.cTokenBalance,\\r\\n                vars.borrowBalance,\\r\\n                vars.exchangeRateMantissa\\r\\n            ) = asset.getAccountSnapshot(account);\\r\\n            if (oErr != 0) {\\r\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\r\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\r\\n            }\\r\\n            vars.collateralFactor = Exp({\\r\\n                mantissa: markets[address(asset)].collateralFactorMantissa\\r\\n            });\\r\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\r\\n\\r\\n            // Get the normalized price of the asset\\r\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\r\\n            if (vars.oraclePriceMantissa == 0) {\\r\\n                return (Error.PRICE_ERROR, 0, 0);\\r\\n            }\\r\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\r\\n\\r\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\r\\n            vars.tokensToDenom = mul_(\\r\\n                mul_(vars.collateralFactor, vars.exchangeRate),\\r\\n                vars.oraclePrice\\r\\n            );\\r\\n\\r\\n            // sumCollateral += tokensToDenom * cTokenBalance\\r\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\\r\\n                vars.tokensToDenom,\\r\\n                vars.cTokenBalance,\\r\\n                vars.sumCollateral\\r\\n            );\\r\\n\\r\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\r\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\r\\n                vars.oraclePrice,\\r\\n                vars.borrowBalance,\\r\\n                vars.sumBorrowPlusEffects\\r\\n            );\\r\\n\\r\\n            // Calculate effects of interacting with cTokenModify\\r\\n            if (asset == cTokenModify) {\\r\\n                // redeem effect\\r\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\r\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\r\\n                    vars.tokensToDenom,\\r\\n                    redeemTokens,\\r\\n                    vars.sumBorrowPlusEffects\\r\\n                );\\r\\n\\r\\n                // borrow effect\\r\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\r\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\r\\n                    vars.oraclePrice,\\r\\n                    borrowAmount,\\r\\n                    vars.sumBorrowPlusEffects\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // These are safe, as the underflow condition is checked first\\r\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\r\\n            return (\\r\\n                Error.NO_ERROR,\\r\\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\\r\\n                0\\r\\n            );\\r\\n        } else {\\r\\n            return (\\r\\n                Error.NO_ERROR,\\r\\n                0,\\r\\n                vars.sumBorrowPlusEffects - vars.sumCollateral\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\r\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\r\\n     * @param cTokenBorrowed The address of the borrowed cToken\\r\\n     * @param cTokenCollateral The address of the collateral cToken\\r\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\r\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\r\\n     */\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        uint256 actualRepayAmount\\r\\n    ) external view override returns (uint256, uint256) {\\r\\n        /* Read oracle prices for borrowed and collateral markets */\\r\\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\\r\\n            CToken(cTokenBorrowed)\\r\\n        );\\r\\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\\r\\n            CToken(cTokenCollateral)\\r\\n        );\\r\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\r\\n            return (uint256(Error.PRICE_ERROR), 0);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\r\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\r\\n         *  seizeTokens = seizeAmount / exchangeRate\\r\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\r\\n         */\\r\\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\\r\\n            .exchangeRateStored(); // Note: reverts on error\\r\\n        uint256 seizeTokens;\\r\\n        Exp memory numerator;\\r\\n        Exp memory denominator;\\r\\n        Exp memory ratio;\\r\\n\\r\\n        numerator = mul_(\\r\\n            Exp({mantissa: liquidationIncentiveMantissa}),\\r\\n            Exp({mantissa: priceBorrowedMantissa})\\r\\n        );\\r\\n        denominator = mul_(\\r\\n            Exp({mantissa: priceCollateralMantissa}),\\r\\n            Exp({mantissa: exchangeRateMantissa})\\r\\n        );\\r\\n        ratio = div_(numerator, denominator);\\r\\n\\r\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\r\\n\\r\\n        return (uint256(Error.NO_ERROR), seizeTokens);\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new price oracle for the comptroller\\r\\n     * @dev Admin function to set a new price oracle\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Track the old oracle for the comptroller\\r\\n        PriceOracle oldOracle = oracle;\\r\\n\\r\\n        // Set comptroller's oracle to newOracle\\r\\n        oracle = newOracle;\\r\\n\\r\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\r\\n        emit NewPriceOracle(oldOracle, newOracle);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the closeFactor used when liquidating borrows\\r\\n     * @dev Admin function to set closeFactor\\r\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\r\\n     * @return uint 0=success, otherwise a failure\\r\\n     */\\r\\n    function _setCloseFactor(\\r\\n        uint256 newCloseFactorMantissa\\r\\n    ) external returns (uint256) {\\r\\n        // Check caller is admin\\r\\n        require(msg.sender == admin, \\\"only admin can set close factor\\\");\\r\\n\\r\\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\\r\\n        closeFactorMantissa = newCloseFactorMantissa;\\r\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the collateralFactor for a market\\r\\n     * @dev Admin function to set per-market collateralFactor\\r\\n     * @param cToken The market to set the factor on\\r\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\r\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n     */\\r\\n    function _setCollateralFactor(\\r\\n        CToken cToken,\\r\\n        uint256 newCollateralFactorMantissa\\r\\n    ) external returns (uint256) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Verify market is listed\\r\\n        Market storage market = markets[address(cToken)];\\r\\n        if (!market.isListed) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.MARKET_NOT_LISTED,\\r\\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\\r\\n                );\\r\\n        }\\r\\n\\r\\n        Exp memory newCollateralFactorExp = Exp({\\r\\n            mantissa: newCollateralFactorMantissa\\r\\n        });\\r\\n\\r\\n        // Check collateral factor <= 0.9\\r\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\r\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.INVALID_COLLATERAL_FACTOR,\\r\\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // If collateral factor != 0, fail if price == 0\\r\\n        if (\\r\\n            newCollateralFactorMantissa != 0 &&\\r\\n            oracle.getUnderlyingPrice(cToken) == 0\\r\\n        ) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.PRICE_ERROR,\\r\\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Set market's collateral factor to new collateral factor, remember old value\\r\\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\r\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\r\\n\\r\\n        // Emit event with asset, old collateral factor, and new collateral factor\\r\\n        emit NewCollateralFactor(\\r\\n            cToken,\\r\\n            oldCollateralFactorMantissa,\\r\\n            newCollateralFactorMantissa\\r\\n        );\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets liquidationIncentive\\r\\n     * @dev Admin function to set liquidationIncentive\\r\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\r\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n     */\\r\\n    function _setLiquidationIncentive(\\r\\n        uint256 newLiquidationIncentiveMantissa\\r\\n    ) external returns (uint256) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Save current value for use in log\\r\\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\r\\n\\r\\n        // Set liquidation incentive to new incentive\\r\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\r\\n\\r\\n        // Emit event with old incentive, new incentive\\r\\n        emit NewLiquidationIncentive(\\r\\n            oldLiquidationIncentiveMantissa,\\r\\n            newLiquidationIncentiveMantissa\\r\\n        );\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add the market to the markets mapping and set it as listed\\r\\n     * @dev Admin function to set isListed and add support for the market\\r\\n     * @param cToken The address of the market (token) to list\\r\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n     */\\r\\n    function _supportMarket(CToken cToken) external returns (uint256) {\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        if (markets[address(cToken)].isListed) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.MARKET_ALREADY_LISTED,\\r\\n                    FailureInfo.SUPPORT_MARKET_EXISTS\\r\\n                );\\r\\n        }\\r\\n\\r\\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\\r\\n\\r\\n        // Note that isComped is not in active use anymore\\r\\n        Market storage newMarket = markets[address(cToken)];\\r\\n        newMarket.isListed = true;\\r\\n        newMarket.isComped = false;\\r\\n        newMarket.collateralFactorMantissa = 0;\\r\\n\\r\\n        _addMarketInternal(address(cToken));\\r\\n        _initializeMarket(address(cToken));\\r\\n\\r\\n        emit MarketListed(cToken);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _addMarketInternal(address cToken) internal {\\r\\n        for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n            require(allMarkets[i] != CToken(cToken), \\\"market already added\\\");\\r\\n        }\\r\\n        allMarkets.push(CToken(cToken));\\r\\n    }\\r\\n\\r\\n    function _initializeMarket(address cToken) internal {\\r\\n        uint32 blockNumber = safe32(\\r\\n            getBlockNumber(),\\r\\n            \\\"block number exceeds 32 bits\\\"\\r\\n        );\\r\\n\\r\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\r\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\r\\n\\r\\n        /*\\r\\n         * Update market state indices\\r\\n         */\\r\\n        if (supplyState.index == 0) {\\r\\n            // Initialize supply state index with default value\\r\\n            supplyState.index = compInitialIndex;\\r\\n        }\\r\\n\\r\\n        if (borrowState.index == 0) {\\r\\n            // Initialize borrow state index with default value\\r\\n            borrowState.index = compInitialIndex;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * Update market state block numbers\\r\\n         */\\r\\n        supplyState.block = borrowState.block = blockNumber;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\r\\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\r\\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\r\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\r\\n     */\\r\\n    function _setMarketBorrowCaps(\\r\\n        CToken[] calldata cTokens,\\r\\n        uint256[] calldata newBorrowCaps\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == admin || msg.sender == borrowCapGuardian,\\r\\n            \\\"only admin or borrow cap guardian can set borrow caps\\\"\\r\\n        );\\r\\n\\r\\n        uint256 numMarkets = cTokens.length;\\r\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\r\\n\\r\\n        require(\\r\\n            numMarkets != 0 && numMarkets == numBorrowCaps,\\r\\n            \\\"invalid input\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < numMarkets; i++) {\\r\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\r\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the given supply caps for the given cToken markets. Supplying that brings total supply to or above supply cap will revert.\\r\\n     * @dev Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\r\\n     * @param cTokens The addresses of the markets (tokens) to change the supply caps for\\r\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\r\\n     */\\r\\n    function _setMarketSupplyCaps(\\r\\n        CToken[] calldata cTokens,\\r\\n        uint256[] calldata newSupplyCaps\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == admin || msg.sender == supplyCapGuardian,\\r\\n            \\\"only admin or supply cap guardian can set supply caps\\\"\\r\\n        );\\r\\n\\r\\n        uint256 numMarkets = cTokens.length;\\r\\n        uint256 numSupplyCaps = newSupplyCaps.length;\\r\\n\\r\\n        require(\\r\\n            numMarkets != 0 && numMarkets == numSupplyCaps,\\r\\n            \\\"invalid input\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < numMarkets; i++) {\\r\\n            supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\\r\\n            emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Borrow Cap Guardian\\r\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\r\\n     */\\r\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\r\\n        require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\r\\n\\r\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\r\\n        borrowCapGuardian = newBorrowCapGuardian;\\r\\n\\r\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\r\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Supply Cap Guardian\\r\\n     * @param newSupplyCapGuardian The address of the new Supply Cap Guardian\\r\\n     */\\r\\n    function _setSupplyCapGuardian(address newSupplyCapGuardian) external {\\r\\n        require(msg.sender == admin, \\\"only admin can set supply cap guardian\\\");\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldSupplyCapGuardian = supplyCapGuardian;\\r\\n\\r\\n        // Store supplyCapGuardian with value newSupplyCapGuardian\\r\\n        supplyCapGuardian = newSupplyCapGuardian;\\r\\n\\r\\n        // Emit NewSupplyCapGuardian(OldSupplyCapGuardian, NewSupplyCapGuardian)\\r\\n        emit NewSupplyCapGuardian(oldSupplyCapGuardian, newSupplyCapGuardian);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Pause Guardian\\r\\n     * @param newPauseGuardian The address of the new Pause Guardian\\r\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n     */\\r\\n    function _setPauseGuardian(\\r\\n        address newPauseGuardian\\r\\n    ) public returns (uint256) {\\r\\n        if (msg.sender != admin) {\\r\\n            return\\r\\n                fail(\\r\\n                    Error.UNAUTHORIZED,\\r\\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\\r\\n                );\\r\\n        }\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldPauseGuardian = pauseGuardian;\\r\\n\\r\\n        // Store pauseGuardian with value newPauseGuardian\\r\\n        pauseGuardian = newPauseGuardian;\\r\\n\\r\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\r\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\r\\n\\r\\n        return uint256(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\r\\n        require(\\r\\n            markets[address(cToken)].isListed,\\r\\n            \\\"cannot pause a market that is not listed\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == admin,\\r\\n            \\\"only pause guardian and admin can pause\\\"\\r\\n        );\\r\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        mintGuardianPaused[address(cToken)] = state;\\r\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\r\\n        require(\\r\\n            markets[address(cToken)].isListed,\\r\\n            \\\"cannot pause a market that is not listed\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == admin,\\r\\n            \\\"only pause guardian and admin can pause\\\"\\r\\n        );\\r\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        borrowGuardianPaused[address(cToken)] = state;\\r\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setTransferPaused(bool state) public returns (bool) {\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == admin,\\r\\n            \\\"only pause guardian and admin can pause\\\"\\r\\n        );\\r\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        transferGuardianPaused = state;\\r\\n        emit ActionPaused(\\\"Transfer\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setSeizePaused(bool state) public returns (bool) {\\r\\n        require(\\r\\n            msg.sender == pauseGuardian || msg.sender == admin,\\r\\n            \\\"only pause guardian and admin can pause\\\"\\r\\n        );\\r\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        seizeGuardianPaused = state;\\r\\n        emit ActionPaused(\\\"Seize\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _become(Unitroller unitroller) public {\\r\\n        require(\\r\\n            msg.sender == unitroller.admin(),\\r\\n            \\\"only unitroller admin can change brains\\\"\\r\\n        );\\r\\n        require(\\r\\n            unitroller._acceptImplementation() == 0,\\r\\n            \\\"change not authorized\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Delete this function after proposal 65 is executed\\r\\n    function fixBadAccruals(\\r\\n        address[] calldata affectedUsers,\\r\\n        uint256[] calldata amounts\\r\\n    ) external {\\r\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\"); // Only the timelock can call this function\\r\\n        require(\\r\\n            !proposal65FixExecuted,\\r\\n            \\\"Already executed this one-off function\\\"\\r\\n        ); // Require that this function is only called once\\r\\n        require(affectedUsers.length == amounts.length, \\\"Invalid input\\\");\\r\\n\\r\\n        // Loop variables\\r\\n        address user;\\r\\n        uint256 currentAccrual;\\r\\n        uint256 amountToSubtract;\\r\\n        uint256 newAccrual;\\r\\n\\r\\n        // Iterate through all affected users\\r\\n        for (uint256 i = 0; i < affectedUsers.length; ++i) {\\r\\n            user = affectedUsers[i];\\r\\n            currentAccrual = compAccrued[user];\\r\\n\\r\\n            amountToSubtract = amounts[i];\\r\\n\\r\\n            // The case where the user has claimed and received an incorrect amount of COMP.\\r\\n            // The user has less currently accrued than the amount they incorrectly received.\\r\\n            if (amountToSubtract > currentAccrual) {\\r\\n                // Amount of COMP the user owes the protocol\\r\\n                uint256 accountReceivable = amountToSubtract - currentAccrual; // Underflow safe since amountToSubtract > currentAccrual\\r\\n\\r\\n                uint256 oldReceivable = compReceivable[user];\\r\\n                uint256 newReceivable = add_(oldReceivable, accountReceivable);\\r\\n\\r\\n                // Accounting: record the COMP debt for the user\\r\\n                compReceivable[user] = newReceivable;\\r\\n\\r\\n                emit CompReceivableUpdated(user, oldReceivable, newReceivable);\\r\\n\\r\\n                amountToSubtract = currentAccrual;\\r\\n            }\\r\\n\\r\\n            if (amountToSubtract > 0) {\\r\\n                // Subtract the bad accrual amount from what they have accrued.\\r\\n                // Users will keep whatever they have correctly accrued.\\r\\n                compAccrued[user] = newAccrual = sub_(\\r\\n                    currentAccrual,\\r\\n                    amountToSubtract\\r\\n                );\\r\\n\\r\\n                emit CompAccruedAdjusted(user, currentAccrual, newAccrual);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        proposal65FixExecuted = true; // Makes it so that this function cannot be called again\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\r\\n     */\\r\\n    function adminOrInitializing() internal view returns (bool) {\\r\\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\\r\\n    }\\r\\n\\r\\n    /*** Comp Distribution ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP speed for a single market\\r\\n     * @param cToken The market whose COMP speed to update\\r\\n     * @param supplySpeed New supply-side COMP speed for market\\r\\n     * @param borrowSpeed New borrow-side COMP speed for market\\r\\n     */\\r\\n    function setCompSpeedInternal(\\r\\n        CToken cToken,\\r\\n        uint256 supplySpeed,\\r\\n        uint256 borrowSpeed\\r\\n    ) internal {\\r\\n        Market storage market = markets[address(cToken)];\\r\\n        require(market.isListed, \\\"comp market is not listed\\\");\\r\\n\\r\\n        if (compSupplySpeeds[address(cToken)] != supplySpeed) {\\r\\n            // Supply speed updated so let's update supply state to ensure that\\r\\n            //  1. COMP accrued properly for the old speed, and\\r\\n            //  2. COMP accrued at the new speed starts after this block.\\r\\n            updateCompSupplyIndex(address(cToken));\\r\\n\\r\\n            // Update speed and emit event\\r\\n            compSupplySpeeds[address(cToken)] = supplySpeed;\\r\\n            emit CompSupplySpeedUpdated(cToken, supplySpeed);\\r\\n        }\\r\\n\\r\\n        if (compBorrowSpeeds[address(cToken)] != borrowSpeed) {\\r\\n            // Borrow speed updated so let's update borrow state to ensure that\\r\\n            //  1. COMP accrued properly for the old speed, and\\r\\n            //  2. COMP accrued at the new speed starts after this block.\\r\\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\r\\n            updateCompBorrowIndex(address(cToken), borrowIndex);\\r\\n\\r\\n            // Update speed and emit event\\r\\n            compBorrowSpeeds[address(cToken)] = borrowSpeed;\\r\\n            emit CompBorrowSpeedUpdated(cToken, borrowSpeed);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue COMP to the market by updating the supply index\\r\\n     * @param cToken The market whose supply index to update\\r\\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\\r\\n     */\\r\\n    function updateCompSupplyIndex(address cToken) internal {\\r\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\r\\n        uint256 supplySpeed = compSupplySpeeds[cToken];\\r\\n        uint32 blockNumber = safe32(\\r\\n            getBlockNumber(),\\r\\n            \\\"block number exceeds 32 bits\\\"\\r\\n        );\\r\\n        uint256 deltaBlocks = sub_(\\r\\n            uint256(blockNumber),\\r\\n            uint256(supplyState.block)\\r\\n        );\\r\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\r\\n            uint256 supplyTokens = CToken(cToken).totalSupply();\\r\\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\\r\\n            Double memory ratio = supplyTokens > 0\\r\\n                ? fraction(compAccrued, supplyTokens)\\r\\n                : Double({mantissa: 0});\\r\\n            supplyState.index = safe224(\\r\\n                add_(Double({mantissa: supplyState.index}), ratio).mantissa,\\r\\n                \\\"new index exceeds 224 bits\\\"\\r\\n            );\\r\\n            supplyState.block = blockNumber;\\r\\n        } else if (deltaBlocks > 0) {\\r\\n            supplyState.block = blockNumber;\\r\\n        }\\r\\n\\r\\n        (bool success, ) = getExternalRewardDistributorAddress().call(\\r\\n            abi.encodeWithSignature(\\\"notifySupplyIndex(address)\\\", cToken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue COMP to the market by updating the borrow index\\r\\n     * @param cToken The market whose borrow index to update\\r\\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\\r\\n     */\\r\\n    function updateCompBorrowIndex(\\r\\n        address cToken,\\r\\n        Exp memory marketBorrowIndex\\r\\n    ) internal {\\r\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\r\\n        uint256 borrowSpeed = compBorrowSpeeds[cToken];\\r\\n        uint32 blockNumber = safe32(\\r\\n            getBlockNumber(),\\r\\n            \\\"block number exceeds 32 bits\\\"\\r\\n        );\\r\\n        uint256 deltaBlocks = sub_(\\r\\n            uint256(blockNumber),\\r\\n            uint256(borrowState.block)\\r\\n        );\\r\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\r\\n            uint256 borrowAmount = div_(\\r\\n                CToken(cToken).totalBorrows(),\\r\\n                marketBorrowIndex\\r\\n            );\\r\\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\\r\\n            Double memory ratio = borrowAmount > 0\\r\\n                ? fraction(compAccrued, borrowAmount)\\r\\n                : Double({mantissa: 0});\\r\\n            borrowState.index = safe224(\\r\\n                add_(Double({mantissa: borrowState.index}), ratio).mantissa,\\r\\n                \\\"new index exceeds 224 bits\\\"\\r\\n            );\\r\\n            borrowState.block = blockNumber;\\r\\n        } else if (deltaBlocks > 0) {\\r\\n            borrowState.block = blockNumber;\\r\\n        }\\r\\n\\r\\n        (bool success, ) = getExternalRewardDistributorAddress().call(\\r\\n            abi.encodeWithSignature(\\\"notifyBorrowIndex(address)\\\", cToken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\r\\n     * @param cToken The market in which the supplier is interacting\\r\\n     * @param supplier The address of the supplier to distribute COMP to\\r\\n     */\\r\\n    function distributeSupplierComp(address cToken, address supplier) internal {\\r\\n        // TODO: Don't distribute supplier COMP if the user is not in the supplier market.\\r\\n        // This check should be as gas efficient as possible as distributeSupplierComp is called in many places.\\r\\n        // - We really don't want to call an external contract as that's quite expensive.\\r\\n\\r\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\r\\n        uint256 supplyIndex = supplyState.index;\\r\\n        uint256 supplierIndex = compSupplierIndex[cToken][supplier];\\r\\n\\r\\n        // Update supplier's index to the current index since we are distributing accrued COMP\\r\\n        compSupplierIndex[cToken][supplier] = supplyIndex;\\r\\n\\r\\n        if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {\\r\\n            // Covers the case where users supplied tokens before the market's supply state index was set.\\r\\n            // Rewards the user with COMP accrued from the start of when supplier rewards were first\\r\\n            // set for the market.\\r\\n            supplierIndex = compInitialIndex;\\r\\n        }\\r\\n\\r\\n        // Calculate change in the cumulative sum of the COMP per cToken accrued\\r\\n        Double memory deltaIndex = Double({\\r\\n            mantissa: sub_(supplyIndex, supplierIndex)\\r\\n        });\\r\\n\\r\\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\\r\\n\\r\\n        // Calculate COMP accrued: cTokenAmount * accruedPerCToken\\r\\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\\r\\n\\r\\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\r\\n        compAccrued[supplier] = supplierAccrued;\\r\\n\\r\\n        emit DistributedSupplierComp(\\r\\n            CToken(cToken),\\r\\n            supplier,\\r\\n            supplierDelta,\\r\\n            supplyIndex\\r\\n        );\\r\\n\\r\\n        (bool success, ) = getExternalRewardDistributorAddress().call(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"notifySupplier(address,address)\\\",\\r\\n                cToken,\\r\\n                supplier\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\r\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\r\\n     * @param cToken The market in which the borrower is interacting\\r\\n     * @param borrower The address of the borrower to distribute COMP to\\r\\n     */\\r\\n    function distributeBorrowerComp(\\r\\n        address cToken,\\r\\n        address borrower,\\r\\n        Exp memory marketBorrowIndex\\r\\n    ) internal {\\r\\n        // TODO: Don't distribute supplier COMP if the user is not in the borrower market.\\r\\n        // This check should be as gas efficient as possible as distributeBorrowerComp is called in many places.\\r\\n        // - We really don't want to call an external contract as that's quite expensive.\\r\\n\\r\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\r\\n        uint256 borrowIndex = borrowState.index;\\r\\n        uint256 borrowerIndex = compBorrowerIndex[cToken][borrower];\\r\\n\\r\\n        // Update borrowers's index to the current index since we are distributing accrued COMP\\r\\n        compBorrowerIndex[cToken][borrower] = borrowIndex;\\r\\n\\r\\n        if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {\\r\\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\\r\\n            // Rewards the user with COMP accrued from the start of when borrower rewards were first\\r\\n            // set for the market.\\r\\n            borrowerIndex = compInitialIndex;\\r\\n        }\\r\\n\\r\\n        // Calculate change in the cumulative sum of the COMP per borrowed unit accrued\\r\\n        Double memory deltaIndex = Double({\\r\\n            mantissa: sub_(borrowIndex, borrowerIndex)\\r\\n        });\\r\\n\\r\\n        uint256 borrowerAmount = div_(\\r\\n            CToken(cToken).borrowBalanceStored(borrower),\\r\\n            marketBorrowIndex\\r\\n        );\\r\\n\\r\\n        // Calculate COMP accrued: cTokenAmount * accruedPerBorrowedUnit\\r\\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\\r\\n\\r\\n        uint256 borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\r\\n        compAccrued[borrower] = borrowerAccrued;\\r\\n\\r\\n        emit DistributedBorrowerComp(\\r\\n            CToken(cToken),\\r\\n            borrower,\\r\\n            borrowerDelta,\\r\\n            borrowIndex\\r\\n        );\\r\\n\\r\\n        (bool success, ) = getExternalRewardDistributorAddress().call(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"notifyBorrower(address,address)\\\",\\r\\n                cToken,\\r\\n                borrower\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\\r\\n     * @param contributor The address to calculate contributor rewards for\\r\\n     */\\r\\n    function updateContributorRewards(address contributor) public {\\r\\n        uint256 compSpeed = compContributorSpeeds[contributor];\\r\\n        uint256 blockNumber = getBlockNumber();\\r\\n        uint256 deltaBlocks = sub_(\\r\\n            blockNumber,\\r\\n            lastContributorBlock[contributor]\\r\\n        );\\r\\n        if (deltaBlocks > 0 && compSpeed > 0) {\\r\\n            uint256 newAccrued = mul_(deltaBlocks, compSpeed);\\r\\n            uint256 contributorAccrued = add_(\\r\\n                compAccrued[contributor],\\r\\n                newAccrued\\r\\n            );\\r\\n\\r\\n            compAccrued[contributor] = contributorAccrued;\\r\\n            lastContributorBlock[contributor] = blockNumber;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the comp accrued by holder in all markets\\r\\n     * @param holder The address to claim COMP for\\r\\n     */\\r\\n    function claimComp(address holder) public {\\r\\n        return claimComp(holder, allMarkets);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the comp accrued by holder in the specified markets\\r\\n     * @param holder The address to claim COMP for\\r\\n     * @param cTokens The list of markets to claim COMP in\\r\\n     */\\r\\n    function claimComp(address holder, CToken[] memory cTokens) public {\\r\\n        address[] memory holders = new address[](1);\\r\\n        holders[0] = holder;\\r\\n        claimComp(holders, cTokens, true, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all comp accrued by the holders\\r\\n     * @param holders The addresses to claim COMP for\\r\\n     * @param cTokens The list of markets to claim COMP in\\r\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\r\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\r\\n     */\\r\\n    function claimComp(\\r\\n        address[] memory holders,\\r\\n        CToken[] memory cTokens,\\r\\n        bool borrowers,\\r\\n        bool suppliers\\r\\n    ) public {\\r\\n        for (uint256 i = 0; i < cTokens.length; i++) {\\r\\n            CToken cToken = cTokens[i];\\r\\n            require(markets[address(cToken)].isListed, \\\"market must be listed\\\");\\r\\n            if (borrowers == true) {\\r\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\r\\n                updateCompBorrowIndex(address(cToken), borrowIndex);\\r\\n                for (uint256 j = 0; j < holders.length; j++) {\\r\\n                    distributeBorrowerComp(\\r\\n                        address(cToken),\\r\\n                        holders[j],\\r\\n                        borrowIndex\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            if (suppliers == true) {\\r\\n                updateCompSupplyIndex(address(cToken));\\r\\n                for (uint256 j = 0; j < holders.length; j++) {\\r\\n                    distributeSupplierComp(address(cToken), holders[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        for (uint256 j = 0; j < holders.length; j++) {\\r\\n            compAccrued[holders[j]] = grantCompInternal(\\r\\n                holders[j],\\r\\n                compAccrued[holders[j]]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (bool success, ) = getExternalRewardDistributorAddress().call(\\r\\n            abi.encodeWithSignature(\\\"claim(address[])\\\", holders)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer COMP to the user\\r\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\r\\n     * @param user The address of the user to transfer COMP to\\r\\n     * @param amount The amount of COMP to (possibly) transfer\\r\\n     * @return The amount of COMP which was NOT transferred to the user\\r\\n     */\\r\\n    function grantCompInternal(\\r\\n        address user,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        Comp comp = Comp(getCompAddress());\\r\\n        uint256 compRemaining = comp.balanceOf(address(this));\\r\\n        if (amount > 0 && amount <= compRemaining) {\\r\\n            comp.transfer(user, amount);\\r\\n            return 0;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /*** Comp Distribution Admin ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer COMP to the recipient\\r\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\r\\n     * @param recipient The address of the recipient to transfer COMP to\\r\\n     * @param amount The amount of COMP to (possibly) transfer\\r\\n     */\\r\\n    function _grantComp(address recipient, uint256 amount) public {\\r\\n        require(adminOrInitializing(), \\\"only admin can grant comp\\\");\\r\\n        uint256 amountLeft = grantCompInternal(recipient, amount);\\r\\n        require(amountLeft == 0, \\\"insufficient comp for grant\\\");\\r\\n        emit CompGranted(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP borrow and supply speeds for the specified markets.\\r\\n     * @param cTokens The markets whose COMP speed to update.\\r\\n     * @param supplySpeeds New supply-side COMP speed for the corresponding market.\\r\\n     * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\\r\\n     */\\r\\n    function _setCompSpeeds(\\r\\n        CToken[] memory cTokens,\\r\\n        uint256[] memory supplySpeeds,\\r\\n        uint256[] memory borrowSpeeds\\r\\n    ) public {\\r\\n        require(adminOrInitializing(), \\\"only admin can set comp speed\\\");\\r\\n\\r\\n        uint256 numTokens = cTokens.length;\\r\\n        require(\\r\\n            numTokens == supplySpeeds.length &&\\r\\n                numTokens == borrowSpeeds.length,\\r\\n            \\\"Comptroller::_setCompSpeeds invalid input\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < numTokens; ++i) {\\r\\n            setCompSpeedInternal(cTokens[i], supplySpeeds[i], borrowSpeeds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP speed for a single contributor\\r\\n     * @param contributor The contributor whose COMP speed to update\\r\\n     * @param compSpeed New COMP speed for contributor\\r\\n     */\\r\\n    function _setContributorCompSpeed(\\r\\n        address contributor,\\r\\n        uint256 compSpeed\\r\\n    ) public {\\r\\n        require(adminOrInitializing(), \\\"only admin can set comp speed\\\");\\r\\n\\r\\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\\r\\n        updateContributorRewards(contributor);\\r\\n        if (compSpeed == 0) {\\r\\n            // release storage\\r\\n            delete lastContributorBlock[contributor];\\r\\n        } else {\\r\\n            lastContributorBlock[contributor] = getBlockNumber();\\r\\n        }\\r\\n        compContributorSpeeds[contributor] = compSpeed;\\r\\n\\r\\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return all of the markets\\r\\n     * @dev The automatic getter may be used to access an individual market.\\r\\n     * @return The list of market addresses\\r\\n     */\\r\\n    function getAllMarkets() public view returns (CToken[] memory) {\\r\\n        return allMarkets;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if the given cToken market has been deprecated\\r\\n     * @dev All borrows in a deprecated cToken market can be immediately liquidated\\r\\n     * @param cToken The market to check if deprecated\\r\\n     */\\r\\n    function isDeprecated(CToken cToken) public view returns (bool) {\\r\\n        return\\r\\n            markets[address(cToken)].collateralFactorMantissa == 0 &&\\r\\n            borrowGuardianPaused[address(cToken)] == true &&\\r\\n            cToken.reserveFactorMantissa() == 1e18;\\r\\n    }\\r\\n\\r\\n    function getBlockNumber() public view virtual returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the address of the SONNE token\\r\\n     * @return The address of SONNE\\r\\n     */\\r\\n    function getCompAddress() public view virtual returns (address) {\\r\\n        return 0x1DB2466d9F5e10D7090E7152B68d62703a2245F0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the address of the external reward distributor\\r\\n     * @return The address of the external reward distributor\\r\\n     */\\r\\n    function getExternalRewardDistributorAddress()\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (address)\\r\\n    {\\r\\n        return 0x493f11252dD0eAc438C512c801F331Fda42C9402;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x39ca363da2f8fba9a82c3ce535a47fc99e12d151f3ca94888b0ab8f1131a8f0e\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nabstract contract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\r\\n    function exitMarket(address cToken) virtual external returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\r\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\r\\n\\r\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\r\\n\\r\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\r\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowVerify(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex) virtual external;\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrowVerify(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external returns (uint);\\r\\n    function seizeVerify(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\r\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        uint repayAmount) virtual external view returns (uint, uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x35b21331eeb8adcbe6c81ef059f467051db884d42a5816c9254ad5df33e1ddc1\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\n\\r\\ncontract UnitrollerAdminStorage {\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Active brains of Unitroller\\r\\n     */\\r\\n    address public comptrollerImplementation;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending brains of Unitroller\\r\\n     */\\r\\n    address public pendingComptrollerImplementation;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\r\\n    /**\\r\\n     * @notice Oracle which gives the price of any given asset\\r\\n     */\\r\\n    PriceOracle public oracle;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\r\\n     */\\r\\n    uint256 public closeFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\r\\n     */\\r\\n    uint256 public liquidationIncentiveMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\r\\n     */\\r\\n    uint256 public maxAssets;\\r\\n\\r\\n    /**\\r\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\r\\n     */\\r\\n    mapping(address => CToken[]) public accountAssets;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\r\\n    struct Market {\\r\\n        // Whether or not this market is listed\\r\\n        bool isListed;\\r\\n        //  Multiplier representing the most one can borrow against their collateral in this market.\\r\\n        //  For instance, 0.9 to allow borrowing 90% of collateral value.\\r\\n        //  Must be between 0 and 1, and stored as a mantissa.\\r\\n        uint256 collateralFactorMantissa;\\r\\n        // Per-market mapping of \\\"accounts in this asset\\\"\\r\\n        mapping(address => bool) accountMembership;\\r\\n        // Whether or not this market receives COMP\\r\\n        bool isComped;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Official mapping of cTokens -> Market metadata\\r\\n     * @dev Used e.g. to determine if a market is supported\\r\\n     */\\r\\n    mapping(address => Market) public markets;\\r\\n\\r\\n    /**\\r\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n     *  Actions which allow users to remove their own assets cannot be paused.\\r\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\r\\n     */\\r\\n    address public pauseGuardian;\\r\\n    bool public _mintGuardianPaused;\\r\\n    bool public _borrowGuardianPaused;\\r\\n    bool public transferGuardianPaused;\\r\\n    bool public seizeGuardianPaused;\\r\\n    mapping(address => bool) public mintGuardianPaused;\\r\\n    mapping(address => bool) public borrowGuardianPaused;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\r\\n    struct CompMarketState {\\r\\n        // The market's last updated compBorrowIndex or compSupplyIndex\\r\\n        uint224 index;\\r\\n        // The block number the index was last updated at\\r\\n        uint32 block;\\r\\n    }\\r\\n\\r\\n    /// @notice A list of all markets\\r\\n    CToken[] public allMarkets;\\r\\n\\r\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\r\\n    uint256 public compRate;\\r\\n\\r\\n    /// @notice The portion of compRate that each market currently receives\\r\\n    mapping(address => uint256) public compSpeeds;\\r\\n\\r\\n    /// @notice The COMP market supply state for each market\\r\\n    mapping(address => CompMarketState) public compSupplyState;\\r\\n\\r\\n    /// @notice The COMP market borrow state for each market\\r\\n    mapping(address => CompMarketState) public compBorrowState;\\r\\n\\r\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\r\\n    mapping(address => mapping(address => uint256)) public compSupplierIndex;\\r\\n\\r\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\r\\n    mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\r\\n\\r\\n    /// @notice The COMP accrued but not yet transferred to each user\\r\\n    mapping(address => uint256) public compAccrued;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\r\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\r\\n    address public borrowCapGuardian;\\r\\n\\r\\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\r\\n    mapping(address => uint256) public borrowCaps;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\r\\n    /// @notice The portion of COMP that each contributor receives per block\\r\\n    mapping(address => uint256) public compContributorSpeeds;\\r\\n\\r\\n    /// @notice Last block at which a contributor's COMP rewards have been allocated\\r\\n    mapping(address => uint256) public lastContributorBlock;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\r\\n    /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\\r\\n    mapping(address => uint256) public compBorrowSpeeds;\\r\\n\\r\\n    /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\\r\\n    mapping(address => uint256) public compSupplySpeeds;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\r\\n    /// @notice Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\\r\\n    bool public proposal65FixExecuted;\\r\\n\\r\\n    /// @notice Accounting storage mapping account addresses to how much COMP they owe the protocol.\\r\\n    mapping(address => uint256) public compReceivable;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV8Storage is ComptrollerV7Storage {\\r\\n    // @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying on the given market.\\r\\n    address public supplyCapGuardian;\\r\\n\\r\\n    // @notice Supply caps enforced by supplyAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\r\\n    mapping(address => uint256) public supplyCaps;\\r\\n}\\r\\n\",\"keccak256\":\"0x2ae475fd17c3ea47bfb334cafda443bc459519f72ea3dbe1b92aadc49ee82564\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title ERC 20 Token Standard Interface\\r\\n *  https://eips.ethereum.org/EIPS/eip-20\\r\\n */\\r\\ninterface EIP20Interface {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the total number of tokens in circulation\\r\\n      * @return The supply of tokens\\r\\n      */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return success Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return success Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n      * @return success Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x6766042a407f17e340589ec7c0205456ddb83db990fe917586cbaec8e381e506\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved\\r\\n      * @return success Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return remaining The number of tokens allowed to be spent\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0xc73640b236e5f5993d48ea7b8607c1825d700b852fe3fbc2bc07112b62bd249e\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\r\\n\\r\\n    error TransferComptrollerRejection(uint256 errorCode);\\r\\n    error TransferNotAllowed();\\r\\n    error TransferNotEnough();\\r\\n    error TransferTooMuch();\\r\\n\\r\\n    error MintComptrollerRejection(uint256 errorCode);\\r\\n    error MintFreshnessCheck();\\r\\n\\r\\n    error RedeemComptrollerRejection(uint256 errorCode);\\r\\n    error RedeemFreshnessCheck();\\r\\n    error RedeemTransferOutNotPossible();\\r\\n\\r\\n    error BorrowComptrollerRejection(uint256 errorCode);\\r\\n    error BorrowFreshnessCheck();\\r\\n    error BorrowCashNotAvailable();\\r\\n\\r\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\r\\n    error RepayBorrowFreshnessCheck();\\r\\n\\r\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\r\\n    error LiquidateFreshnessCheck();\\r\\n    error LiquidateCollateralFreshnessCheck();\\r\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\r\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\r\\n    error LiquidateLiquidatorIsBorrower();\\r\\n    error LiquidateCloseAmountIsZero();\\r\\n    error LiquidateCloseAmountIsUintMax();\\r\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\r\\n\\r\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\r\\n    error LiquidateSeizeLiquidatorIsBorrower();\\r\\n\\r\\n    error AcceptAdminPendingAdminCheck();\\r\\n\\r\\n    error SetComptrollerOwnerCheck();\\r\\n    error SetPendingAdminOwnerCheck();\\r\\n\\r\\n    error SetReserveFactorAdminCheck();\\r\\n    error SetReserveFactorFreshCheck();\\r\\n    error SetReserveFactorBoundsCheck();\\r\\n\\r\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\r\\n\\r\\n    error ReduceReservesAdminCheck();\\r\\n    error ReduceReservesFreshCheck();\\r\\n    error ReduceReservesCashNotAvailable();\\r\\n    error ReduceReservesCashValidation();\\r\\n\\r\\n    error SetInterestRateModelOwnerCheck();\\r\\n    error SetInterestRateModelFreshCheck();\\r\\n}\\r\\n\",\"keccak256\":\"0x3f8fa3350921f633b45a9312a90b3375db3c6844dca40daaf8256ab4f32d902c\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Compound\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract ExponentialNoError {\\r\\n    uint constant expScale = 1e18;\\r\\n    uint constant doubleScale = 1e36;\\r\\n    uint constant halfExpScale = expScale/2;\\r\\n    uint constant mantissaOne = expScale;\\r\\n\\r\\n    struct Exp {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    struct Double {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Truncates the given exp to a whole number value.\\r\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\r\\n     */\\r\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\r\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\r\\n        return exp.mantissa / expScale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return add_(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if first Exp is less than second Exp.\\r\\n     */\\r\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa < right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp <= right Exp.\\r\\n     */\\r\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa <= right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp > right Exp.\\r\\n     */\\r\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa > right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if Exp is exactly zero\\r\\n     */\\r\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\r\\n        return value.mantissa == 0;\\r\\n    }\\r\\n\\r\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\r\\n        require(n < 2**224, errorMessage);\\r\\n        return uint224(n);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / expScale;\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / doubleScale;\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, expScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, doubleScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x37e1a38f9d77e12761f079a277904f2fd20b80fb79da9f5854851fefe1b5d358\",\"license\":\"BSD-3-Clause\"},\"contracts/Governance/Comp.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ncontract Comp {\\r\\n    /// @notice EIP-20 token name for this token\\r\\n    string public constant name = \\\"Compound\\\";\\r\\n\\r\\n    /// @notice EIP-20 token symbol for this token\\r\\n    string public constant symbol = \\\"COMP\\\";\\r\\n\\r\\n    /// @notice EIP-20 token decimals for this token\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    /// @notice Total number of tokens in circulation\\r\\n    uint256 public constant totalSupply = 10000000e18; // 10 million Comp\\r\\n\\r\\n    /// @notice Allowance amounts on behalf of others\\r\\n    mapping(address => mapping(address => uint96)) internal allowances;\\r\\n\\r\\n    /// @notice Official record of token balances for each account\\r\\n    mapping(address => uint96) internal balances;\\r\\n\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping(address => address) public delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping(address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\r\\n        );\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH =\\r\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    /// @notice The standard EIP-20 transfer event\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    /// @notice The standard EIP-20 approval event\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new Comp token\\r\\n     * @param account The initial account to grant all the tokens\\r\\n     */\\r\\n    constructor(address account) public {\\r\\n        balances[account] = uint96(totalSupply);\\r\\n        emit Transfer(address(0), account, totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\r\\n     * @param account The address of the account holding the funds\\r\\n     * @param spender The address of the account spending the funds\\r\\n     * @return The number of tokens approved\\r\\n     */\\r\\n    function allowance(address account, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return allowances[account][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 rawAmount)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint96 amount;\\r\\n        if (rawAmount == type(uint256).max) {\\r\\n            amount = type(uint96).max;\\r\\n        } else {\\r\\n            amount = safe96(rawAmount, \\\"Comp::approve: amount exceeds 96 bits\\\");\\r\\n        }\\r\\n\\r\\n        allowances[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens held by the `account`\\r\\n     * @param account The address of the account to get the balance of\\r\\n     * @return The number of tokens held\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256) {\\r\\n        return balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\\r\\n        uint96 amount = safe96(\\r\\n            rawAmount,\\r\\n            \\\"Comp::transfer: amount exceeds 96 bits\\\"\\r\\n        );\\r\\n        _transferTokens(msg.sender, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 rawAmount\\r\\n    ) external returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        uint96 spenderAllowance = allowances[src][spender];\\r\\n        uint96 amount = safe96(\\r\\n            rawAmount,\\r\\n            \\\"Comp::approve: amount exceeds 96 bits\\\"\\r\\n        );\\r\\n\\r\\n        if (spender != src && spenderAllowance != type(uint96).max) {\\r\\n            uint96 newAllowance = sub96(\\r\\n                spenderAllowance,\\r\\n                amount,\\r\\n                \\\"Comp::transferFrom: transfer amount exceeds spender allowance\\\"\\r\\n            );\\r\\n            allowances[src][spender] = newAllowance;\\r\\n\\r\\n            emit Approval(src, spender, newAllowance);\\r\\n        }\\r\\n\\r\\n        _transferTokens(src, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) public {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public {\\r\\n        bytes32 domainSeparator = keccak256(\\r\\n            abi.encode(\\r\\n                DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name)),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\r\\n        );\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\r\\n        );\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            signatory != address(0),\\r\\n            \\\"Comp::delegateBySig: invalid signature\\\"\\r\\n        );\\r\\n        require(\\r\\n            nonce == nonces[signatory]++,\\r\\n            \\\"Comp::delegateBySig: invalid nonce\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp <= expiry,\\r\\n            \\\"Comp::delegateBySig: signature expired\\\"\\r\\n        );\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account) external view returns (uint96) {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return\\r\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (uint96)\\r\\n    {\\r\\n        require(\\r\\n            blockNumber < block.number,\\r\\n            \\\"Comp::getPriorVotes: not yet determined\\\"\\r\\n        );\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = delegates[delegator];\\r\\n        uint96 delegatorBalance = balances[delegator];\\r\\n        delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _transferTokens(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint96 amount\\r\\n    ) internal {\\r\\n        require(\\r\\n            src != address(0),\\r\\n            \\\"Comp::_transferTokens: cannot transfer from the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            dst != address(0),\\r\\n            \\\"Comp::_transferTokens: cannot transfer to the zero address\\\"\\r\\n        );\\r\\n\\r\\n        balances[src] = sub96(\\r\\n            balances[src],\\r\\n            amount,\\r\\n            \\\"Comp::_transferTokens: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        balances[dst] = add96(\\r\\n            balances[dst],\\r\\n            amount,\\r\\n            \\\"Comp::_transferTokens: transfer amount overflows\\\"\\r\\n        );\\r\\n        emit Transfer(src, dst, amount);\\r\\n\\r\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(\\r\\n        address srcRep,\\r\\n        address dstRep,\\r\\n        uint96 amount\\r\\n    ) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint96 srcRepOld = srcRepNum > 0\\r\\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\\r\\n                    : 0;\\r\\n                uint96 srcRepNew = sub96(\\r\\n                    srcRepOld,\\r\\n                    amount,\\r\\n                    \\\"Comp::_moveVotes: vote amount underflows\\\"\\r\\n                );\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint96 dstRepOld = dstRepNum > 0\\r\\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\\r\\n                    : 0;\\r\\n                uint96 dstRepNew = add96(\\r\\n                    dstRepOld,\\r\\n                    amount,\\r\\n                    \\\"Comp::_moveVotes: vote amount overflows\\\"\\r\\n                );\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        address delegatee,\\r\\n        uint32 nCheckpoints,\\r\\n        uint96 oldVotes,\\r\\n        uint96 newVotes\\r\\n    ) internal {\\r\\n        uint32 blockNumber = safe32(\\r\\n            block.number,\\r\\n            \\\"Comp::_writeCheckpoint: block number exceeds 32 bits\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            nCheckpoints > 0 &&\\r\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\r\\n        ) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\r\\n                blockNumber,\\r\\n                newVotes\\r\\n            );\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint256 n, string memory errorMessage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function safe96(uint256 n, string memory errorMessage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint96)\\r\\n    {\\r\\n        require(n < 2**96, errorMessage);\\r\\n        return uint96(n);\\r\\n    }\\r\\n\\r\\n    function add96(\\r\\n        uint96 a,\\r\\n        uint96 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint96) {\\r\\n        uint96 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub96(\\r\\n        uint96 a,\\r\\n        uint96 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint96) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainId() internal view returns (uint256) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x372886aebf04bb2dcaed47fcd6f93d5274c69365592b8df1a4945617eced4f26\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n  * @title Compound's InterestRateModel Interface\\r\\n  * @author Compound\\r\\n  */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xc9165c6470843312db10221c408840d907786ab238156cd22b1e428b9dc93c2a\",\"license\":\"BSD-3-Clause\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\n\\r\\nabstract contract PriceOracle {\\r\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\r\\n    bool public constant isPriceOracle = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Get the underlying price of a cToken asset\\r\\n      * @param cToken The cToken to get the underlying price of\\r\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n      *  Zero means the price is unavailable.\\r\\n      */\\r\\n    function getUnderlyingPrice(CToken cToken) virtual external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xa4111f8a66c03b8784b91d6bfd7b410236fe16629115ab12f543b7cd1720a6a0\",\"license\":\"BSD-3-Clause\"},\"contracts/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\n/**\\r\\n * @title ComptrollerCore\\r\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\r\\n * CTokens should reference this contract as their comptroller.\\r\\n */\\r\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is changed\\r\\n      */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n      */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor() public {\\r\\n        // Set admin to caller\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\r\\n\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it's role as implementation\\r\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n    */\\r\\n    function _acceptImplementation() public returns (uint) {\\r\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\r\\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = comptrollerImplementation;\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        comptrollerImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() public returns (uint) {\\r\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\r\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    fallback() payable external {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\r\\n              default { return(free_mem_ptr, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x17b4d9e361d9301c25ae3e43be00a9c030c359c3d338bf3387ac36baf98427e2\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Compound",
    "kind": "dev",
    "methods": {
      "_grantComp(address,uint256)": {
        "details": "Note: If there is not enough COMP, we do not perform the transfer all.",
        "params": {
          "amount": "The amount of COMP to (possibly) transfer",
          "recipient": "The address of the recipient to transfer COMP to"
        }
      },
      "_setBorrowCapGuardian(address)": {
        "params": {
          "newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure"
        }
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Admin function to set per-market collateralFactor",
        "params": {
          "cToken": "The market to set the factor on",
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setCompSpeeds(address[],uint256[],uint256[])": {
        "params": {
          "borrowSpeeds": "New borrow-side COMP speed for the corresponding market.",
          "cTokens": "The markets whose COMP speed to update.",
          "supplySpeeds": "New supply-side COMP speed for the corresponding market."
        }
      },
      "_setContributorCompSpeed(address,uint256)": {
        "params": {
          "compSpeed": "New COMP speed for contributor",
          "contributor": "The contributor whose COMP speed to update"
        }
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "details": "Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the supply caps for",
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying."
        }
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setSupplyCapGuardian(address)": {
        "params": {
          "newSupplyCapGuardian": "The address of the new Supply Cap Guardian"
        }
      },
      "_supportMarket(address)": {
        "details": "Admin function to set isListed and add support for the market",
        "params": {
          "cToken": "The address of the market (token) to list"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "cToken": "The market to verify the borrow against"
        },
        "returns": {
          "_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "borrowVerify(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset requested to borrow",
          "borrower": "The address borrowing the underlying",
          "cToken": "Asset whose underlying is being borrowed"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "cToken": "The cToken to check"
        },
        "returns": {
          "_0": "True if the account is in the asset, otherwise false."
        }
      },
      "claimComp(address)": {
        "params": {
          "holder": "The address to claim COMP for"
        }
      },
      "claimComp(address,address[])": {
        "params": {
          "cTokens": "The list of markets to claim COMP in",
          "holder": "The address to claim COMP for"
        }
      },
      "claimComp(address[],address[],bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim COMP earned by borrowing",
          "cTokens": "The list of markets to claim COMP in",
          "holders": "The addresses to claim COMP for",
          "suppliers": "Whether or not to claim COMP earned by supplying"
        }
      },
      "enterMarkets(address[])": {
        "params": {
          "cTokens": "The list of addresses of the cToken markets to be enabled"
        },
        "returns": {
          "_0": "Success indicator for whether each corresponding market was entered"
        }
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.",
        "params": {
          "cTokenAddress": "The address of the asset to be removed"
        },
        "returns": {
          "_0": "Whether or not the account successfully exited the market"
        }
      },
      "getAccountLiquidity(address)": {
        "returns": {
          "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
        }
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "returns": {
          "_0": "The list of market addresses"
        }
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "returns": {
          "_0": "A dynamic list with the assets the account has entered"
        }
      },
      "getCompAddress()": {
        "returns": {
          "_0": "The address of SONNE"
        }
      },
      "getExternalRewardDistributorAddress()": {
        "returns": {
          "_0": "The address of the external reward distributor"
        }
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "cTokenModify": "The market to hypothetically redeem/borrow in",
          "redeemTokens": "The number of tokens to hypothetically redeem"
        },
        "returns": {
          "_0": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)"
        }
      },
      "isDeprecated(address)": {
        "details": "All borrows in a deprecated cToken market can be immediately liquidated",
        "params": {
          "cToken": "The market to check if deprecated"
        }
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid"
        }
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral"
        }
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "details": "Used in liquidation (called in cToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens",
          "cTokenBorrowed": "The address of the borrowed cToken",
          "cTokenCollateral": "The address of the collateral cToken"
        },
        "returns": {
          "_0": "(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)"
        }
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the mint against",
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens"
        },
        "returns": {
          "_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "mintVerify(address,address,uint256,uint256)": {
        "params": {
          "actualMintAmount": "The amount of the underlying asset being minted",
          "cToken": "Asset being minted",
          "mintTokens": "The number of tokens being minted",
          "minter": "The address minting the tokens"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the redeem against",
          "redeemTokens": "The number of cTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens"
        },
        "returns": {
          "_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "cToken": "Asset being redeemed",
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which would borrowed the asset",
          "cToken": "The market to verify the repay against",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay"
        },
        "returns": {
          "_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "cToken": "Asset being repaid",
          "payer": "The address repaying the borrow"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the transfer against",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        },
        "returns": {
          "_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "transferVerify(address,address,address,uint256)": {
        "params": {
          "cToken": "Asset being transferred",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        }
      },
      "updateContributorRewards(address)": {
        "params": {
          "contributor": "The address to calculate contributor rewards for"
        }
      }
    },
    "title": "Compound's Comptroller Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ActionPaused(address,string,bool)": {
        "notice": "Emitted when an action is paused on a market"
      },
      "ActionPaused(string,bool)": {
        "notice": "Emitted when an action is paused globally"
      },
      "CompAccruedAdjusted(address,uint256,uint256)": {
        "notice": "Emitted when COMP accrued for a user has been manually adjusted."
      },
      "CompBorrowSpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new borrow-side COMP speed is calculated for a market"
      },
      "CompGranted(address,uint256)": {
        "notice": "Emitted when COMP is granted by admin"
      },
      "CompReceivableUpdated(address,uint256,uint256)": {
        "notice": "Emitted when COMP receivable for a user has been updated."
      },
      "CompSupplySpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new supply-side COMP speed is calculated for a market"
      },
      "ContributorCompSpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new COMP speed is set for a contributor"
      },
      "DistributedBorrowerComp(address,address,uint256,uint256)": {
        "notice": "Emitted when COMP is distributed to a borrower"
      },
      "DistributedSupplierComp(address,address,uint256,uint256)": {
        "notice": "Emitted when COMP is distributed to a supplier"
      },
      "MarketEntered(address,address)": {
        "notice": "Emitted when an account enters a market"
      },
      "MarketExited(address,address)": {
        "notice": "Emitted when an account exits a market"
      },
      "MarketListed(address)": {
        "notice": "Emitted when an admin supports a market"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Emitted when borrow cap for a cToken is changed"
      },
      "NewBorrowCapGuardian(address,address)": {
        "notice": "Emitted when borrow cap guardian is changed"
      },
      "NewCloseFactor(uint256,uint256)": {
        "notice": "Emitted when close factor is changed by admin"
      },
      "NewCollateralFactor(address,uint256,uint256)": {
        "notice": "Emitted when a collateral factor is changed by admin"
      },
      "NewLiquidationIncentive(uint256,uint256)": {
        "notice": "Emitted when liquidation incentive is changed by admin"
      },
      "NewPauseGuardian(address,address)": {
        "notice": "Emitted when pause guardian is changed"
      },
      "NewPriceOracle(address,address)": {
        "notice": "Emitted when price oracle is changed"
      },
      "NewSupplyCap(address,uint256)": {
        "notice": "Emitted when supply cap for a cToken is changed"
      },
      "NewSupplyCapGuardian(address,address)": {
        "notice": "Emitted when supply cap guardian is changed"
      }
    },
    "kind": "user",
    "methods": {
      "_grantComp(address,uint256)": {
        "notice": "Transfer COMP to the recipient"
      },
      "_setBorrowCapGuardian(address)": {
        "notice": "Admin function to change the Borrow Cap Guardian"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setCompSpeeds(address[],uint256[],uint256[])": {
        "notice": "Set COMP borrow and supply speeds for the specified markets."
      },
      "_setContributorCompSpeed(address,uint256)": {
        "notice": "Set COMP speed for a single contributor"
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Set the given supply caps for the given cToken markets. Supplying that brings total supply to or above supply cap will revert."
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_setSupplyCapGuardian(address)": {
        "notice": "Admin function to change the Supply Cap Guardian"
      },
      "_supportMarket(address)": {
        "notice": "Add the market to the markets mapping and set it as listed"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allMarkets(uint256)": {
        "notice": "A list of all markets"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "borrowVerify(address,address,uint256)": {
        "notice": "Validates borrow and reverts on rejection. May emit logs."
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "claimComp(address)": {
        "notice": "Claim all the comp accrued by holder in all markets"
      },
      "claimComp(address,address[])": {
        "notice": "Claim all the comp accrued by holder in the specified markets"
      },
      "claimComp(address[],address[],bool,bool)": {
        "notice": "Claim all comp accrued by the holders"
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "compAccrued(address)": {
        "notice": "The COMP accrued but not yet transferred to each user"
      },
      "compBorrowSpeeds(address)": {
        "notice": "The rate at which comp is distributed to the corresponding borrow market (per block)"
      },
      "compBorrowState(address)": {
        "notice": "The COMP market borrow state for each market"
      },
      "compBorrowerIndex(address,address)": {
        "notice": "The COMP borrow index for each market for each borrower as of the last time they accrued COMP"
      },
      "compContributorSpeeds(address)": {
        "notice": "The portion of COMP that each contributor receives per block"
      },
      "compInitialIndex()": {
        "notice": "The initial COMP index for a market"
      },
      "compRate()": {
        "notice": "The rate at which the flywheel distributes COMP, per block"
      },
      "compReceivable(address)": {
        "notice": "Accounting storage mapping account addresses to how much COMP they owe the protocol."
      },
      "compSpeeds(address)": {
        "notice": "The portion of compRate that each market currently receives"
      },
      "compSupplierIndex(address,address)": {
        "notice": "The COMP borrow index for each market for each supplier as of the last time they accrued COMP"
      },
      "compSupplySpeeds(address)": {
        "notice": "The rate at which comp is distributed to the corresponding supply market (per block)"
      },
      "compSupplyState(address)": {
        "notice": "The COMP market supply state for each market"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "enterMarkets(address[])": {
        "notice": "Add assets to be included in account liquidity calculation"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "fixBadAccruals(address[],uint256[])": {
        "notice": "Delete this function after proposal 65 is executed"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "getCompAddress()": {
        "notice": "Return the address of the SONNE token"
      },
      "getExternalRewardDistributorAddress()": {
        "notice": "Return the address of the external reward distributor"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "isComptroller()": {
        "notice": "Indicator that this is a Comptroller contract (for inspection)"
      },
      "isDeprecated(address)": {
        "notice": "Returns true if the given cToken market has been deprecated"
      },
      "lastContributorBlock(address)": {
        "notice": "Last block at which a contributor's COMP rewards have been allocated"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "liquidationIncentiveMantissa()": {
        "notice": "Multiplier representing the discount on collateral that a liquidator receives"
      },
      "markets(address)": {
        "notice": "Official mapping of cTokens -> Market metadata"
      },
      "maxAssets()": {
        "notice": "Max number of assets a single account can participate in (borrow or use as collateral)"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "mintVerify(address,address,uint256,uint256)": {
        "notice": "Validates mint and reverts on rejection. May emit logs."
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pauseGuardian()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market."
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      },
      "proposal65FixExecuted()": {
        "notice": "Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection. May emit logs."
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "notice": "Validates repayBorrow and reverts on rejection. May emit logs."
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "notice": "Validates seize and reverts on rejection. May emit logs."
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      },
      "transferVerify(address,address,address,uint256)": {
        "notice": "Validates transfer and reverts on rejection. May emit logs."
      },
      "updateContributorRewards(address)": {
        "notice": "Calculate additional accrued COMP for a contributor since last accrual"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7178,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7181,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7184,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7187,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7194,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PriceOracle)9420"
      },
      {
        "astId": 7197,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7200,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7203,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7210,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(CToken)2194)dyn_storage)"
      },
      {
        "astId": 7230,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Market)7224_storage)"
      },
      {
        "astId": 7233,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7235,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 7237,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 7239,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 7241,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 7245,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7249,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7262,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "allMarkets",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_contract(CToken)2194)dyn_storage"
      },
      {
        "astId": 7265,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 7270,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compSpeeds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7276,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compSupplyState",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(CompMarketState)7257_storage)"
      },
      {
        "astId": 7282,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compBorrowState",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(CompMarketState)7257_storage)"
      },
      {
        "astId": 7289,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compSupplierIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7296,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compBorrowerIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7301,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compAccrued",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7306,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 7310,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7318,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compContributorSpeeds",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7323,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "lastContributorBlock",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7331,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compBorrowSpeeds",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7336,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compSupplySpeeds",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7342,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "proposal65FixExecuted",
        "offset": 0,
        "slot": "27",
        "type": "t_bool"
      },
      {
        "astId": 7347,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "compReceivable",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7352,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "supplyCapGuardian",
        "offset": 0,
        "slot": "29",
        "type": "t_address"
      },
      {
        "astId": 7356,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(CToken)2194)dyn_storage": {
        "base": "t_contract(CToken)2194",
        "encoding": "dynamic_array",
        "label": "contract CToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CToken)2194": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)9420": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(CToken)2194)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(CToken)2194)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(CompMarketState)7257_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV3Storage.CompMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(CompMarketState)7257_storage"
      },
      "t_mapping(t_address,t_struct(Market)7224_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV2Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)7224_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CompMarketState)7257_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV3Storage.CompMarketState",
        "members": [
          {
            "astId": 7254,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 7256,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)7224_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV2Storage.Market",
        "members": [
          {
            "astId": 7215,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7217,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7221,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7223,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isComped",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}