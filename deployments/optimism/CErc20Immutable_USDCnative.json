{
    "address": "0x1AfD1fF9E441973B7D34c7B8AbE91d94F1B23ce0",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "underlying_",
                    "type": "address"
                },
                {
                    "internalType": "contract ComptrollerInterface",
                    "name": "comptroller_",
                    "type": "address"
                },
                {
                    "internalType": "contract InterestRateModel",
                    "name": "interestRateModel_",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "initialExchangeRateMantissa_",
                    "type": "uint256"
                },
                {
                    "internalType": "string",
                    "name": "name_",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "symbol_",
                    "type": "string"
                },
                {
                    "internalType": "uint8",
                    "name": "decimals_",
                    "type": "uint8"
                },
                {
                    "internalType": "address payable",
                    "name": "admin_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "AcceptAdminPendingAdminCheck",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "actualAddAmount",
                    "type": "uint256"
                }
            ],
            "name": "AddReservesFactorFreshCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "BorrowCashNotAvailable",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "BorrowComptrollerRejection",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "BorrowFreshnessCheck",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "LiquidateAccrueBorrowInterestFailed",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "LiquidateAccrueCollateralInterestFailed",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "LiquidateCloseAmountIsUintMax",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "LiquidateCloseAmountIsZero",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "LiquidateCollateralFreshnessCheck",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "LiquidateComptrollerRejection",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "LiquidateFreshnessCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "LiquidateLiquidatorIsBorrower",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "LiquidateRepayBorrowFreshFailed",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "LiquidateSeizeComptrollerRejection",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "LiquidateSeizeLiquidatorIsBorrower",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "MintComptrollerRejection",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MintFreshnessCheck",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "RedeemComptrollerRejection",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "RedeemFreshnessCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "RedeemTransferOutNotPossible",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ReduceReservesAdminCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ReduceReservesCashNotAvailable",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ReduceReservesCashValidation",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ReduceReservesFreshCheck",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "RepayBorrowComptrollerRejection",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "RepayBorrowFreshnessCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SetComptrollerOwnerCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SetInterestRateModelFreshCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SetInterestRateModelOwnerCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SetPendingAdminOwnerCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SetReserveFactorAdminCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SetReserveFactorBoundsCheck",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SetReserveFactorFreshCheck",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "errorCode",
                    "type": "uint256"
                }
            ],
            "name": "TransferComptrollerRejection",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TransferNotAllowed",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TransferNotEnough",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TransferTooMuch",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "cashPrior",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "interestAccumulated",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "borrowIndex",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "totalBorrows",
                    "type": "uint256"
                }
            ],
            "name": "AccrueInterest",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "borrower",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "borrowAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "accountBorrows",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "totalBorrows",
                    "type": "uint256"
                }
            ],
            "name": "Borrow",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "liquidator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "borrower",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "repayAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "cTokenCollateral",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "seizeTokens",
                    "type": "uint256"
                }
            ],
            "name": "LiquidateBorrow",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "minter",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "mintAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "mintTokens",
                    "type": "uint256"
                }
            ],
            "name": "Mint",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "oldAdmin",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "NewAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "contract ComptrollerInterface",
                    "name": "oldComptroller",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "contract ComptrollerInterface",
                    "name": "newComptroller",
                    "type": "address"
                }
            ],
            "name": "NewComptroller",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "contract InterestRateModel",
                    "name": "oldInterestRateModel",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "contract InterestRateModel",
                    "name": "newInterestRateModel",
                    "type": "address"
                }
            ],
            "name": "NewMarketInterestRateModel",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "oldPendingAdmin",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newPendingAdmin",
                    "type": "address"
                }
            ],
            "name": "NewPendingAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "oldReserveFactorMantissa",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newReserveFactorMantissa",
                    "type": "uint256"
                }
            ],
            "name": "NewReserveFactor",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "redeemer",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "redeemAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "redeemTokens",
                    "type": "uint256"
                }
            ],
            "name": "Redeem",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "payer",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "borrower",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "repayAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "accountBorrows",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "totalBorrows",
                    "type": "uint256"
                }
            ],
            "name": "RepayBorrow",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "benefactor",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "addAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newTotalReserves",
                    "type": "uint256"
                }
            ],
            "name": "ReservesAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "reduceAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newTotalReserves",
                    "type": "uint256"
                }
            ],
            "name": "ReservesReduced",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "NO_ERROR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_acceptAdmin",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "addAmount",
                    "type": "uint256"
                }
            ],
            "name": "_addReserves",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "compLikeDelegatee",
                    "type": "address"
                }
            ],
            "name": "_delegateCompLikeTo",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "reduceAmount",
                    "type": "uint256"
                }
            ],
            "name": "_reduceReserves",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract ComptrollerInterface",
                    "name": "newComptroller",
                    "type": "address"
                }
            ],
            "name": "_setComptroller",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract InterestRateModel",
                    "name": "newInterestRateModel",
                    "type": "address"
                }
            ],
            "name": "_setInterestRateModel",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address payable",
                    "name": "newPendingAdmin",
                    "type": "address"
                }
            ],
            "name": "_setPendingAdmin",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "newReserveFactorMantissa",
                    "type": "uint256"
                }
            ],
            "name": "_setReserveFactor",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "accrualBlockNumber",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "accrueInterest",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address payable",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "balanceOfUnderlying",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "borrowAmount",
                    "type": "uint256"
                }
            ],
            "name": "borrow",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "borrowBalanceCurrent",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "borrowBalanceStored",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "borrowIndex",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "borrowRatePerBlock",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "comptroller",
            "outputs": [
                {
                    "internalType": "contract ComptrollerInterface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "exchangeRateCurrent",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "exchangeRateStored",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "getAccountSnapshot",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCash",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "underlying_",
                    "type": "address"
                },
                {
                    "internalType": "contract ComptrollerInterface",
                    "name": "comptroller_",
                    "type": "address"
                },
                {
                    "internalType": "contract InterestRateModel",
                    "name": "interestRateModel_",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "initialExchangeRateMantissa_",
                    "type": "uint256"
                },
                {
                    "internalType": "string",
                    "name": "name_",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "symbol_",
                    "type": "string"
                },
                {
                    "internalType": "uint8",
                    "name": "decimals_",
                    "type": "uint8"
                }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract ComptrollerInterface",
                    "name": "comptroller_",
                    "type": "address"
                },
                {
                    "internalType": "contract InterestRateModel",
                    "name": "interestRateModel_",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "initialExchangeRateMantissa_",
                    "type": "uint256"
                },
                {
                    "internalType": "string",
                    "name": "name_",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "symbol_",
                    "type": "string"
                },
                {
                    "internalType": "uint8",
                    "name": "decimals_",
                    "type": "uint8"
                }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "interestRateModel",
            "outputs": [
                {
                    "internalType": "contract InterestRateModel",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "isCToken",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "repayAmount",
                    "type": "uint256"
                },
                {
                    "internalType": "contract CTokenInterface",
                    "name": "cTokenCollateral",
                    "type": "address"
                }
            ],
            "name": "liquidateBorrow",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "mintAmount",
                    "type": "uint256"
                }
            ],
            "name": "mint",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pendingAdmin",
            "outputs": [
                {
                    "internalType": "address payable",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "protocolSeizeShareMantissa",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "redeemTokens",
                    "type": "uint256"
                }
            ],
            "name": "redeem",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "redeemAmount",
                    "type": "uint256"
                }
            ],
            "name": "redeemUnderlying",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "repayAmount",
                    "type": "uint256"
                }
            ],
            "name": "repayBorrow",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "repayAmount",
                    "type": "uint256"
                }
            ],
            "name": "repayBorrowBehalf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "reserveFactorMantissa",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "liquidator",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "seizeTokens",
                    "type": "uint256"
                }
            ],
            "name": "seize",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "supplyRatePerBlock",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract EIP20NonStandardInterface",
                    "name": "token",
                    "type": "address"
                }
            ],
            "name": "sweepToken",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalBorrows",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalBorrowsCurrent",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalReserves",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "dst",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "src",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "dst",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "underlying",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0x0f8c60e2bbabfe6940399501717dff045f697cb6f959081327bdbbe4467e95ae",
    "receipt": {
        "to": null,
        "from": "0xFb59Ce8986943163F14C590755b29dB2998F2322",
        "contractAddress": "0x1AfD1fF9E441973B7D34c7B8AbE91d94F1B23ce0",
        "transactionIndex": 7,
        "gasUsed": "3561988",
        "logsBloom": "0x
        "blockHash": "0x03222fe2bed97910e951918bcdf63fc9067abc0917d2773fa6271f3b5e873ddc",
        "transactionHash": "0x0f8c60e2bbabfe6940399501717dff045f697cb6f959081327bdbbe4467e95ae",
        "logs": [
            {
                "transactionIndex": 7,
                "blockNumber": 117077309,
                "transactionHash": "0x0f8c60e2bbabfe6940399501717dff045f697cb6f959081327bdbbe4467e95ae",
                "address": "0x1AfD1fF9E441973B7D34c7B8AbE91d94F1B23ce0",
                "topics": [
                    "0x7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d"
                ],
                "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060cf091cd3f50420d50fd7f707414d0df4751c58",
                "logIndex": 34,
                "blockHash": "0x03222fe2bed97910e951918bcdf63fc9067abc0917d2773fa6271f3b5e873ddc"
            },
            {
                "transactionIndex": 7,
                "blockNumber": 117077309,
                "transactionHash": "0x0f8c60e2bbabfe6940399501717dff045f697cb6f959081327bdbbe4467e95ae",
                "address": "0x1AfD1fF9E441973B7D34c7B8AbE91d94F1B23ce0",
                "topics": [
                    "0xedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f926"
                ],
                "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbd75383f6a61d5eb5b43e94e6372df6f7f13c6",
                "logIndex": 35,
                "blockHash": "0x03222fe2bed97910e951918bcdf63fc9067abc0917d2773fa6271f3b5e873ddc"
            }
        ],
        "blockNumber": 117077309,
        "cumulativeGasUsed": "4701484",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x0b2c639c533813f4aa9d7837caf62653d097ff85",
        "0x60CF091cD3f50420d50fD7f707414d0DF4751C58",
        "0xbbbd75383f6A61d5EB5b43e94E6372Df6F7f13c6",
        "200000000000000",
        "Sonne USD Coin",
        "soUSDCnative",
        8,
        "0x37fF10390F22fABDc2137E428A6E6965960D60b6"
    ],
    "numDeployments": 1,
    "solcInputHash": "e8e973f0161830758ef3e380f10d0137",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AcceptAdminPendingAdminCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAddAmount\",\"type\":\"uint256\"}],\"name\":\"AddReservesFactorFreshCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowCashNotAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"BorrowComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateAccrueBorrowInterestFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateAccrueCollateralInterestFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCloseAmountIsUintMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCloseAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCollateralFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateLiquidatorIsBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateRepayBorrowFreshFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateSeizeComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateSeizeLiquidatorIsBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"MintComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RedeemComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemTransferOutNotPossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesAdminCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesCashNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesCashValidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesFreshCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RepayBorrowComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepayBorrowFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetComptrollerOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetInterestRateModelFreshCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetInterestRateModelOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetPendingAdminOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorAdminCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorBoundsCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorFreshCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"TransferComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferTooMuch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NO_ERROR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"_addReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"compLikeDelegatee\",\"type\":\"address\"}],\"name\":\"_delegateCompLikeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSeizeShareMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract EIP20NonStandardInterface\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_addReserves(uint256)\":{\"params\":{\"addAmount\":\"The amount fo underlying token to add as reserves\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_delegateCompLikeTo(address)\":{\"details\":\"CTokens whose underlying are not CompLike should revert here\",\"params\":{\"compLikeDelegatee\":\"The address to delegate votes to\"}},\"_reduceReserves(uint256)\":{\"params\":{\"reduceAmount\":\"Amount of reduction to reserves\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setComptroller(address)\":{\"details\":\"Admin function to set a new comptroller\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setInterestRateModel(address)\":{\"details\":\"Admin function to accrue interest and update the interest rate model\",\"params\":{\"newInterestRateModel\":\"the new interest rate model to use\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setReserveFactor(uint256)\":{\"details\":\"Admin function to accrue interest and set a new reserve factor\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"accrueInterest()\":{\"details\":\"This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage.\"},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"The number of tokens allowed to be spent (-1 means infinite)\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (uint256.max means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The number of tokens owned by `owner`\"}},\"balanceOfUnderlying(address)\":{\"details\":\"This also accrues interest in a transaction\",\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The amount of underlying owned by `owner`\"}},\"borrow(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset to borrow\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"borrowBalanceCurrent(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated after updating borrowIndex\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowBalanceStored(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowRatePerBlock()\":{\"returns\":{\"_0\":\"The borrow interest rate per block, scaled by 1e18\"}},\"constructor\":{\"params\":{\"admin_\":\"Address of the administrator of this token\",\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"ERC-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"ERC-20 name of this token\",\"symbol_\":\"ERC-20 symbol of this token\",\"underlying_\":\"The address of the underlying asset\"}},\"exchangeRateCurrent()\":{\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"exchangeRateStored()\":{\"details\":\"This function does not accrue interest before calculating the exchange rate\",\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"getAccountSnapshot(address)\":{\"details\":\"This is used by comptroller to more efficiently perform liquidity checks.\",\"params\":{\"account\":\"Address of the account to snapshot\"},\"returns\":{\"_0\":\"(possible error, token balance, borrow balance, exchange rate mantissa)\"}},\"getCash()\":{\"returns\":{\"_0\":\"The quantity of underlying asset owned by this contract\"}},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"ERC-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"ERC-20 name of this token\",\"symbol_\":\"ERC-20 symbol of this token\",\"underlying_\":\"The address of the underlying asset\"}},\"initialize(address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"EIP-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"EIP-20 name of this token\",\"symbol_\":\"EIP-20 symbol of this token\"}},\"liquidateBorrow(address,uint256,address)\":{\"params\":{\"borrower\":\"The borrower of this cToken to be liquidated\",\"cTokenCollateral\":\"The market in which to seize collateral from the borrower\",\"repayAmount\":\"The amount of the underlying borrowed asset to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"mint(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"mintAmount\":\"The amount of the underlying asset to supply\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeem(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemTokens\":\"The number of cTokens to redeem into underlying\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeemUnderlying(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemAmount\":\"The amount of underlying to redeem\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrow(uint256)\":{\"params\":{\"repayAmount\":\"The amount to repay, or -1 for the full outstanding amount\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrowBehalf(address,uint256)\":{\"params\":{\"borrower\":\"the account with the debt being payed off\",\"repayAmount\":\"The amount to repay, or -1 for the full outstanding amount\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"seize(address,address,uint256)\":{\"details\":\"Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\",\"params\":{\"borrower\":\"The account having collateral seized\",\"liquidator\":\"The account receiving seized collateral\",\"seizeTokens\":\"The number of cTokens to seize\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"supplyRatePerBlock()\":{\"returns\":{\"_0\":\"The supply interest rate per block, scaled by 1e18\"}},\"sweepToken(address)\":{\"params\":{\"token\":\"The address of the ERC-20 token to sweep\"}},\"totalBorrowsCurrent()\":{\"returns\":{\"_0\":\"The total borrows with interest\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"title\":\"Compound's CErc20Immutable Contract\",\"version\":1},\"userdoc\":{\"events\":{\"AccrueInterest(uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when interest is accrued\"},\"Approval(address,address,uint256)\":{\"notice\":\"EIP20 Approval event\"},\"Borrow(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when underlying is borrowed\"},\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when a borrow is liquidated\"},\"Mint(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are minted\"},\"NewAdmin(address,address)\":{\"notice\":\"Event emitted when pendingAdmin is accepted, which means admin is updated\"},\"NewComptroller(address,address)\":{\"notice\":\"Event emitted when comptroller is changed\"},\"NewMarketInterestRateModel(address,address)\":{\"notice\":\"Event emitted when interestRateModel is changed\"},\"NewPendingAdmin(address,address)\":{\"notice\":\"Event emitted when pendingAdmin is changed\"},\"NewReserveFactor(uint256,uint256)\":{\"notice\":\"Event emitted when the reserve factor is changed\"},\"Redeem(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are redeemed\"},\"RepayBorrow(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a borrow is repaid\"},\"ReservesAdded(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are added\"},\"ReservesReduced(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are reduced\"},\"Transfer(address,address,uint256)\":{\"notice\":\"EIP20 Transfer event\"}},\"kind\":\"user\",\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_addReserves(uint256)\":{\"notice\":\"The sender adds to reserves.\"},\"_delegateCompLikeTo(address)\":{\"notice\":\"Admin call to delegate the votes of the COMP-like underlying\"},\"_reduceReserves(uint256)\":{\"notice\":\"Accrues interest and reduces reserves by transferring to admin\"},\"_setComptroller(address)\":{\"notice\":\"Sets a new comptroller for the market\"},\"_setInterestRateModel(address)\":{\"notice\":\"accrues interest and updates the interest rate model using _setInterestRateModelFresh\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"_setReserveFactor(uint256)\":{\"notice\":\"accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\"},\"accrualBlockNumber()\":{\"notice\":\"Block number that interest was last accrued at\"},\"accrueInterest()\":{\"notice\":\"Applies accrued interest to total borrows and reserves\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the token balance of the `owner`\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Get the underlying balance of the `owner`\"},\"borrow(uint256)\":{\"notice\":\"Sender borrows assets from the protocol to their own address\"},\"borrowBalanceCurrent(address)\":{\"notice\":\"Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\"},\"borrowBalanceStored(address)\":{\"notice\":\"Return the borrow balance of account based on stored data\"},\"borrowIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the opening of the market\"},\"borrowRatePerBlock()\":{\"notice\":\"Returns the current per-block borrow interest rate for this cToken\"},\"comptroller()\":{\"notice\":\"Contract which oversees inter-cToken operations\"},\"constructor\":{\"notice\":\"Construct a new money market\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"exchangeRateCurrent()\":{\"notice\":\"Accrue interest then return the up-to-date exchange rate\"},\"exchangeRateStored()\":{\"notice\":\"Calculates the exchange rate from the underlying to the CToken\"},\"getAccountSnapshot(address)\":{\"notice\":\"Get a snapshot of the account's balances, and the cached exchange rate\"},\"getCash()\":{\"notice\":\"Get cash balance of this cToken in the underlying asset\"},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the new money market\"},\"initialize(address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the money market\"},\"interestRateModel()\":{\"notice\":\"Model which tells what the current interest rate should be\"},\"isCToken()\":{\"notice\":\"Indicator that this is a CToken contract (for inspection)\"},\"liquidateBorrow(address,uint256,address)\":{\"notice\":\"The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator.\"},\"mint(uint256)\":{\"notice\":\"Sender supplies assets into the market and receives cTokens in exchange\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"protocolSeizeShareMantissa()\":{\"notice\":\"Share of seized collateral that is added to reserves\"},\"redeem(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for the underlying asset\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for a specified amount of underlying asset\"},\"repayBorrow(uint256)\":{\"notice\":\"Sender repays their own borrow\"},\"repayBorrowBehalf(address,uint256)\":{\"notice\":\"Sender repays a borrow belonging to borrower\"},\"reserveFactorMantissa()\":{\"notice\":\"Fraction of interest currently set aside for reserves\"},\"seize(address,address,uint256)\":{\"notice\":\"Transfers collateral tokens (this market) to the liquidator.\"},\"supplyRatePerBlock()\":{\"notice\":\"Returns the current per-block supply interest rate for this cToken\"},\"sweepToken(address)\":{\"notice\":\"A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalBorrows()\":{\"notice\":\"Total amount of outstanding borrows of the underlying in this market\"},\"totalBorrowsCurrent()\":{\"notice\":\"Returns the current total borrows plus accrued interest\"},\"totalReserves()\":{\"notice\":\"Total amount of reserves of the underlying held in this market\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"underlying()\":{\"notice\":\"Underlying asset for this CToken\"}},\"notice\":\"CTokens which wrap an EIP-20 underlying and are immutable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CErc20Immutable.sol\":\"CErc20Immutable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\n\\r\\ninterface CompLike {\\r\\n    function delegate(address delegatee) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Compound's CErc20 Contract\\r\\n * @notice CTokens which wrap an EIP-20 underlying\\r\\n * @author Compound\\r\\n */\\r\\ncontract CErc20 is CToken, CErc20Interface {\\r\\n    /**\\r\\n     * @notice Initialize the new money market\\r\\n     * @param underlying_ The address of the underlying asset\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ ERC-20 name of this token\\r\\n     * @param symbol_ ERC-20 symbol of this token\\r\\n     * @param decimals_ ERC-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(address underlying_,\\r\\n                        ComptrollerInterface comptroller_,\\r\\n                        InterestRateModel interestRateModel_,\\r\\n                        uint initialExchangeRateMantissa_,\\r\\n                        string memory name_,\\r\\n                        string memory symbol_,\\r\\n                        uint8 decimals_) public {\\r\\n        // CToken initialize does the bulk of the work\\r\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\r\\n\\r\\n        // Set underlying and sanity check it\\r\\n        underlying = underlying_;\\r\\n        EIP20Interface(underlying).totalSupply();\\r\\n    }\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function mint(uint mintAmount) override external returns (uint) {\\r\\n        mintInternal(mintAmount);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeem(uint redeemTokens) override external returns (uint) {\\r\\n        redeemInternal(redeemTokens);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to redeem\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemUnderlying(uint redeemAmount) override external returns (uint) {\\r\\n        redeemUnderlyingInternal(redeemAmount);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sender borrows assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrow(uint borrowAmount) override external returns (uint) {\\r\\n        borrowInternal(borrowAmount);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function repayBorrow(uint repayAmount) override external returns (uint) {\\r\\n        repayBorrowInternal(repayAmount);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) override external returns (uint) {\\r\\n        repayBorrowBehalfInternal(borrower, repayAmount);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) override external returns (uint) {\\r\\n        liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\\r\\n     * @param token The address of the ERC-20 token to sweep\\r\\n     */\\r\\n    function sweepToken(EIP20NonStandardInterface token) override external {\\r\\n        require(msg.sender == admin, \\\"CErc20::sweepToken: only admin can sweep tokens\\\");\\r\\n        require(address(token) != underlying, \\\"CErc20::sweepToken: can not sweep underlying token\\\");\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        token.transfer(admin, balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender adds to reserves.\\r\\n     * @param addAmount The amount fo underlying token to add as reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReserves(uint addAmount) override external returns (uint) {\\r\\n        return _addReservesInternal(addAmount);\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying tokens owned by this contract\\r\\n     */\\r\\n    function getCashPrior() virtual override internal view returns (uint) {\\r\\n        EIP20Interface token = EIP20Interface(underlying);\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\r\\n     *      This will revert due to insufficient balance or insufficient allowance.\\r\\n     *      This function returns the actual amount received,\\r\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\r\\n     *\\r\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\r\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n     */\\r\\n    function doTransferIn(address from, uint amount) virtual override internal returns (uint) {\\r\\n        // Read from storage once\\r\\n        address underlying_ = underlying;\\r\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying_);\\r\\n        uint balanceBefore = EIP20Interface(underlying_).balanceOf(address(this));\\r\\n        token.transferFrom(from, address(this), amount);\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            switch returndatasize()\\r\\n                case 0 {                       // This is a non-standard ERC-20\\r\\n                    success := not(0)          // set success to true\\r\\n                }\\r\\n                case 32 {                      // This is a compliant ERC-20\\r\\n                    returndatacopy(0, 0, 32)\\r\\n                    success := mload(0)        // Set `success = returndata` of override external call\\r\\n                }\\r\\n                default {                      // This is an excessively non-compliant ERC-20, revert.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n        }\\r\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\r\\n\\r\\n        // Calculate the amount that was *actually* transferred\\r\\n        uint balanceAfter = EIP20Interface(underlying_).balanceOf(address(this));\\r\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\r\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\r\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\r\\n     *      it is >= amount, this should not revert in normal conditions.\\r\\n     *\\r\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\r\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint amount) virtual override internal {\\r\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\r\\n        token.transfer(to, amount);\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            switch returndatasize()\\r\\n                case 0 {                      // This is a non-standard ERC-20\\r\\n                    success := not(0)          // set success to true\\r\\n                }\\r\\n                case 32 {                     // This is a compliant ERC-20\\r\\n                    returndatacopy(0, 0, 32)\\r\\n                    success := mload(0)        // Set `success = returndata` of override external call\\r\\n                }\\r\\n                default {                     // This is an excessively non-compliant ERC-20, revert.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n        }\\r\\n        require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Admin call to delegate the votes of the COMP-like underlying\\r\\n    * @param compLikeDelegatee The address to delegate votes to\\r\\n    * @dev CTokens whose underlying are not CompLike should revert here\\r\\n    */\\r\\n    function _delegateCompLikeTo(address compLikeDelegatee) external {\\r\\n        require(msg.sender == admin, \\\"only the admin may set the comp-like delegate\\\");\\r\\n        CompLike(underlying).delegate(compLikeDelegatee);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x248c13982104a3731db5bb91981ea88684596fbf569770a615a4ce56f2eaf85e\",\"license\":\"BSD-3-Clause\"},\"contracts/CErc20Immutable.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./CErc20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound's CErc20Immutable Contract\\r\\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\\r\\n * @author Compound\\r\\n */\\r\\ncontract CErc20Immutable is CErc20 {\\r\\n    /**\\r\\n     * @notice Construct a new money market\\r\\n     * @param underlying_ The address of the underlying asset\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ ERC-20 name of this token\\r\\n     * @param symbol_ ERC-20 symbol of this token\\r\\n     * @param decimals_ ERC-20 decimal precision of this token\\r\\n     * @param admin_ Address of the administrator of this token\\r\\n     */\\r\\n    constructor(address underlying_,\\r\\n                ComptrollerInterface comptroller_,\\r\\n                InterestRateModel interestRateModel_,\\r\\n                uint initialExchangeRateMantissa_,\\r\\n                string memory name_,\\r\\n                string memory symbol_,\\r\\n                uint8 decimals_,\\r\\n                address payable admin_) {\\r\\n        // Creator of the contract is admin during initialization\\r\\n        admin = payable(msg.sender);\\r\\n\\r\\n        // Initialize the market\\r\\n        initialize(underlying_, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\r\\n\\r\\n        // Set the proper admin now that initialization is done\\r\\n        admin = admin_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5617651817058735066ec9f91c47428648f7a215ed9b40089d5018e643e629ad\",\"license\":\"BSD-3-Clause\"},\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./CTokenInterfaces.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./EIP20Interface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound's CToken Contract\\r\\n * @notice Abstract base for CTokens\\r\\n * @author Compound\\r\\n */\\r\\nabstract contract CToken is\\r\\n    CTokenInterface,\\r\\n    ExponentialNoError,\\r\\n    TokenErrorReporter\\r\\n{\\r\\n    /**\\r\\n     * @notice Initialize the money market\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ EIP-20 name of this token\\r\\n     * @param symbol_ EIP-20 symbol of this token\\r\\n     * @param decimals_ EIP-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(\\r\\n        ComptrollerInterface comptroller_,\\r\\n        InterestRateModel interestRateModel_,\\r\\n        uint256 initialExchangeRateMantissa_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n    ) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\r\\n        require(\\r\\n            accrualBlockNumber == 0 && borrowIndex == 0,\\r\\n            \\\"market may only be initialized once\\\"\\r\\n        );\\r\\n\\r\\n        // Set initial exchange rate\\r\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\r\\n        require(\\r\\n            initialExchangeRateMantissa > 0,\\r\\n            \\\"initial exchange rate must be greater than zero.\\\"\\r\\n        );\\r\\n\\r\\n        // Set the comptroller\\r\\n        uint256 err = _setComptroller(comptroller_);\\r\\n        require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\r\\n\\r\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\r\\n        accrualBlockNumber = getBlockNumber();\\r\\n        borrowIndex = mantissaOne;\\r\\n\\r\\n        // Set the interest rate model (depends on block number / borrow index)\\r\\n        err = _setInterestRateModelFresh(interestRateModel_);\\r\\n        require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\r\\n\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        decimals = decimals_;\\r\\n\\r\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\r\\n     * @dev Called by both `transfer` and `transferFrom` internally\\r\\n     * @param spender The address of the account performing the transfer\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param tokens The number of tokens to transfer\\r\\n     * @return 0 if the transfer succeeded, else revert\\r\\n     */\\r\\n    function transferTokens(\\r\\n        address spender,\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 tokens\\r\\n    ) internal returns (uint256) {\\r\\n        /* Fail if transfer not allowed */\\r\\n        uint256 allowed = comptroller.transferAllowed(\\r\\n            address(this),\\r\\n            src,\\r\\n            dst,\\r\\n            tokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert TransferComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Do not allow self-transfers */\\r\\n        if (src == dst) {\\r\\n            revert TransferNotAllowed();\\r\\n        }\\r\\n\\r\\n        /* Get the allowance, infinite for the account owner */\\r\\n        uint256 startingAllowance = 0;\\r\\n        if (spender == src) {\\r\\n            startingAllowance = type(uint256).max;\\r\\n        } else {\\r\\n            startingAllowance = transferAllowances[src][spender];\\r\\n        }\\r\\n\\r\\n        /* Do the calculations, checking for {under,over}flow */\\r\\n        uint256 allowanceNew = startingAllowance - tokens;\\r\\n        uint256 srcTokensNew = accountTokens[src] - tokens;\\r\\n        uint256 dstTokensNew = accountTokens[dst] + tokens;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        accountTokens[src] = srcTokensNew;\\r\\n        accountTokens[dst] = dstTokensNew;\\r\\n\\r\\n        /* Eat some of the allowance (if necessary) */\\r\\n        if (startingAllowance != type(uint256).max) {\\r\\n            transferAllowances[src][spender] = allowanceNew;\\r\\n        }\\r\\n\\r\\n        /* We emit a Transfer event */\\r\\n        emit Transfer(src, dst, tokens);\\r\\n\\r\\n        // unused function\\r\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (bool)\\r\\n    {\\r\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) external override nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address src = msg.sender;\\r\\n        transferAllowances[src][spender] = amount;\\r\\n        emit Approval(src, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return transferAllowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the token balance of the `owner`\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The number of tokens owned by `owner`\\r\\n     */\\r\\n    function balanceOf(address owner) external view override returns (uint256) {\\r\\n        return accountTokens[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying balance of the `owner`\\r\\n     * @dev This also accrues interest in a transaction\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The amount of underlying owned by `owner`\\r\\n     */\\r\\n    function balanceOfUnderlying(address owner)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\r\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\r\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\r\\n     * @param account Address of the account to snapshot\\r\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\r\\n     */\\r\\n    function getAccountSnapshot(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            NO_ERROR,\\r\\n            accountTokens[account],\\r\\n            borrowBalanceStoredInternal(account),\\r\\n            exchangeRateStoredInternal()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to simply retrieve block number\\r\\n     *  This exists mainly for inheriting test contracts to stub this result.\\r\\n     */\\r\\n    function getBlockNumber() internal view virtual returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\r\\n     * @return The borrow interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function borrowRatePerBlock() external view override returns (uint256) {\\r\\n        return\\r\\n            interestRateModel.getBorrowRate(\\r\\n                getCashPrior(),\\r\\n                totalBorrows,\\r\\n                totalReserves\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block supply interest rate for this cToken\\r\\n     * @return The supply interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function supplyRatePerBlock() external view override returns (uint256) {\\r\\n        return\\r\\n            interestRateModel.getSupplyRate(\\r\\n                getCashPrior(),\\r\\n                totalBorrows,\\r\\n                totalReserves,\\r\\n                reserveFactorMantissa\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current total borrows plus accrued interest\\r\\n     * @return The total borrows with interest\\r\\n     */\\r\\n    function totalBorrowsCurrent()\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return totalBorrows;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\r\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceCurrent(address account)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return borrowBalanceStored(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceStored(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return borrowBalanceStoredInternal(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\r\\n     */\\r\\n    function borrowBalanceStoredInternal(address account)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        /* Get borrowBalance and borrowIndex */\\r\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\r\\n\\r\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\r\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\r\\n         */\\r\\n        if (borrowSnapshot.principal == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        /* Calculate new borrow balance using the interest index:\\r\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\r\\n         */\\r\\n        uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\r\\n        return principalTimesIndex / borrowSnapshot.interestIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest then return the up-to-date exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateCurrent()\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        return exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStored() public view override returns (uint256) {\\r\\n        return exchangeRateStoredInternal();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStoredInternal()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _totalSupply = totalSupply;\\r\\n        if (_totalSupply == 0) {\\r\\n            /*\\r\\n             * If there are no tokens minted:\\r\\n             *  exchangeRate = initialExchangeRate\\r\\n             */\\r\\n            return initialExchangeRateMantissa;\\r\\n        } else {\\r\\n            /*\\r\\n             * Otherwise:\\r\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\r\\n             */\\r\\n            uint256 totalCash = getCashPrior();\\r\\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\\r\\n                totalBorrows -\\r\\n                totalReserves;\\r\\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\\r\\n                _totalSupply;\\r\\n\\r\\n            return exchangeRate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get cash balance of this cToken in the underlying asset\\r\\n     * @return The quantity of underlying asset owned by this contract\\r\\n     */\\r\\n    function getCash() external view override returns (uint256) {\\r\\n        return getCashPrior();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Applies accrued interest to total borrows and reserves\\r\\n     * @dev This calculates interest accrued from the last checkpointed block\\r\\n     *   up to the current block and writes new checkpoint to storage.\\r\\n     */\\r\\n    function accrueInterest() public virtual override returns (uint256) {\\r\\n        /* Remember the initial block number */\\r\\n        uint256 currentBlockNumber = getBlockNumber();\\r\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\r\\n\\r\\n        /* Short-circuit accumulating 0 interest */\\r\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\r\\n            return NO_ERROR;\\r\\n        }\\r\\n\\r\\n        /* Read the previous values out of storage */\\r\\n        uint256 cashPrior = getCashPrior();\\r\\n        uint256 borrowsPrior = totalBorrows;\\r\\n        uint256 reservesPrior = totalReserves;\\r\\n        uint256 borrowIndexPrior = borrowIndex;\\r\\n\\r\\n        /* Calculate the current borrow interest rate */\\r\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\r\\n            cashPrior,\\r\\n            borrowsPrior,\\r\\n            reservesPrior\\r\\n        );\\r\\n        require(\\r\\n            borrowRateMantissa <= borrowRateMaxMantissa,\\r\\n            \\\"borrow rate is absurdly high\\\"\\r\\n        );\\r\\n\\r\\n        /* Calculate the number of blocks elapsed since the last accrual */\\r\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\r\\n\\r\\n        /*\\r\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\r\\n         *  simpleInterestFactor = borrowRate * blockDelta\\r\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\r\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\r\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\r\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\r\\n         */\\r\\n\\r\\n        Exp memory simpleInterestFactor = mul_(\\r\\n            Exp({mantissa: borrowRateMantissa}),\\r\\n            blockDelta\\r\\n        );\\r\\n        uint256 interestAccumulated = mul_ScalarTruncate(\\r\\n            simpleInterestFactor,\\r\\n            borrowsPrior\\r\\n        );\\r\\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\r\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\r\\n            Exp({mantissa: reserveFactorMantissa}),\\r\\n            interestAccumulated,\\r\\n            reservesPrior\\r\\n        );\\r\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\\r\\n            simpleInterestFactor,\\r\\n            borrowIndexPrior,\\r\\n            borrowIndexPrior\\r\\n        );\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accrualBlockNumber = currentBlockNumber;\\r\\n        borrowIndex = borrowIndexNew;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* We emit an AccrueInterest event */\\r\\n        emit AccrueInterest(\\r\\n            cashPrior,\\r\\n            interestAccumulated,\\r\\n            borrowIndexNew,\\r\\n            totalBorrowsNew\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     */\\r\\n    function mintInternal(uint256 mintAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\r\\n        mintFresh(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param minter The address of the account which is supplying the assets\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     */\\r\\n    function mintFresh(address minter, uint256 mintAmount) internal {\\r\\n        /* Fail if mint not allowed */\\r\\n        uint256 allowed = comptroller.mintAllowed(\\r\\n            address(this),\\r\\n            minter,\\r\\n            mintAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert MintComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert MintFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        uint256 actualMintAmount = doTransferIn(minter, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        uint256 mintTokens = div_(actualMintAmount, exchangeRate);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\r\\n         * And write them into storage\\r\\n         */\\r\\n        totalSupply = totalSupply + mintTokens;\\r\\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\\r\\n\\r\\n        /* We emit a Mint event, and a Transfer event */\\r\\n        emit Mint(minter, actualMintAmount, mintTokens);\\r\\n        emit Transfer(address(this), minter, mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\r\\n     */\\r\\n    function redeemInternal(uint256 redeemTokens) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\r\\n     */\\r\\n    function redeemUnderlyingInternal(uint256 redeemAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param redeemer The address of the account which is redeeming the tokens\\r\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     */\\r\\n    function redeemFresh(\\r\\n        address payable redeemer,\\r\\n        uint256 redeemTokensIn,\\r\\n        uint256 redeemAmountIn\\r\\n    ) internal {\\r\\n        require(\\r\\n            redeemTokensIn == 0 || redeemAmountIn == 0,\\r\\n            \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\r\\n        );\\r\\n\\r\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n\\r\\n        uint256 redeemTokens;\\r\\n        uint256 redeemAmount;\\r\\n        /* If redeemTokensIn > 0: */\\r\\n        if (redeemTokensIn > 0) {\\r\\n            /*\\r\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\r\\n             *  redeemTokens = redeemTokensIn\\r\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\r\\n             */\\r\\n            redeemTokens = redeemTokensIn;\\r\\n            redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\r\\n        } else {\\r\\n            /*\\r\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\r\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\r\\n             *  redeemAmount = redeemAmountIn\\r\\n             */\\r\\n            redeemTokens = div_(redeemAmountIn, exchangeRate);\\r\\n            redeemAmount = redeemAmountIn;\\r\\n        }\\r\\n\\r\\n        /* Fail if redeem not allowed */\\r\\n        uint256 allowed = comptroller.redeemAllowed(\\r\\n            address(this),\\r\\n            redeemer,\\r\\n            redeemTokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert RedeemComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert RedeemFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient cash */\\r\\n        if (getCashPrior() < redeemAmount) {\\r\\n            revert RedeemTransferOutNotPossible();\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We write the previously calculated values into storage.\\r\\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\r\\n         */\\r\\n        totalSupply = totalSupply - redeemTokens;\\r\\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken has redeemAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(redeemer, redeemAmount);\\r\\n\\r\\n        /* We emit a Transfer event, and a Redeem event */\\r\\n        emit Transfer(redeemer, address(this), redeemTokens);\\r\\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.redeemVerify(\\r\\n            address(this),\\r\\n            redeemer,\\r\\n            redeemAmount,\\r\\n            redeemTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender borrows assets from the protocol to their own address\\r\\n     * @param borrowAmount The amount of the underlying asset to borrow\\r\\n     */\\r\\n    function borrowInternal(uint256 borrowAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        borrowFresh(payable(msg.sender), borrowAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Users borrow assets from the protocol to their own address\\r\\n     * @param borrowAmount The amount of the underlying asset to borrow\\r\\n     */\\r\\n    function borrowFresh(address payable borrower, uint256 borrowAmount)\\r\\n        internal\\r\\n    {\\r\\n        /* Fail if borrow not allowed */\\r\\n        uint256 allowed = comptroller.borrowAllowed(\\r\\n            address(this),\\r\\n            borrower,\\r\\n            borrowAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert BorrowComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert BorrowFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\r\\n        if (getCashPrior() < borrowAmount) {\\r\\n            revert BorrowCashNotAvailable();\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\r\\n         *  accountBorrowNew = accountBorrow + borrowAmount\\r\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\r\\n         */\\r\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\r\\n        uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\r\\n        uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We write the previously calculated values into storage.\\r\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\r\\n        `*/\\r\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken borrowAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(borrower, borrowAmount);\\r\\n\\r\\n        /* We emit a Borrow event */\\r\\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\r\\n     */\\r\\n    function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\r\\n     */\\r\\n    function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\r\\n     * @param payer the account paying off the borrow\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\r\\n     * @return (uint) the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowFresh(\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint256 repayAmount\\r\\n    ) internal returns (uint256) {\\r\\n        /* Fail if repayBorrow not allowed */\\r\\n        uint256 allowed = comptroller.repayBorrowAllowed(\\r\\n            address(this),\\r\\n            payer,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert RepayBorrowComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert RepayBorrowFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\r\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\r\\n\\r\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\r\\n        uint256 repayAmountFinal = repayAmount == type(uint256).max\\r\\n            ? accountBorrowsPrev\\r\\n            : repayAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the payer and the repayAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional repayAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *   it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n        uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\r\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\r\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\r\\n         */\\r\\n        uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\r\\n        uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n\\r\\n        /* We emit a RepayBorrow event */\\r\\n        emit RepayBorrow(\\r\\n            payer,\\r\\n            borrower,\\r\\n            actualRepayAmount,\\r\\n            accountBorrowsNew,\\r\\n            totalBorrowsNew\\r\\n        );\\r\\n\\r\\n        return actualRepayAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     */\\r\\n    function liquidateBorrowInternal(\\r\\n        address borrower,\\r\\n        uint256 repayAmount,\\r\\n        CTokenInterface cTokenCollateral\\r\\n    ) internal nonReentrant {\\r\\n        accrueInterest();\\r\\n\\r\\n        uint256 error = cTokenCollateral.accrueInterest();\\r\\n        if (error != NO_ERROR) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            revert LiquidateAccrueCollateralInterestFailed(error);\\r\\n        }\\r\\n\\r\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        liquidateBorrowFresh(\\r\\n            msg.sender,\\r\\n            borrower,\\r\\n            repayAmount,\\r\\n            cTokenCollateral\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The liquidator liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param liquidator The address repaying the borrow and seizing collateral\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     */\\r\\n    function liquidateBorrowFresh(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 repayAmount,\\r\\n        CTokenInterface cTokenCollateral\\r\\n    ) internal {\\r\\n        /* Fail if liquidate not allowed */\\r\\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\\r\\n            address(this),\\r\\n            address(cTokenCollateral),\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert LiquidateComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert LiquidateFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Verify cTokenCollateral market's block number equals current block number */\\r\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\r\\n            revert LiquidateCollateralFreshnessCheck();\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            revert LiquidateLiquidatorIsBorrower();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = 0 */\\r\\n        if (repayAmount == 0) {\\r\\n            revert LiquidateCloseAmountIsZero();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = -1 */\\r\\n        if (repayAmount == type(uint256).max) {\\r\\n            revert LiquidateCloseAmountIsUintMax();\\r\\n        }\\r\\n\\r\\n        /* Fail if repayBorrow fails */\\r\\n        uint256 actualRepayAmount = repayBorrowFresh(\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            repayAmount\\r\\n        );\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We calculate the number of collateral tokens that will be seized */\\r\\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\\r\\n            .liquidateCalculateSeizeTokens(\\r\\n                address(this),\\r\\n                address(cTokenCollateral),\\r\\n                actualRepayAmount\\r\\n            );\\r\\n        require(\\r\\n            amountSeizeError == NO_ERROR,\\r\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\"\\r\\n        );\\r\\n\\r\\n        /* Revert if borrower collateral token balance < seizeTokens */\\r\\n        require(\\r\\n            cTokenCollateral.balanceOf(borrower) >= seizeTokens,\\r\\n            \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\"\\r\\n        );\\r\\n\\r\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\r\\n        if (address(cTokenCollateral) == address(this)) {\\r\\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\\r\\n        } else {\\r\\n            require(\\r\\n                cTokenCollateral.seize(liquidator, borrower, seizeTokens) ==\\r\\n                    NO_ERROR,\\r\\n                \\\"token seizure failed\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        /* We emit a LiquidateBorrow event */\\r\\n        emit LiquidateBorrow(\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            actualRepayAmount,\\r\\n            address(cTokenCollateral),\\r\\n            seizeTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\r\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seize(\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 seizeTokens\\r\\n    ) external override nonReentrant returns (uint256) {\\r\\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\r\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\r\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     */\\r\\n    function seizeInternal(\\r\\n        address seizerToken,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint256 seizeTokens\\r\\n    ) internal {\\r\\n        /* Fail if seize not allowed */\\r\\n        uint256 allowed = comptroller.seizeAllowed(\\r\\n            address(this),\\r\\n            seizerToken,\\r\\n            liquidator,\\r\\n            borrower,\\r\\n            seizeTokens\\r\\n        );\\r\\n        if (allowed != 0) {\\r\\n            revert LiquidateSeizeComptrollerRejection(allowed);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            revert LiquidateSeizeLiquidatorIsBorrower();\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\r\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\r\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\r\\n         */\\r\\n        uint256 protocolSeizeTokens = mul_(\\r\\n            seizeTokens,\\r\\n            Exp({mantissa: protocolSeizeShareMantissa})\\r\\n        );\\r\\n        uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\r\\n        uint256 protocolSeizeAmount = mul_ScalarTruncate(\\r\\n            exchangeRate,\\r\\n            protocolSeizeTokens\\r\\n        );\\r\\n        uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the calculated values into storage */\\r\\n        totalReserves = totalReservesNew;\\r\\n        totalSupply = totalSupply - protocolSeizeTokens;\\r\\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\r\\n        accountTokens[liquidator] =\\r\\n            accountTokens[liquidator] +\\r\\n            liquidatorSeizeTokens;\\r\\n\\r\\n        /* Emit a Transfer event */\\r\\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\r\\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\\r\\n        emit ReservesAdded(\\r\\n            address(this),\\r\\n            protocolSeizeAmount,\\r\\n            totalReservesNew\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n     * @param newPendingAdmin New pending admin.\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setPendingAdmin(address payable newPendingAdmin)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetPendingAdminOwnerCheck();\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n     * @dev Admin function for pending admin to accept role and update admin\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _acceptAdmin() external override returns (uint256) {\\r\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\r\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\r\\n            revert AcceptAdminPendingAdminCheck();\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = payable(address(0));\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new comptroller for the market\\r\\n     * @dev Admin function to set a new comptroller\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setComptroller(ComptrollerInterface newComptroller)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetComptrollerOwnerCheck();\\r\\n        }\\r\\n\\r\\n        ComptrollerInterface oldComptroller = comptroller;\\r\\n        // Ensure invoke comptroller.isComptroller() returns true\\r\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set market's comptroller to newComptroller\\r\\n        comptroller = newComptroller;\\r\\n\\r\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\r\\n        emit NewComptroller(oldComptroller, newComptroller);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\r\\n     * @dev Admin function to accrue interest and set a new reserve factor\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\r\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\r\\n     * @dev Admin function to set a new reserve factor\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetReserveFactorAdminCheck();\\r\\n        }\\r\\n\\r\\n        // Verify market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert SetReserveFactorFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\r\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\r\\n            revert SetReserveFactorBoundsCheck();\\r\\n        }\\r\\n\\r\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\r\\n        reserveFactorMantissa = newReserveFactorMantissa;\\r\\n\\r\\n        emit NewReserveFactor(\\r\\n            oldReserveFactorMantissa,\\r\\n            newReserveFactorMantissa\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReservesInternal(uint256 addAmount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n\\r\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\r\\n        _addReservesFresh(addAmount);\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add reserves by transferring from caller\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\r\\n     */\\r\\n    function _addReservesFresh(uint256 addAmount)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        // totalReserves + actualAddAmount\\r\\n        uint256 totalReservesNew;\\r\\n        uint256 actualAddAmount;\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert AddReservesFactorFreshCheck(actualAddAmount);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the caller and the addAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional addAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *  it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n\\r\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\r\\n\\r\\n        totalReservesNew = totalReserves + actualAddAmount;\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\r\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\r\\n\\r\\n        /* Return (NO_ERROR, actualAddAmount) */\\r\\n        return (NO_ERROR, actualAddAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReserves(uint256 reduceAmount)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\r\\n        return _reduceReservesFresh(reduceAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces reserves by transferring to admin\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReservesFresh(uint256 reduceAmount)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // totalReserves - reduceAmount\\r\\n        uint256 totalReservesNew;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert ReduceReservesAdminCheck();\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert ReduceReservesFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() < reduceAmount) {\\r\\n            revert ReduceReservesCashNotAvailable();\\r\\n        }\\r\\n\\r\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\r\\n        if (reduceAmount > totalReserves) {\\r\\n            revert ReduceReservesCashValidation();\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        totalReservesNew = totalReserves - reduceAmount;\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n        doTransferOut(admin, reduceAmount);\\r\\n\\r\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\r\\n     * @dev Admin function to accrue interest and update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\\r\\n        public\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        accrueInterest();\\r\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\r\\n        return _setInterestRateModelFresh(newInterestRateModel);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\r\\n     * @dev Admin function to update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Used to store old model for use in the event that is emitted on success\\r\\n        InterestRateModel oldInterestRateModel;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            revert SetInterestRateModelOwnerCheck();\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            revert SetInterestRateModelFreshCheck();\\r\\n        }\\r\\n\\r\\n        // Track the market's current interest rate model\\r\\n        oldInterestRateModel = interestRateModel;\\r\\n\\r\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\r\\n        require(\\r\\n            newInterestRateModel.isInterestRateModel(),\\r\\n            \\\"marker method returned false\\\"\\r\\n        );\\r\\n\\r\\n        // Set the interest rate model to newInterestRateModel\\r\\n        interestRateModel = newInterestRateModel;\\r\\n\\r\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\r\\n        emit NewMarketInterestRateModel(\\r\\n            oldInterestRateModel,\\r\\n            newInterestRateModel\\r\\n        );\\r\\n\\r\\n        return NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying owned by this contract\\r\\n     */\\r\\n    function getCashPrior() internal view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\r\\n     *  This may revert due to insufficient balance or insufficient allowance.\\r\\n     */\\r\\n    function doTransferIn(address from, uint256 amount)\\r\\n        internal\\r\\n        virtual\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\r\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\r\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\\r\\n\\r\\n    /*** Reentrancy Guard ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x17f98706dda2550609f3ad1a0f587b42dafd4ef6e2fc294b29d86eb84baf6444\",\"license\":\"BSD-3-Clause\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\n\\r\\ncontract CTokenStorage {\\r\\n    /**\\r\\n     * @dev Guard variable for re-entrancy checks\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token name for this token\\r\\n     */\\r\\n    string public name;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token symbol for this token\\r\\n     */\\r\\n    string public symbol;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token decimals for this token\\r\\n     */\\r\\n    uint8 public decimals;\\r\\n\\r\\n    // Maximum borrow rate that can ever be applied (.00004% / block)\\r\\n    uint internal constant borrowRateMaxMantissa = 0.00004e16;\\r\\n\\r\\n    // Maximum fraction of interest that can be set aside for reserves\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address payable public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract which oversees inter-cToken operations\\r\\n     */\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /**\\r\\n     * @notice Model which tells what the current interest rate should be\\r\\n     */\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for reserves\\r\\n     */\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Block number that interest was last accrued at\\r\\n     */\\r\\n    uint public accrualBlockNumber;\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n     */\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n     */\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of reserves of the underlying held in this market\\r\\n     */\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of tokens in circulation\\r\\n     */\\r\\n    uint public totalSupply;\\r\\n\\r\\n    // Official record of token balances for each account\\r\\n    mapping (address => uint) internal accountTokens;\\r\\n\\r\\n    // Approved token transfer amounts on behalf of others\\r\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    // Mapping of account addresses to outstanding borrow balances\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Share of seized collateral that is added to reserves\\r\\n     */\\r\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\r\\n}\\r\\n\\r\\nabstract contract CTokenInterface is CTokenStorage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a CToken contract (for inspection)\\r\\n     */\\r\\n    bool public constant isCToken = true;\\r\\n\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interest is accrued\\r\\n     */\\r\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted\\r\\n     */\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed\\r\\n     */\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when underlying is borrowed\\r\\n     */\\r\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is repaid\\r\\n     */\\r\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is liquidated\\r\\n     */\\r\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\r\\n\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is changed\\r\\n     */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n     */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when comptroller is changed\\r\\n     */\\r\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interestRateModel is changed\\r\\n     */\\r\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserve factor is changed\\r\\n     */\\r\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are added\\r\\n     */\\r\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are reduced\\r\\n     */\\r\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Transfer event\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Approval event\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\r\\n    function approve(address spender, uint amount) virtual external returns (bool);\\r\\n    function allowance(address owner, address spender) virtual external view returns (uint);\\r\\n    function balanceOf(address owner) virtual external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\r\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() virtual external view returns (uint);\\r\\n    function supplyRatePerBlock() virtual external view returns (uint);\\r\\n    function totalBorrowsCurrent() virtual external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\r\\n    function borrowBalanceStored(address account) virtual external view returns (uint);\\r\\n    function exchangeRateCurrent() virtual external returns (uint);\\r\\n    function exchangeRateStored() virtual external view returns (uint);\\r\\n    function getCash() virtual external view returns (uint);\\r\\n    function accrueInterest() virtual external returns (uint);\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\\r\\n    function _acceptAdmin() virtual external returns (uint);\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) virtual external returns (uint);\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual external returns (uint);\\r\\n}\\r\\n\\r\\ncontract CErc20Storage {\\r\\n    /**\\r\\n     * @notice Underlying asset for this CToken\\r\\n     */\\r\\n    address public underlying;\\r\\n}\\r\\n\\r\\nabstract contract CErc20Interface is CErc20Storage {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) virtual external returns (uint);\\r\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\r\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\r\\n    function sweepToken(EIP20NonStandardInterface token) virtual external;\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _addReserves(uint addAmount) virtual external returns (uint);\\r\\n}\\r\\n\\r\\ncontract CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Implementation address for this contract\\r\\n     */\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\nabstract contract CDelegatorInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Emitted when implementation is changed\\r\\n     */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual external;\\r\\n}\\r\\n\\r\\nabstract contract CDelegateInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) virtual external;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() virtual external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8a954ad43ef40d3ef7f3b0cc0786e1fb346a8cbed0c7e760d83ab796bbae0a1\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nabstract contract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\r\\n    function exitMarket(address cToken) virtual external returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\r\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\r\\n\\r\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\r\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\r\\n\\r\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\r\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function repayBorrowVerify(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex) virtual external;\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) virtual external returns (uint);\\r\\n    function liquidateBorrowVerify(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external returns (uint);\\r\\n    function seizeVerify(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) virtual external;\\r\\n\\r\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\r\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        uint repayAmount) virtual external view returns (uint, uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x35b21331eeb8adcbe6c81ef059f467051db884d42a5816c9254ad5df33e1ddc1\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title ERC 20 Token Standard Interface\\r\\n *  https://eips.ethereum.org/EIPS/eip-20\\r\\n */\\r\\ninterface EIP20Interface {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the total number of tokens in circulation\\r\\n      * @return The supply of tokens\\r\\n      */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return success Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return success Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n      * @return success Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x6766042a407f17e340589ec7c0205456ddb83db990fe917586cbaec8e381e506\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return balance The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved\\r\\n      * @return success Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return remaining The number of tokens allowed to be spent\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0xc73640b236e5f5993d48ea7b8607c1825d700b852fe3fbc2bc07112b62bd249e\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\r\\n\\r\\n    error TransferComptrollerRejection(uint256 errorCode);\\r\\n    error TransferNotAllowed();\\r\\n    error TransferNotEnough();\\r\\n    error TransferTooMuch();\\r\\n\\r\\n    error MintComptrollerRejection(uint256 errorCode);\\r\\n    error MintFreshnessCheck();\\r\\n\\r\\n    error RedeemComptrollerRejection(uint256 errorCode);\\r\\n    error RedeemFreshnessCheck();\\r\\n    error RedeemTransferOutNotPossible();\\r\\n\\r\\n    error BorrowComptrollerRejection(uint256 errorCode);\\r\\n    error BorrowFreshnessCheck();\\r\\n    error BorrowCashNotAvailable();\\r\\n\\r\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\r\\n    error RepayBorrowFreshnessCheck();\\r\\n\\r\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\r\\n    error LiquidateFreshnessCheck();\\r\\n    error LiquidateCollateralFreshnessCheck();\\r\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\r\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\r\\n    error LiquidateLiquidatorIsBorrower();\\r\\n    error LiquidateCloseAmountIsZero();\\r\\n    error LiquidateCloseAmountIsUintMax();\\r\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\r\\n\\r\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\r\\n    error LiquidateSeizeLiquidatorIsBorrower();\\r\\n\\r\\n    error AcceptAdminPendingAdminCheck();\\r\\n\\r\\n    error SetComptrollerOwnerCheck();\\r\\n    error SetPendingAdminOwnerCheck();\\r\\n\\r\\n    error SetReserveFactorAdminCheck();\\r\\n    error SetReserveFactorFreshCheck();\\r\\n    error SetReserveFactorBoundsCheck();\\r\\n\\r\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\r\\n\\r\\n    error ReduceReservesAdminCheck();\\r\\n    error ReduceReservesFreshCheck();\\r\\n    error ReduceReservesCashNotAvailable();\\r\\n    error ReduceReservesCashValidation();\\r\\n\\r\\n    error SetInterestRateModelOwnerCheck();\\r\\n    error SetInterestRateModelFreshCheck();\\r\\n}\\r\\n\",\"keccak256\":\"0x3f8fa3350921f633b45a9312a90b3375db3c6844dca40daaf8256ab4f32d902c\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Compound\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract ExponentialNoError {\\r\\n    uint constant expScale = 1e18;\\r\\n    uint constant doubleScale = 1e36;\\r\\n    uint constant halfExpScale = expScale/2;\\r\\n    uint constant mantissaOne = expScale;\\r\\n\\r\\n    struct Exp {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    struct Double {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Truncates the given exp to a whole number value.\\r\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\r\\n     */\\r\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\r\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\r\\n        return exp.mantissa / expScale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return add_(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if first Exp is less than second Exp.\\r\\n     */\\r\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa < right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp <= right Exp.\\r\\n     */\\r\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa <= right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp > right Exp.\\r\\n     */\\r\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa > right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if Exp is exactly zero\\r\\n     */\\r\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\r\\n        return value.mantissa == 0;\\r\\n    }\\r\\n\\r\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\r\\n        require(n < 2**224, errorMessage);\\r\\n        return uint224(n);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / expScale;\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / doubleScale;\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, expScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, doubleScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b) pure internal returns (uint) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x37e1a38f9d77e12761f079a277904f2fd20b80fb79da9f5854851fefe1b5d358\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n  * @title Compound's InterestRateModel Interface\\r\\n  * @author Compound\\r\\n  */\\r\\nabstract contract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xc9165c6470843312db10221c408840d907786ab238156cd22b1e428b9dc93c2a\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b50604051620043bd380380620043bd83398101604081905262000034916200081a565b60038054610100600160a81b03191633610100021790556200005c8888888888888862000090565b600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055506200097d95505050505050565b620000ab8686868686866200013560201b62000e591760201c565b601180546001600160a01b0319166001600160a01b038916908117909155604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa15801562000105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012b9190620008fb565b5050505050505050565b60035461010090046001600160a01b03163314620001a65760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e206d617920696e697469616c697a6520746865206d616044820152631c9ad95d60e21b60648201526084015b60405180910390fd5b600954158015620001b75750600a54155b620002115760405162461bcd60e51b815260206004820152602360248201527f6d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6044820152626e636560e81b60648201526084016200019d565b6007849055836200027e5760405162461bcd60e51b815260206004820152603060248201527f696e697469616c2065786368616e67652072617465206d75737420626520677260448201526f32b0ba32b9103a3430b7103d32b9379760811b60648201526084016200019d565b60006200028b87620003a7565b90508015620002dd5760405162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c656400000000000060448201526064016200019d565b42600955670de0b6b3a7640000600a55620002f886620004ff565b90508015620003555760405162461bcd60e51b815260206004820152602260248201527f73657474696e6720696e7465726573742072617465206d6f64656c206661696c604482015261195960f21b60648201526084016200019d565b83516200036a9060019060208701906200067c565b508251620003809060029060208601906200067c565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b60035460009061010090046001600160a01b03163314620003db5760405163d219dc1f60e01b815260040160405180910390fd5b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd29160048083019260209291908290030181865afa15801562000426573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044c919062000915565b6200049a5760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c73650000000060448201526064016200019d565b600580546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d91015b60405180910390a150600092915050565b600354600090819061010090046001600160a01b03163314620005355760405163407fded560e01b815260040160405180910390fd5b42600954146200055857604051630be2a5cb60e11b815260040160405180910390fd5b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005d5919062000915565b620006235760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c73650000000060448201526064016200019d565b600680546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269101620004ee565b8280546200068a9062000940565b90600052602060002090601f016020900481019282620006ae5760008555620006f9565b82601f10620006c957805160ff1916838001178555620006f9565b82800160010185558215620006f9579182015b82811115620006f9578251825591602001919060010190620006dc565b50620007079291506200070b565b5090565b5b808211156200070757600081556001016200070c565b6001600160a01b03811681146200073857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200076357600080fd5b81516001600160401b03808211156200078057620007806200073b565b604051601f8301601f19908116603f01168101908282118183101715620007ab57620007ab6200073b565b81604052838152602092508683858801011115620007c857600080fd5b600091505b83821015620007ec5785820183015181830184015290820190620007cd565b83821115620007fe5760008385830101525b9695505050505050565b8051620008158162000722565b919050565b600080600080600080600080610100898b0312156200083857600080fd5b8851620008458162000722565b60208a0151909850620008588162000722565b60408a01519097506200086b8162000722565b60608a015160808b015191975095506001600160401b03808211156200089057600080fd5b6200089e8c838d0162000751565b955060a08b0151915080821115620008b557600080fd5b50620008c48b828c0162000751565b93505060c089015160ff81168114620008dc57600080fd5b9150620008ec60e08a0162000808565b90509295985092959890939650565b6000602082840312156200090e57600080fd5b5051919050565b6000602082840312156200092857600080fd5b815180151581146200093957600080fd5b9392505050565b600181811c908216806200095557607f821691505b602082108114156200097757634e487b7160e01b600052602260045260246000fd5b50919050565b613a30806200098d6000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c80637f1e06be1161019d578063bd6d894d116100e9578063f2b3abbd116100a2578063f851a4401161007c578063f851a440146106a8578063f8f9da28146106c0578063fca7820b146106c8578063fe9c44ae146106db57600080fd5b8063f2b3abbd1461066f578063f3fdb15a14610682578063f5e3c4621461069557600080fd5b8063bd6d894d146105cd578063c37f68e2146105d5578063c5ebeaec14610608578063db006a751461061b578063dd62ed3e1461062e578063e9c714f21461066757600080fd5b8063a0712d6811610156578063aa5af0fd11610130578063aa5af0fd14610596578063ae9d70b01461059f578063b2a02ff1146105a7578063b71d1a0c146105ba57600080fd5b8063a0712d6814610568578063a6afed951461057b578063a9059cbb1461058357600080fd5b80637f1e06be1461050b578063852a12e31461051e5780638f840ddd1461053157806395d89b411461053a57806395dd91931461054257806399d8c1b41461055557600080fd5b80633af9e6691161025c578063601a0bf1116102155780636c540baf116101ef5780636c540baf146104be5780636f307dc3146104c757806370a08231146104da57806373acee981461050357600080fd5b8063601a0bf1146104955780636752e702146104a857806369ab3250146104b657600080fd5b80633af9e669146104385780633b1d21a21461044b5780633e941010146104535780634576b5db1461046657806347bd3718146104795780635fe3b5671461048257600080fd5b8063182df0f5116102c957806323b872dd116102a357806323b872dd146103c85780632608f818146103db57806326782247146103ee578063313ce5671461041957600080fd5b8063182df0f5146103985780631a31d465146103a05780631be19560146103b557600080fd5b806306fdde0314610311578063095ea7b31461032f5780630e75270214610352578063173b99041461037357806317bfdfbc1461037c57806318160ddd1461038f575b600080fd5b6103196106e3565b60405161032691906134b5565b60405180910390f35b61034261033d366004613522565b610771565b6040519015158152602001610326565b61036561036036600461354e565b6107df565b604051908152602001610326565b61036560085481565b61036561038a366004613567565b6107f2565b610365600d5481565b61036561084e565b6103b36103ae36600461363d565b61085d565b005b6103b36103c3366004613567565b6108f2565b6103426103d63660046136f3565b610abe565b6103656103e9366004613522565b610b0e565b600454610401906001600160a01b031681565b6040516001600160a01b039091168152602001610326565b6003546104269060ff1681565b60405160ff9091168152602001610326565b610365610446366004613567565b610b23565b610365610b69565b61036561046136600461354e565b610b73565b610365610474366004613567565b610b84565b610365600b5481565b600554610401906001600160a01b031681565b6103656104a336600461354e565b610cd6565b610365666379da05b6000081565b610365600081565b61036560095481565b601154610401906001600160a01b031681565b6103656104e8366004613567565b6001600160a01b03166000908152600e602052604090205490565b610365610d15565b6103b3610519366004613567565b610d5f565b61036561052c36600461354e565b610e36565b610365600c5481565b610319610e41565b610365610550366004613567565b610e4e565b6103b3610563366004613734565b610e59565b61036561057636600461354e565b6110b4565b6103656110bf565b610342610591366004613522565b6112ac565b610365600a5481565b6103656112fb565b6103656105b53660046136f3565b611393565b6103656105c8366004613567565b6113e2565b61036561146f565b6105e86105e3366004613567565b6114bf565b604080519485526020850193909352918301526060820152608001610326565b61036561061636600461354e565b611500565b61036561062936600461354e565b61150b565b61036561063c3660046137d6565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b610365611516565b61036561067d366004613567565b61161d565b600654610401906001600160a01b031681565b6103656106a336600461380f565b611631565b6003546104019061010090046001600160a01b031681565b610365611648565b6103656106d636600461354e565b61169b565b610342600181565b600180546106f090613851565b80601f016020809104026020016040519081016040528092919081815260200182805461071c90613851565b80156107695780601f1061073e57610100808354040283529160200191610769565b820191906000526020600020905b81548152906001019060200180831161074c57829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855292528083208590555191929182907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107cd9087815260200190565b60405180910390a35060019392505050565b60006107ea826116da565b506000919050565b6000805460ff1661081e5760405162461bcd60e51b81526004016108159061388c565b60405180910390fd5b6000805460ff191690556108306110bf565b5061083a82610e4e565b90506000805460ff19166001179055919050565b600061085861172b565b905090565b61086b868686868686610e59565b601180546001600160a01b0319166001600160a01b038916908117909155604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa1580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e891906138b0565b5050505050505050565b60035461010090046001600160a01b031633146109695760405162461bcd60e51b815260206004820152602f60248201527f4345726332303a3a7377656570546f6b656e3a206f6e6c792061646d696e206360448201526e616e20737765657020746f6b656e7360881b6064820152608401610815565b6011546001600160a01b03828116911614156109e25760405162461bcd60e51b815260206004820152603260248201527f4345726332303a3a7377656570546f6b656e3a2063616e206e6f74207377656560448201527138103ab73232b9363cb4b733903a37b5b2b760711b6064820152608401610815565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d91906138b0565b60035460405163a9059cbb60e01b81526001600160a01b03610100909204821660048201526024810183905291925083169063a9059cbb90604401600060405180830381600087803b158015610aa257600080fd5b505af1158015610ab6573d6000803e3d6000fd5b505050505050565b6000805460ff16610ae15760405162461bcd60e51b81526004016108159061388c565b6000805460ff19168155610af733868686611795565b1490506000805460ff191660011790559392505050565b6000610b1a83836119c3565b50600092915050565b6000806040518060200160405280610b3961146f565b90526001600160a01b0384166000908152600e6020526040902054909150610b62908290611a15565b9392505050565b6000610858611a35565b6000610b7e82611aaa565b92915050565b60035460009061010090046001600160a01b03163314610bb75760405163d219dc1f60e01b815260040160405180910390fd5b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd29160048083019260209291908290030181865afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2591906138c9565b610c715760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610815565b600580546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d91015b60405180910390a150600092915050565b6000805460ff16610cf95760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055610d0b6110bf565b5061083a82611b01565b6000805460ff16610d385760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055610d4a6110bf565b5050600b546000805460ff1916600117905590565b60035461010090046001600160a01b03163314610dd45760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d6179207365742074686520636f6d702d60448201526c6c696b652064656c656761746560981b6064820152608401610815565b6011546040516317066a5760e21b81526001600160a01b03838116600483015290911690635c19a95c90602401600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b5050505050565b60006107ea82611c1c565b600280546106f090613851565b6000610b7e82611c6d565b60035461010090046001600160a01b03163314610ec45760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e206d617920696e697469616c697a6520746865206d616044820152631c9ad95d60e21b6064820152608401610815565b600954158015610ed45750600a54155b610f2c5760405162461bcd60e51b815260206004820152602360248201527f6d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6044820152626e636560e81b6064820152608401610815565b600784905583610f975760405162461bcd60e51b815260206004820152603060248201527f696e697469616c2065786368616e67652072617465206d75737420626520677260448201526f32b0ba32b9103a3430b7103d32b9379760811b6064820152608401610815565b6000610fa287610b84565b90508015610ff25760405162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c65640000000000006044820152606401610815565b42600955670de0b6b3a7640000600a5561100b86611cb7565b905080156110665760405162461bcd60e51b815260206004820152602260248201527f73657474696e6720696e7465726573742072617465206d6f64656c206661696c604482015261195960f21b6064820152608401610815565b8351611079906001906020870190613425565b50825161108d906002906020860190613425565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b60006107ea82611e2c565b6009546000904290808214156110d85760009250505090565b60006110e2611a35565b600b54600c54600a546006546040516315f2405360e01b81526004810186905260248101859052604481018490529495509293919290916000916001600160a01b0316906315f2405390606401602060405180830381865afa15801561114c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117091906138b0565b9050645d21dba0008111156111c75760405162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c792068696768000000006044820152606401610815565b60006111d38789613901565b905060006111ef60405180602001604052808581525083611e6b565b905060006111fd8288611a15565b9050600061120b8883613918565b9050600061122a6040518060200160405280600854815250848a611e9c565b9050600061123985898a611e9c565b60098e9055600a819055600b849055600c839055604080518d815260208101879052908101829052606081018590529091507f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049060800160405180910390a160009d505050505050505050505050505090565b6000805460ff166112cf5760405162461bcd60e51b81526004016108159061388c565b6000805460ff191681556112e533808686611795565b1490506000805460ff1916600117905592915050565b6006546000906001600160a01b031663b8168816611317611a35565b600b54600c546008546040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084015b602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085891906138b0565b6000805460ff166113b65760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556113cc33858585611ebd565b50600080805460ff191660011790559392505050565b60035460009061010090046001600160a01b0316331461141557604051635cb56c2b60e01b815260040160405180910390fd5b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99101610cc5565b6000805460ff166114925760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556114a46110bf565b506114ad61084e565b90506000805460ff1916600117905590565b6001600160a01b0381166000908152600e602052604081205481908190819081906114e987611c6d565b6114f161172b565b93509350935093509193509193565b60006107ea82612136565b60006107ea82612175565b6004546000906001600160a01b031633141580611531575033155b1561154f57604051631ba24f2960e21b815260040160405180910390fd5b60038054600480546001600160a01b03808216610100818102610100600160a81b0319871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401529290917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600454604080516001600160a01b03808516825290921660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a160009250505090565b60006116276110bf565b50610b7e82611cb7565b600061163e8484846121b6565b5060009392505050565b6006546000906001600160a01b03166315f24053611664611a35565b600b54600c546040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401611352565b6000805460ff166116be5760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556116d06110bf565b5061083a82612294565b60005460ff166116fc5760405162461bcd60e51b81526004016108159061388c565b6000805460ff1916905561170e6110bf565b5061171a333383612350565b50506000805460ff19166001179055565b600d546000908061173e57505060075490565b6000611748611a35565b90506000600c54600b548361175d9190613918565b6117679190613901565b905060008361177e670de0b6b3a764000084613930565b611788919061394f565b95945050505050565b5090565b6005546040516317b9b84b60e31b81523060048201526001600160a01b038581166024830152848116604483015260648201849052600092839291169063bdcdc258906084016020604051808303816000875af11580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e91906138b0565b905080156118425760405163089d427760e11b815260048101829052602401610815565b836001600160a01b0316856001600160a01b0316141561187557604051638cd22d1960e01b815260040160405180910390fd5b6000856001600160a01b0316876001600160a01b0316141561189a57506000196118c2565b506001600160a01b038086166000908152600f60209081526040808320938a16835292905220545b60006118ce8583613901565b6001600160a01b0388166000908152600e6020526040812054919250906118f6908790613901565b6001600160a01b0388166000908152600e60205260408120549192509061191e908890613918565b6001600160a01b03808b166000908152600e6020526040808220869055918b1681522081905590506000198414611978576001600160a01b03808a166000908152600f60209081526040808320938e168352929052208390555b876001600160a01b0316896001600160a01b03166000805160206139db833981519152896040516119ab91815260200190565b60405180910390a35060009998505050505050505050565b60005460ff166119e55760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556119f76110bf565b50611a03338383612350565b50506000805460ff1916600117905550565b600080611a228484611e6b565b9050611a2d816124f9565b949350505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a0823190602401602060405180830381865afa158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa491906138b0565b91505090565b6000805460ff16611acd5760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055611adf6110bf565b50611ae982612511565b5050600090506000805460ff19166001179055919050565b600354600090819061010090046001600160a01b03163314611b3657604051630f7e5e6d60e41b815260040160405180910390fd5b4260095414611b5857604051630dff50cb60e41b815260040160405180910390fd5b82611b61611a35565b1015611b8057604051633345e99960e01b815260040160405180910390fd5b600c54831115611ba3576040516378d2980560e11b815260040160405180910390fd5b82600c54611bb19190613901565b600c819055600354909150611bd49061010090046001600160a01b0316846125a5565b7f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e600360019054906101000a90046001600160a01b03168483604051610cc593929190613971565b60005460ff16611c3e5760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055611c506110bf565b50611c5d3360008361268f565b506000805460ff19166001179055565b6001600160a01b03811660009081526010602052604081208054611c945750600092915050565b600a548154600091611ca591613930565b9050816001015481611a2d919061394f565b600354600090819061010090046001600160a01b03163314611cec5760405163407fded560e01b815260040160405180910390fd5b4260095414611d0e57604051630be2a5cb60e11b815260040160405180910390fd5b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8891906138c9565b611dd45760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610815565b600680546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269101610cc5565b60005460ff16611e4e5760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055611e606110bf565b50611c5d338261296c565b6040805160208101909152600081526040518060200160405280611e93856000015185612b95565b90529392505050565b600080611ea98585611e6b565b9050611788611eb7826124f9565b84612ba1565b60055460405163d02f735160e01b81523060048201526001600160a01b0386811660248301528581166044830152848116606483015260848201849052600092169063d02f73519060a4016020604051808303816000875af1158015611f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4b91906138b0565b90508015611f6f576040516363e00e3360e11b815260048101829052602401610815565b836001600160a01b0316836001600160a01b03161415611fa257604051633a94626760e11b815260040160405180910390fd5b6000611fc3836040518060200160405280666379da05b60000815250612bad565b90506000611fd18285613901565b905060006040518060200160405280611fe861172b565b905290506000611ff88285611a15565b9050600081600c5461200a9190613918565b600c819055600d54909150612020908690613901565b600d556001600160a01b0388166000908152600e6020526040902054612047908890613901565b6001600160a01b03808a166000908152600e602052604080822093909355908b1681522054612077908590613918565b6001600160a01b03808b166000818152600e602052604090819020939093559151908a16906000805160206139db833981519152906120b99088815260200190565b60405180910390a360405185815230906001600160a01b038a16906000805160206139db8339815191529060200160405180910390a37fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc530838360405161212293929190613971565b60405180910390a150505050505050505050565b60005460ff166121585760405162461bcd60e51b81526004016108159061388c565b6000805460ff1916905561216a6110bf565b50611c5d3382612bd0565b60005460ff166121975760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556121a96110bf565b50611c5d3382600061268f565b60005460ff166121d85760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556121ea6110bf565b506000816001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af115801561222d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225191906138b0565b9050801561227557604051633eea49b760e11b815260048101829052602401610815565b61228133858585612d6f565b50506000805460ff191660011790555050565b60035460009061010090046001600160a01b031633146122c757604051631205b57b60e11b815260040160405180910390fd5b42600954146122e957604051637dfca6b760e11b815260040160405180910390fd5b670de0b6b3a76400008211156123125760405163717220f360e11b815260040160405180910390fd5b600880549083905560408051828152602081018590527faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f8214609101610cc5565b600554604051631200453160e11b81523060048201526001600160a01b03858116602483015284811660448301526064820184905260009283929116906324008a62906084016020604051808303816000875af11580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d991906138b0565b905080156123fd57604051638c81362d60e01b815260048101829052602401610815565b426009541461241f5760405163c9021e2f60e01b815260040160405180910390fd5b600061242a85611c6d565b90506000600019851461243d578461243f565b815b9050600061244d8883613229565b9050600061245b8285613901565b9050600082600b5461246d9190613901565b6001600160a01b038a8116600081815260106020908152604091829020878155600a54600190910155600b8590558151938f168452830191909152810185905260608101849052608081018290529091507f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19060a00160405180910390a1509098975050505050505050565b8051600090610b7e90670de0b6b3a76400009061394f565b6000808080426009541461253b576040516338acf79960e01b815260048101829052602401610815565b6125453386613229565b905080600c546125559190613918565b915081600c819055507fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc533828460405161259193929190613971565b60405180910390a160009590945092505050565b60115460405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905290911690819063a9059cbb90604401600060405180830381600087803b1580156125f557600080fd5b505af1158015612609573d6000803e3d6000fd5b5050505060003d60008114612625576020811461262f57600080fd5b600019915061263b565b60206000803e60005191505b50806126895760405162461bcd60e51b815260206004820152601960248201527f544f4b454e5f5452414e534645525f4f55545f4641494c4544000000000000006044820152606401610815565b50505050565b81158061269a575080155b6127035760405162461bcd60e51b815260206004820152603460248201527f6f6e65206f662072656465656d546f6b656e73496e206f722072656465656d416044820152736d6f756e74496e206d757374206265207a65726f60601b6064820152608401610815565b6000604051806020016040528061271861172b565b905290506000808415612739578491506127328386611a15565b9050612749565b6127438484613400565b91508390505b60055460405163eabe7d9160e01b81526000916001600160a01b03169063eabe7d919061277e9030908b908890600401613992565b6020604051808303816000875af115801561279d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c191906138b0565b905080156127e55760405163480f424760e01b815260048101829052602401610815565b4260095414612807576040516397b5cfcd60e01b815260040160405180910390fd5b81612810611a35565b101561282f576040516391240a1b60e01b815260040160405180910390fd5b82600d5461283d9190613901565b600d556001600160a01b0387166000908152600e6020526040902054612864908490613901565b6001600160a01b0388166000908152600e602052604090205561288787836125a5565b60405183815230906001600160a01b038916906000805160206139db8339815191529060200160405180910390a37fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9298783856040516128e893929190613971565b60405180910390a16005546040516351dff98960e01b81523060048201526001600160a01b0389811660248301526044820185905260648201869052909116906351dff98990608401600060405180830381600087803b15801561294b57600080fd5b505af115801561295f573d6000803e3d6000fd5b5050505050505050505050565b600554604051634ef4c3e160e01b81526000916001600160a01b031690634ef4c3e1906129a190309087908790600401613992565b6020604051808303816000875af11580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e491906138b0565b90508015612a08576040516349abd4fd60e01b815260048101829052602401610815565b4260095414612a2a576040516338d8859760e01b815260040160405180910390fd5b60006040518060200160405280612a3f61172b565b905290506000612a4f8585613229565b90506000612a5d8284613400565b905080600d54612a6d9190613918565b600d556001600160a01b0386166000908152600e6020526040902054612a94908290613918565b6001600160a01b0387166000908152600e60205260409081902091909155517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f90612ae490889085908590613971565b60405180910390a16040518181526001600160a01b0387169030906000805160206139db8339815191529060200160405180910390a36005546040516341c728b960e01b81523060048201526001600160a01b0388811660248301526044820185905260648201849052909116906341c728b990608401600060405180830381600087803b158015612b7557600080fd5b505af1158015612b89573d6000803e3d6000fd5b50505050505050505050565b6000610b628284613930565b6000610b628284613918565b6000670de0b6b3a7640000612bc6848460000151612b95565b610b62919061394f565b60055460405163368f515360e21b81526000916001600160a01b03169063da3d454c90612c0590309087908790600401613992565b6020604051808303816000875af1158015612c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4891906138b0565b90508015612c6c5760405163918db40f60e01b815260048101829052602401610815565b4260095414612c8e57604051630e8d8c6160e21b815260040160405180910390fd5b81612c97611a35565b1015612cb6576040516348c2588160e01b815260040160405180910390fd5b6000612cc184611c6d565b90506000612ccf8483613918565b9050600084600b54612ce19190613918565b6001600160a01b0387166000908152601060205260409020838155600a54600190910155600b8190559050612d1686866125a5565b604080516001600160a01b038816815260208101879052908101839052606081018290527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a1505050505050565b600554604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000921690635fc7e71e9060a4016020604051808303816000875af1158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfd91906138b0565b90508015612e2157604051630a14d17960e11b815260048101829052602401610815565b4260095414612e43576040516380965b1b60e01b815260040160405180910390fd5b42826001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea691906138b0565b14612ec457604051631046f38d60e31b815260040160405180910390fd5b846001600160a01b0316846001600160a01b03161415612ef757604051631bd1a62160e21b815260040160405180910390fd5b82612f155760405163d29da7ef60e01b815260040160405180910390fd5b600019831415612f3857604051635982c5bb60e11b815260040160405180910390fd5b6000612f45868686612350565b60055460405163c488847b60e01b815291925060009182916001600160a01b03169063c488847b90612f7f90309089908890600401613992565b6040805180830381865afa158015612f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbf91906139b6565b915091506000821461302f5760405162461bcd60e51b815260206004820152603360248201527f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f604482015272105353d5539517d4d152569157d19052531151606a1b6064820152608401610815565b6040516370a0823160e01b81526001600160a01b0388811660048301528291908716906370a0823190602401602060405180830381865afa158015613078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309c91906138b0565b10156130ea5760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d55434800000000000000006044820152606401610815565b6001600160a01b03851630141561310c5761310730898984611ebd565b6131c6565b60405163b2a02ff160e01b81526000906001600160a01b0387169063b2a02ff19061313f908c908c908790600401613992565b6020604051808303816000875af115801561315e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318291906138b0565b146131c65760405162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b6044820152606401610815565b604080516001600160a01b038a811682528981166020830152818301869052871660608201526080810183905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a15050505050505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b0316908190839082906370a0823190602401602060405180830381865afa158015613278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329c91906138b0565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd906132cf90899030908a90600401613992565b600060405180830381600087803b1580156132e957600080fd5b505af11580156132fd573d6000803e3d6000fd5b5050505060003d60008114613319576020811461332357600080fd5b600019915061332f565b60206000803e60005191505b508061337d5760405162461bcd60e51b815260206004820152601860248201527f544f4b454e5f5452414e534645525f494e5f4641494c454400000000000000006044820152606401610815565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156133c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e891906138b0565b90506133f48382613901565b98975050505050505050565b6000610b6261341784670de0b6b3a7640000612b95565b83516000610b62828461394f565b82805461343190613851565b90600052602060002090601f0160209004810192826134535760008555613499565b82601f1061346c57805160ff1916838001178555613499565b82800160010185558215613499579182015b8281111561349957825182559160200191906001019061347e565b506117919291505b8082111561179157600081556001016134a1565b600060208083528351808285015260005b818110156134e2578581018301518582016040015282016134c6565b818111156134f4576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461351f57600080fd5b50565b6000806040838503121561353557600080fd5b82356135408161350a565b946020939093013593505050565b60006020828403121561356057600080fd5b5035919050565b60006020828403121561357957600080fd5b8135610b628161350a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126135ab57600080fd5b813567ffffffffffffffff808211156135c6576135c6613584565b604051601f8301601f19908116603f011681019082821181831017156135ee576135ee613584565b8160405283815286602085880101111561360757600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461363857600080fd5b919050565b600080600080600080600060e0888a03121561365857600080fd5b87356136638161350a565b965060208801356136738161350a565b955060408801356136838161350a565b945060608801359350608088013567ffffffffffffffff808211156136a757600080fd5b6136b38b838c0161359a565b945060a08a01359150808211156136c957600080fd5b506136d68a828b0161359a565b9250506136e560c08901613627565b905092959891949750929550565b60008060006060848603121561370857600080fd5b83356137138161350a565b925060208401356137238161350a565b929592945050506040919091013590565b60008060008060008060c0878903121561374d57600080fd5b86356137588161350a565b955060208701356137688161350a565b945060408701359350606087013567ffffffffffffffff8082111561378c57600080fd5b6137988a838b0161359a565b945060808901359150808211156137ae57600080fd5b506137bb89828a0161359a565b9250506137ca60a08801613627565b90509295509295509295565b600080604083850312156137e957600080fd5b82356137f48161350a565b915060208301356138048161350a565b809150509250929050565b60008060006060848603121561382457600080fd5b833561382f8161350a565b92506020840135915060408401356138468161350a565b809150509250925092565b600181811c9082168061386557607f821691505b6020821081141561388657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a90820152691c994b595b9d195c995960b21b604082015260600190565b6000602082840312156138c257600080fd5b5051919050565b6000602082840312156138db57600080fd5b81518015158114610b6257600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613913576139136138eb565b500390565b6000821982111561392b5761392b6138eb565b500190565b600081600019048311821515161561394a5761394a6138eb565b500290565b60008261396c57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600080604083850312156139c957600080fd5b50508051602090910151909290915056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212203c1a278a02dd57904ecb47a33f019ad66e04ead5e4f8b287dca2633e16321a9e64736f6c634300080a0033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c80637f1e06be1161019d578063bd6d894d116100e9578063f2b3abbd116100a2578063f851a4401161007c578063f851a440146106a8578063f8f9da28146106c0578063fca7820b146106c8578063fe9c44ae146106db57600080fd5b8063f2b3abbd1461066f578063f3fdb15a14610682578063f5e3c4621461069557600080fd5b8063bd6d894d146105cd578063c37f68e2146105d5578063c5ebeaec14610608578063db006a751461061b578063dd62ed3e1461062e578063e9c714f21461066757600080fd5b8063a0712d6811610156578063aa5af0fd11610130578063aa5af0fd14610596578063ae9d70b01461059f578063b2a02ff1146105a7578063b71d1a0c146105ba57600080fd5b8063a0712d6814610568578063a6afed951461057b578063a9059cbb1461058357600080fd5b80637f1e06be1461050b578063852a12e31461051e5780638f840ddd1461053157806395d89b411461053a57806395dd91931461054257806399d8c1b41461055557600080fd5b80633af9e6691161025c578063601a0bf1116102155780636c540baf116101ef5780636c540baf146104be5780636f307dc3146104c757806370a08231146104da57806373acee981461050357600080fd5b8063601a0bf1146104955780636752e702146104a857806369ab3250146104b657600080fd5b80633af9e669146104385780633b1d21a21461044b5780633e941010146104535780634576b5db1461046657806347bd3718146104795780635fe3b5671461048257600080fd5b8063182df0f5116102c957806323b872dd116102a357806323b872dd146103c85780632608f818146103db57806326782247146103ee578063313ce5671461041957600080fd5b8063182df0f5146103985780631a31d465146103a05780631be19560146103b557600080fd5b806306fdde0314610311578063095ea7b31461032f5780630e75270214610352578063173b99041461037357806317bfdfbc1461037c57806318160ddd1461038f575b600080fd5b6103196106e3565b60405161032691906134b5565b60405180910390f35b61034261033d366004613522565b610771565b6040519015158152602001610326565b61036561036036600461354e565b6107df565b604051908152602001610326565b61036560085481565b61036561038a366004613567565b6107f2565b610365600d5481565b61036561084e565b6103b36103ae36600461363d565b61085d565b005b6103b36103c3366004613567565b6108f2565b6103426103d63660046136f3565b610abe565b6103656103e9366004613522565b610b0e565b600454610401906001600160a01b031681565b6040516001600160a01b039091168152602001610326565b6003546104269060ff1681565b60405160ff9091168152602001610326565b610365610446366004613567565b610b23565b610365610b69565b61036561046136600461354e565b610b73565b610365610474366004613567565b610b84565b610365600b5481565b600554610401906001600160a01b031681565b6103656104a336600461354e565b610cd6565b610365666379da05b6000081565b610365600081565b61036560095481565b601154610401906001600160a01b031681565b6103656104e8366004613567565b6001600160a01b03166000908152600e602052604090205490565b610365610d15565b6103b3610519366004613567565b610d5f565b61036561052c36600461354e565b610e36565b610365600c5481565b610319610e41565b610365610550366004613567565b610e4e565b6103b3610563366004613734565b610e59565b61036561057636600461354e565b6110b4565b6103656110bf565b610342610591366004613522565b6112ac565b610365600a5481565b6103656112fb565b6103656105b53660046136f3565b611393565b6103656105c8366004613567565b6113e2565b61036561146f565b6105e86105e3366004613567565b6114bf565b604080519485526020850193909352918301526060820152608001610326565b61036561061636600461354e565b611500565b61036561062936600461354e565b61150b565b61036561063c3660046137d6565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b610365611516565b61036561067d366004613567565b61161d565b600654610401906001600160a01b031681565b6103656106a336600461380f565b611631565b6003546104019061010090046001600160a01b031681565b610365611648565b6103656106d636600461354e565b61169b565b610342600181565b600180546106f090613851565b80601f016020809104026020016040519081016040528092919081815260200182805461071c90613851565b80156107695780601f1061073e57610100808354040283529160200191610769565b820191906000526020600020905b81548152906001019060200180831161074c57829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855292528083208590555191929182907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107cd9087815260200190565b60405180910390a35060019392505050565b60006107ea826116da565b506000919050565b6000805460ff1661081e5760405162461bcd60e51b81526004016108159061388c565b60405180910390fd5b6000805460ff191690556108306110bf565b5061083a82610e4e565b90506000805460ff19166001179055919050565b600061085861172b565b905090565b61086b868686868686610e59565b601180546001600160a01b0319166001600160a01b038916908117909155604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa1580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e891906138b0565b5050505050505050565b60035461010090046001600160a01b031633146109695760405162461bcd60e51b815260206004820152602f60248201527f4345726332303a3a7377656570546f6b656e3a206f6e6c792061646d696e206360448201526e616e20737765657020746f6b656e7360881b6064820152608401610815565b6011546001600160a01b03828116911614156109e25760405162461bcd60e51b815260206004820152603260248201527f4345726332303a3a7377656570546f6b656e3a2063616e206e6f74207377656560448201527138103ab73232b9363cb4b733903a37b5b2b760711b6064820152608401610815565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d91906138b0565b60035460405163a9059cbb60e01b81526001600160a01b03610100909204821660048201526024810183905291925083169063a9059cbb90604401600060405180830381600087803b158015610aa257600080fd5b505af1158015610ab6573d6000803e3d6000fd5b505050505050565b6000805460ff16610ae15760405162461bcd60e51b81526004016108159061388c565b6000805460ff19168155610af733868686611795565b1490506000805460ff191660011790559392505050565b6000610b1a83836119c3565b50600092915050565b6000806040518060200160405280610b3961146f565b90526001600160a01b0384166000908152600e6020526040902054909150610b62908290611a15565b9392505050565b6000610858611a35565b6000610b7e82611aaa565b92915050565b60035460009061010090046001600160a01b03163314610bb75760405163d219dc1f60e01b815260040160405180910390fd5b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd29160048083019260209291908290030181865afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2591906138c9565b610c715760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610815565b600580546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d91015b60405180910390a150600092915050565b6000805460ff16610cf95760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055610d0b6110bf565b5061083a82611b01565b6000805460ff16610d385760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055610d4a6110bf565b5050600b546000805460ff1916600117905590565b60035461010090046001600160a01b03163314610dd45760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d6179207365742074686520636f6d702d60448201526c6c696b652064656c656761746560981b6064820152608401610815565b6011546040516317066a5760e21b81526001600160a01b03838116600483015290911690635c19a95c90602401600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b5050505050565b60006107ea82611c1c565b600280546106f090613851565b6000610b7e82611c6d565b60035461010090046001600160a01b03163314610ec45760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e206d617920696e697469616c697a6520746865206d616044820152631c9ad95d60e21b6064820152608401610815565b600954158015610ed45750600a54155b610f2c5760405162461bcd60e51b815260206004820152602360248201527f6d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6044820152626e636560e81b6064820152608401610815565b600784905583610f975760405162461bcd60e51b815260206004820152603060248201527f696e697469616c2065786368616e67652072617465206d75737420626520677260448201526f32b0ba32b9103a3430b7103d32b9379760811b6064820152608401610815565b6000610fa287610b84565b90508015610ff25760405162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c65640000000000006044820152606401610815565b42600955670de0b6b3a7640000600a5561100b86611cb7565b905080156110665760405162461bcd60e51b815260206004820152602260248201527f73657474696e6720696e7465726573742072617465206d6f64656c206661696c604482015261195960f21b6064820152608401610815565b8351611079906001906020870190613425565b50825161108d906002906020860190613425565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b60006107ea82611e2c565b6009546000904290808214156110d85760009250505090565b60006110e2611a35565b600b54600c54600a546006546040516315f2405360e01b81526004810186905260248101859052604481018490529495509293919290916000916001600160a01b0316906315f2405390606401602060405180830381865afa15801561114c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117091906138b0565b9050645d21dba0008111156111c75760405162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c792068696768000000006044820152606401610815565b60006111d38789613901565b905060006111ef60405180602001604052808581525083611e6b565b905060006111fd8288611a15565b9050600061120b8883613918565b9050600061122a6040518060200160405280600854815250848a611e9c565b9050600061123985898a611e9c565b60098e9055600a819055600b849055600c839055604080518d815260208101879052908101829052606081018590529091507f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049060800160405180910390a160009d505050505050505050505050505090565b6000805460ff166112cf5760405162461bcd60e51b81526004016108159061388c565b6000805460ff191681556112e533808686611795565b1490506000805460ff1916600117905592915050565b6006546000906001600160a01b031663b8168816611317611a35565b600b54600c546008546040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084015b602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085891906138b0565b6000805460ff166113b65760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556113cc33858585611ebd565b50600080805460ff191660011790559392505050565b60035460009061010090046001600160a01b0316331461141557604051635cb56c2b60e01b815260040160405180910390fd5b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99101610cc5565b6000805460ff166114925760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556114a46110bf565b506114ad61084e565b90506000805460ff1916600117905590565b6001600160a01b0381166000908152600e602052604081205481908190819081906114e987611c6d565b6114f161172b565b93509350935093509193509193565b60006107ea82612136565b60006107ea82612175565b6004546000906001600160a01b031633141580611531575033155b1561154f57604051631ba24f2960e21b815260040160405180910390fd5b60038054600480546001600160a01b03808216610100818102610100600160a81b0319871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401529290917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600454604080516001600160a01b03808516825290921660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a160009250505090565b60006116276110bf565b50610b7e82611cb7565b600061163e8484846121b6565b5060009392505050565b6006546000906001600160a01b03166315f24053611664611a35565b600b54600c546040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401611352565b6000805460ff166116be5760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556116d06110bf565b5061083a82612294565b60005460ff166116fc5760405162461bcd60e51b81526004016108159061388c565b6000805460ff1916905561170e6110bf565b5061171a333383612350565b50506000805460ff19166001179055565b600d546000908061173e57505060075490565b6000611748611a35565b90506000600c54600b548361175d9190613918565b6117679190613901565b905060008361177e670de0b6b3a764000084613930565b611788919061394f565b95945050505050565b5090565b6005546040516317b9b84b60e31b81523060048201526001600160a01b038581166024830152848116604483015260648201849052600092839291169063bdcdc258906084016020604051808303816000875af11580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e91906138b0565b905080156118425760405163089d427760e11b815260048101829052602401610815565b836001600160a01b0316856001600160a01b0316141561187557604051638cd22d1960e01b815260040160405180910390fd5b6000856001600160a01b0316876001600160a01b0316141561189a57506000196118c2565b506001600160a01b038086166000908152600f60209081526040808320938a16835292905220545b60006118ce8583613901565b6001600160a01b0388166000908152600e6020526040812054919250906118f6908790613901565b6001600160a01b0388166000908152600e60205260408120549192509061191e908890613918565b6001600160a01b03808b166000908152600e6020526040808220869055918b1681522081905590506000198414611978576001600160a01b03808a166000908152600f60209081526040808320938e168352929052208390555b876001600160a01b0316896001600160a01b03166000805160206139db833981519152896040516119ab91815260200190565b60405180910390a35060009998505050505050505050565b60005460ff166119e55760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556119f76110bf565b50611a03338383612350565b50506000805460ff1916600117905550565b600080611a228484611e6b565b9050611a2d816124f9565b949350505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a0823190602401602060405180830381865afa158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa491906138b0565b91505090565b6000805460ff16611acd5760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055611adf6110bf565b50611ae982612511565b5050600090506000805460ff19166001179055919050565b600354600090819061010090046001600160a01b03163314611b3657604051630f7e5e6d60e41b815260040160405180910390fd5b4260095414611b5857604051630dff50cb60e41b815260040160405180910390fd5b82611b61611a35565b1015611b8057604051633345e99960e01b815260040160405180910390fd5b600c54831115611ba3576040516378d2980560e11b815260040160405180910390fd5b82600c54611bb19190613901565b600c819055600354909150611bd49061010090046001600160a01b0316846125a5565b7f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e600360019054906101000a90046001600160a01b03168483604051610cc593929190613971565b60005460ff16611c3e5760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055611c506110bf565b50611c5d3360008361268f565b506000805460ff19166001179055565b6001600160a01b03811660009081526010602052604081208054611c945750600092915050565b600a548154600091611ca591613930565b9050816001015481611a2d919061394f565b600354600090819061010090046001600160a01b03163314611cec5760405163407fded560e01b815260040160405180910390fd5b4260095414611d0e57604051630be2a5cb60e11b815260040160405180910390fd5b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8891906138c9565b611dd45760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610815565b600680546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269101610cc5565b60005460ff16611e4e5760405162461bcd60e51b81526004016108159061388c565b6000805460ff19169055611e606110bf565b50611c5d338261296c565b6040805160208101909152600081526040518060200160405280611e93856000015185612b95565b90529392505050565b600080611ea98585611e6b565b9050611788611eb7826124f9565b84612ba1565b60055460405163d02f735160e01b81523060048201526001600160a01b0386811660248301528581166044830152848116606483015260848201849052600092169063d02f73519060a4016020604051808303816000875af1158015611f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4b91906138b0565b90508015611f6f576040516363e00e3360e11b815260048101829052602401610815565b836001600160a01b0316836001600160a01b03161415611fa257604051633a94626760e11b815260040160405180910390fd5b6000611fc3836040518060200160405280666379da05b60000815250612bad565b90506000611fd18285613901565b905060006040518060200160405280611fe861172b565b905290506000611ff88285611a15565b9050600081600c5461200a9190613918565b600c819055600d54909150612020908690613901565b600d556001600160a01b0388166000908152600e6020526040902054612047908890613901565b6001600160a01b03808a166000908152600e602052604080822093909355908b1681522054612077908590613918565b6001600160a01b03808b166000818152600e602052604090819020939093559151908a16906000805160206139db833981519152906120b99088815260200190565b60405180910390a360405185815230906001600160a01b038a16906000805160206139db8339815191529060200160405180910390a37fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc530838360405161212293929190613971565b60405180910390a150505050505050505050565b60005460ff166121585760405162461bcd60e51b81526004016108159061388c565b6000805460ff1916905561216a6110bf565b50611c5d3382612bd0565b60005460ff166121975760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556121a96110bf565b50611c5d3382600061268f565b60005460ff166121d85760405162461bcd60e51b81526004016108159061388c565b6000805460ff191690556121ea6110bf565b506000816001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af115801561222d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225191906138b0565b9050801561227557604051633eea49b760e11b815260048101829052602401610815565b61228133858585612d6f565b50506000805460ff191660011790555050565b60035460009061010090046001600160a01b031633146122c757604051631205b57b60e11b815260040160405180910390fd5b42600954146122e957604051637dfca6b760e11b815260040160405180910390fd5b670de0b6b3a76400008211156123125760405163717220f360e11b815260040160405180910390fd5b600880549083905560408051828152602081018590527faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f8214609101610cc5565b600554604051631200453160e11b81523060048201526001600160a01b03858116602483015284811660448301526064820184905260009283929116906324008a62906084016020604051808303816000875af11580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d991906138b0565b905080156123fd57604051638c81362d60e01b815260048101829052602401610815565b426009541461241f5760405163c9021e2f60e01b815260040160405180910390fd5b600061242a85611c6d565b90506000600019851461243d578461243f565b815b9050600061244d8883613229565b9050600061245b8285613901565b9050600082600b5461246d9190613901565b6001600160a01b038a8116600081815260106020908152604091829020878155600a54600190910155600b8590558151938f168452830191909152810185905260608101849052608081018290529091507f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19060a00160405180910390a1509098975050505050505050565b8051600090610b7e90670de0b6b3a76400009061394f565b6000808080426009541461253b576040516338acf79960e01b815260048101829052602401610815565b6125453386613229565b905080600c546125559190613918565b915081600c819055507fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc533828460405161259193929190613971565b60405180910390a160009590945092505050565b60115460405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905290911690819063a9059cbb90604401600060405180830381600087803b1580156125f557600080fd5b505af1158015612609573d6000803e3d6000fd5b5050505060003d60008114612625576020811461262f57600080fd5b600019915061263b565b60206000803e60005191505b50806126895760405162461bcd60e51b815260206004820152601960248201527f544f4b454e5f5452414e534645525f4f55545f4641494c4544000000000000006044820152606401610815565b50505050565b81158061269a575080155b6127035760405162461bcd60e51b815260206004820152603460248201527f6f6e65206f662072656465656d546f6b656e73496e206f722072656465656d416044820152736d6f756e74496e206d757374206265207a65726f60601b6064820152608401610815565b6000604051806020016040528061271861172b565b905290506000808415612739578491506127328386611a15565b9050612749565b6127438484613400565b91508390505b60055460405163eabe7d9160e01b81526000916001600160a01b03169063eabe7d919061277e9030908b908890600401613992565b6020604051808303816000875af115801561279d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c191906138b0565b905080156127e55760405163480f424760e01b815260048101829052602401610815565b4260095414612807576040516397b5cfcd60e01b815260040160405180910390fd5b81612810611a35565b101561282f576040516391240a1b60e01b815260040160405180910390fd5b82600d5461283d9190613901565b600d556001600160a01b0387166000908152600e6020526040902054612864908490613901565b6001600160a01b0388166000908152600e602052604090205561288787836125a5565b60405183815230906001600160a01b038916906000805160206139db8339815191529060200160405180910390a37fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9298783856040516128e893929190613971565b60405180910390a16005546040516351dff98960e01b81523060048201526001600160a01b0389811660248301526044820185905260648201869052909116906351dff98990608401600060405180830381600087803b15801561294b57600080fd5b505af115801561295f573d6000803e3d6000fd5b5050505050505050505050565b600554604051634ef4c3e160e01b81526000916001600160a01b031690634ef4c3e1906129a190309087908790600401613992565b6020604051808303816000875af11580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e491906138b0565b90508015612a08576040516349abd4fd60e01b815260048101829052602401610815565b4260095414612a2a576040516338d8859760e01b815260040160405180910390fd5b60006040518060200160405280612a3f61172b565b905290506000612a4f8585613229565b90506000612a5d8284613400565b905080600d54612a6d9190613918565b600d556001600160a01b0386166000908152600e6020526040902054612a94908290613918565b6001600160a01b0387166000908152600e60205260409081902091909155517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f90612ae490889085908590613971565b60405180910390a16040518181526001600160a01b0387169030906000805160206139db8339815191529060200160405180910390a36005546040516341c728b960e01b81523060048201526001600160a01b0388811660248301526044820185905260648201849052909116906341c728b990608401600060405180830381600087803b158015612b7557600080fd5b505af1158015612b89573d6000803e3d6000fd5b50505050505050505050565b6000610b628284613930565b6000610b628284613918565b6000670de0b6b3a7640000612bc6848460000151612b95565b610b62919061394f565b60055460405163368f515360e21b81526000916001600160a01b03169063da3d454c90612c0590309087908790600401613992565b6020604051808303816000875af1158015612c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4891906138b0565b90508015612c6c5760405163918db40f60e01b815260048101829052602401610815565b4260095414612c8e57604051630e8d8c6160e21b815260040160405180910390fd5b81612c97611a35565b1015612cb6576040516348c2588160e01b815260040160405180910390fd5b6000612cc184611c6d565b90506000612ccf8483613918565b9050600084600b54612ce19190613918565b6001600160a01b0387166000908152601060205260409020838155600a54600190910155600b8190559050612d1686866125a5565b604080516001600160a01b038816815260208101879052908101839052606081018290527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a1505050505050565b600554604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000921690635fc7e71e9060a4016020604051808303816000875af1158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfd91906138b0565b90508015612e2157604051630a14d17960e11b815260048101829052602401610815565b4260095414612e43576040516380965b1b60e01b815260040160405180910390fd5b42826001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea691906138b0565b14612ec457604051631046f38d60e31b815260040160405180910390fd5b846001600160a01b0316846001600160a01b03161415612ef757604051631bd1a62160e21b815260040160405180910390fd5b82612f155760405163d29da7ef60e01b815260040160405180910390fd5b600019831415612f3857604051635982c5bb60e11b815260040160405180910390fd5b6000612f45868686612350565b60055460405163c488847b60e01b815291925060009182916001600160a01b03169063c488847b90612f7f90309089908890600401613992565b6040805180830381865afa158015612f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbf91906139b6565b915091506000821461302f5760405162461bcd60e51b815260206004820152603360248201527f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f604482015272105353d5539517d4d152569157d19052531151606a1b6064820152608401610815565b6040516370a0823160e01b81526001600160a01b0388811660048301528291908716906370a0823190602401602060405180830381865afa158015613078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309c91906138b0565b10156130ea5760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d55434800000000000000006044820152606401610815565b6001600160a01b03851630141561310c5761310730898984611ebd565b6131c6565b60405163b2a02ff160e01b81526000906001600160a01b0387169063b2a02ff19061313f908c908c908790600401613992565b6020604051808303816000875af115801561315e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318291906138b0565b146131c65760405162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b6044820152606401610815565b604080516001600160a01b038a811682528981166020830152818301869052871660608201526080810183905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a15050505050505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b0316908190839082906370a0823190602401602060405180830381865afa158015613278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329c91906138b0565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd906132cf90899030908a90600401613992565b600060405180830381600087803b1580156132e957600080fd5b505af11580156132fd573d6000803e3d6000fd5b5050505060003d60008114613319576020811461332357600080fd5b600019915061332f565b60206000803e60005191505b508061337d5760405162461bcd60e51b815260206004820152601860248201527f544f4b454e5f5452414e534645525f494e5f4641494c454400000000000000006044820152606401610815565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156133c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e891906138b0565b90506133f48382613901565b98975050505050505050565b6000610b6261341784670de0b6b3a7640000612b95565b83516000610b62828461394f565b82805461343190613851565b90600052602060002090601f0160209004810192826134535760008555613499565b82601f1061346c57805160ff1916838001178555613499565b82800160010185558215613499579182015b8281111561349957825182559160200191906001019061347e565b506117919291505b8082111561179157600081556001016134a1565b600060208083528351808285015260005b818110156134e2578581018301518582016040015282016134c6565b818111156134f4576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461351f57600080fd5b50565b6000806040838503121561353557600080fd5b82356135408161350a565b946020939093013593505050565b60006020828403121561356057600080fd5b5035919050565b60006020828403121561357957600080fd5b8135610b628161350a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126135ab57600080fd5b813567ffffffffffffffff808211156135c6576135c6613584565b604051601f8301601f19908116603f011681019082821181831017156135ee576135ee613584565b8160405283815286602085880101111561360757600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461363857600080fd5b919050565b600080600080600080600060e0888a03121561365857600080fd5b87356136638161350a565b965060208801356136738161350a565b955060408801356136838161350a565b945060608801359350608088013567ffffffffffffffff808211156136a757600080fd5b6136b38b838c0161359a565b945060a08a01359150808211156136c957600080fd5b506136d68a828b0161359a565b9250506136e560c08901613627565b905092959891949750929550565b60008060006060848603121561370857600080fd5b83356137138161350a565b925060208401356137238161350a565b929592945050506040919091013590565b60008060008060008060c0878903121561374d57600080fd5b86356137588161350a565b955060208701356137688161350a565b945060408701359350606087013567ffffffffffffffff8082111561378c57600080fd5b6137988a838b0161359a565b945060808901359150808211156137ae57600080fd5b506137bb89828a0161359a565b9250506137ca60a08801613627565b90509295509295509295565b600080604083850312156137e957600080fd5b82356137f48161350a565b915060208301356138048161350a565b809150509250929050565b60008060006060848603121561382457600080fd5b833561382f8161350a565b92506020840135915060408401356138468161350a565b809150509250925092565b600181811c9082168061386557607f821691505b6020821081141561388657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a90820152691c994b595b9d195c995960b21b604082015260600190565b6000602082840312156138c257600080fd5b5051919050565b6000602082840312156138db57600080fd5b81518015158114610b6257600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613913576139136138eb565b500390565b6000821982111561392b5761392b6138eb565b500190565b600081600019048311821515161561394a5761394a6138eb565b500290565b60008261396c57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600080604083850312156139c957600080fd5b50508051602090910151909290915056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212203c1a278a02dd57904ecb47a33f019ad66e04ead5e4f8b287dca2633e16321a9e64736f6c634300080a0033",
    "devdoc": {
        "author": "Compound",
        "kind": "dev",
        "methods": {
            "_acceptAdmin()": {
                "details": "Admin function for pending admin to accept role and update admin",
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "_addReserves(uint256)": {
                "params": {
                    "addAmount": "The amount fo underlying token to add as reserves"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "_delegateCompLikeTo(address)": {
                "details": "CTokens whose underlying are not CompLike should revert here",
                "params": {
                    "compLikeDelegatee": "The address to delegate votes to"
                }
            },
            "_reduceReserves(uint256)": {
                "params": {
                    "reduceAmount": "Amount of reduction to reserves"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "_setComptroller(address)": {
                "details": "Admin function to set a new comptroller",
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "_setInterestRateModel(address)": {
                "details": "Admin function to accrue interest and update the interest rate model",
                "params": {
                    "newInterestRateModel": "the new interest rate model to use"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "_setPendingAdmin(address)": {
                "details": "Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
                "params": {
                    "newPendingAdmin": "New pending admin."
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "_setReserveFactor(uint256)": {
                "details": "Admin function to accrue interest and set a new reserve factor",
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "accrueInterest()": {
                "details": "This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage."
            },
            "allowance(address,address)": {
                "params": {
                    "owner": "The address of the account which owns the tokens to be spent",
                    "spender": "The address of the account which may transfer tokens"
                },
                "returns": {
                    "_0": "The number of tokens allowed to be spent (-1 means infinite)"
                }
            },
            "approve(address,uint256)": {
                "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
                "params": {
                    "amount": "The number of tokens that are approved (uint256.max means infinite)",
                    "spender": "The address of the account which may transfer tokens"
                },
                "returns": {
                    "_0": "Whether or not the approval succeeded"
                }
            },
            "balanceOf(address)": {
                "params": {
                    "owner": "The address of the account to query"
                },
                "returns": {
                    "_0": "The number of tokens owned by `owner`"
                }
            },
            "balanceOfUnderlying(address)": {
                "details": "This also accrues interest in a transaction",
                "params": {
                    "owner": "The address of the account to query"
                },
                "returns": {
                    "_0": "The amount of underlying owned by `owner`"
                }
            },
            "borrow(uint256)": {
                "params": {
                    "borrowAmount": "The amount of the underlying asset to borrow"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "borrowBalanceCurrent(address)": {
                "params": {
                    "account": "The address whose balance should be calculated after updating borrowIndex"
                },
                "returns": {
                    "_0": "The calculated balance"
                }
            },
            "borrowBalanceStored(address)": {
                "params": {
                    "account": "The address whose balance should be calculated"
                },
                "returns": {
                    "_0": "The calculated balance"
                }
            },
            "borrowRatePerBlock()": {
                "returns": {
                    "_0": "The borrow interest rate per block, scaled by 1e18"
                }
            },
            "constructor": {
                "params": {
                    "admin_": "Address of the administrator of this token",
                    "comptroller_": "The address of the Comptroller",
                    "decimals_": "ERC-20 decimal precision of this token",
                    "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
                    "interestRateModel_": "The address of the interest rate model",
                    "name_": "ERC-20 name of this token",
                    "symbol_": "ERC-20 symbol of this token",
                    "underlying_": "The address of the underlying asset"
                }
            },
            "exchangeRateCurrent()": {
                "returns": {
                    "_0": "Calculated exchange rate scaled by 1e18"
                }
            },
            "exchangeRateStored()": {
                "details": "This function does not accrue interest before calculating the exchange rate",
                "returns": {
                    "_0": "Calculated exchange rate scaled by 1e18"
                }
            },
            "getAccountSnapshot(address)": {
                "details": "This is used by comptroller to more efficiently perform liquidity checks.",
                "params": {
                    "account": "Address of the account to snapshot"
                },
                "returns": {
                    "_0": "(possible error, token balance, borrow balance, exchange rate mantissa)"
                }
            },
            "getCash()": {
                "returns": {
                    "_0": "The quantity of underlying asset owned by this contract"
                }
            },
            "initialize(address,address,address,uint256,string,string,uint8)": {
                "params": {
                    "comptroller_": "The address of the Comptroller",
                    "decimals_": "ERC-20 decimal precision of this token",
                    "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
                    "interestRateModel_": "The address of the interest rate model",
                    "name_": "ERC-20 name of this token",
                    "symbol_": "ERC-20 symbol of this token",
                    "underlying_": "The address of the underlying asset"
                }
            },
            "initialize(address,address,uint256,string,string,uint8)": {
                "params": {
                    "comptroller_": "The address of the Comptroller",
                    "decimals_": "EIP-20 decimal precision of this token",
                    "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
                    "interestRateModel_": "The address of the interest rate model",
                    "name_": "EIP-20 name of this token",
                    "symbol_": "EIP-20 symbol of this token"
                }
            },
            "liquidateBorrow(address,uint256,address)": {
                "params": {
                    "borrower": "The borrower of this cToken to be liquidated",
                    "cTokenCollateral": "The market in which to seize collateral from the borrower",
                    "repayAmount": "The amount of the underlying borrowed asset to repay"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "mint(uint256)": {
                "details": "Accrues interest whether or not the operation succeeds, unless reverted",
                "params": {
                    "mintAmount": "The amount of the underlying asset to supply"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "redeem(uint256)": {
                "details": "Accrues interest whether or not the operation succeeds, unless reverted",
                "params": {
                    "redeemTokens": "The number of cTokens to redeem into underlying"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "redeemUnderlying(uint256)": {
                "details": "Accrues interest whether or not the operation succeeds, unless reverted",
                "params": {
                    "redeemAmount": "The amount of underlying to redeem"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "repayBorrow(uint256)": {
                "params": {
                    "repayAmount": "The amount to repay, or -1 for the full outstanding amount"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "repayBorrowBehalf(address,uint256)": {
                "params": {
                    "borrower": "the account with the debt being payed off",
                    "repayAmount": "The amount to repay, or -1 for the full outstanding amount"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "seize(address,address,uint256)": {
                "details": "Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.",
                "params": {
                    "borrower": "The account having collateral seized",
                    "liquidator": "The account receiving seized collateral",
                    "seizeTokens": "The number of cTokens to seize"
                },
                "returns": {
                    "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
                }
            },
            "supplyRatePerBlock()": {
                "returns": {
                    "_0": "The supply interest rate per block, scaled by 1e18"
                }
            },
            "sweepToken(address)": {
                "params": {
                    "token": "The address of the ERC-20 token to sweep"
                }
            },
            "totalBorrowsCurrent()": {
                "returns": {
                    "_0": "The total borrows with interest"
                }
            },
            "transfer(address,uint256)": {
                "params": {
                    "amount": "The number of tokens to transfer",
                    "dst": "The address of the destination account"
                },
                "returns": {
                    "_0": "Whether or not the transfer succeeded"
                }
            },
            "transferFrom(address,address,uint256)": {
                "params": {
                    "amount": "The number of tokens to transfer",
                    "dst": "The address of the destination account",
                    "src": "The address of the source account"
                },
                "returns": {
                    "_0": "Whether or not the transfer succeeded"
                }
            }
        },
        "title": "Compound's CErc20Immutable Contract",
        "version": 1
    },
    "userdoc": {
        "events": {
            "AccrueInterest(uint256,uint256,uint256,uint256)": {
                "notice": "Event emitted when interest is accrued"
            },
            "Approval(address,address,uint256)": {
                "notice": "EIP20 Approval event"
            },
            "Borrow(address,uint256,uint256,uint256)": {
                "notice": "Event emitted when underlying is borrowed"
            },
            "LiquidateBorrow(address,address,uint256,address,uint256)": {
                "notice": "Event emitted when a borrow is liquidated"
            },
            "Mint(address,uint256,uint256)": {
                "notice": "Event emitted when tokens are minted"
            },
            "NewAdmin(address,address)": {
                "notice": "Event emitted when pendingAdmin is accepted, which means admin is updated"
            },
            "NewComptroller(address,address)": {
                "notice": "Event emitted when comptroller is changed"
            },
            "NewMarketInterestRateModel(address,address)": {
                "notice": "Event emitted when interestRateModel is changed"
            },
            "NewPendingAdmin(address,address)": {
                "notice": "Event emitted when pendingAdmin is changed"
            },
            "NewReserveFactor(uint256,uint256)": {
                "notice": "Event emitted when the reserve factor is changed"
            },
            "Redeem(address,uint256,uint256)": {
                "notice": "Event emitted when tokens are redeemed"
            },
            "RepayBorrow(address,address,uint256,uint256,uint256)": {
                "notice": "Event emitted when a borrow is repaid"
            },
            "ReservesAdded(address,uint256,uint256)": {
                "notice": "Event emitted when the reserves are added"
            },
            "ReservesReduced(address,uint256,uint256)": {
                "notice": "Event emitted when the reserves are reduced"
            },
            "Transfer(address,address,uint256)": {
                "notice": "EIP20 Transfer event"
            }
        },
        "kind": "user",
        "methods": {
            "_acceptAdmin()": {
                "notice": "Accepts transfer of admin rights. msg.sender must be pendingAdmin"
            },
            "_addReserves(uint256)": {
                "notice": "The sender adds to reserves."
            },
            "_delegateCompLikeTo(address)": {
                "notice": "Admin call to delegate the votes of the COMP-like underlying"
            },
            "_reduceReserves(uint256)": {
                "notice": "Accrues interest and reduces reserves by transferring to admin"
            },
            "_setComptroller(address)": {
                "notice": "Sets a new comptroller for the market"
            },
            "_setInterestRateModel(address)": {
                "notice": "accrues interest and updates the interest rate model using _setInterestRateModelFresh"
            },
            "_setPendingAdmin(address)": {
                "notice": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."
            },
            "_setReserveFactor(uint256)": {
                "notice": "accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh"
            },
            "accrualBlockNumber()": {
                "notice": "Block number that interest was last accrued at"
            },
            "accrueInterest()": {
                "notice": "Applies accrued interest to total borrows and reserves"
            },
            "admin()": {
                "notice": "Administrator for this contract"
            },
            "allowance(address,address)": {
                "notice": "Get the current allowance from `owner` for `spender`"
            },
            "approve(address,uint256)": {
                "notice": "Approve `spender` to transfer up to `amount` from `src`"
            },
            "balanceOf(address)": {
                "notice": "Get the token balance of the `owner`"
            },
            "balanceOfUnderlying(address)": {
                "notice": "Get the underlying balance of the `owner`"
            },
            "borrow(uint256)": {
                "notice": "Sender borrows assets from the protocol to their own address"
            },
            "borrowBalanceCurrent(address)": {
                "notice": "Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex"
            },
            "borrowBalanceStored(address)": {
                "notice": "Return the borrow balance of account based on stored data"
            },
            "borrowIndex()": {
                "notice": "Accumulator of the total earned interest rate since the opening of the market"
            },
            "borrowRatePerBlock()": {
                "notice": "Returns the current per-block borrow interest rate for this cToken"
            },
            "comptroller()": {
                "notice": "Contract which oversees inter-cToken operations"
            },
            "constructor": {
                "notice": "Construct a new money market"
            },
            "decimals()": {
                "notice": "EIP-20 token decimals for this token"
            },
            "exchangeRateCurrent()": {
                "notice": "Accrue interest then return the up-to-date exchange rate"
            },
            "exchangeRateStored()": {
                "notice": "Calculates the exchange rate from the underlying to the CToken"
            },
            "getAccountSnapshot(address)": {
                "notice": "Get a snapshot of the account's balances, and the cached exchange rate"
            },
            "getCash()": {
                "notice": "Get cash balance of this cToken in the underlying asset"
            },
            "initialize(address,address,address,uint256,string,string,uint8)": {
                "notice": "Initialize the new money market"
            },
            "initialize(address,address,uint256,string,string,uint8)": {
                "notice": "Initialize the money market"
            },
            "interestRateModel()": {
                "notice": "Model which tells what the current interest rate should be"
            },
            "isCToken()": {
                "notice": "Indicator that this is a CToken contract (for inspection)"
            },
            "liquidateBorrow(address,uint256,address)": {
                "notice": "The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator."
            },
            "mint(uint256)": {
                "notice": "Sender supplies assets into the market and receives cTokens in exchange"
            },
            "name()": {
                "notice": "EIP-20 token name for this token"
            },
            "pendingAdmin()": {
                "notice": "Pending administrator for this contract"
            },
            "protocolSeizeShareMantissa()": {
                "notice": "Share of seized collateral that is added to reserves"
            },
            "redeem(uint256)": {
                "notice": "Sender redeems cTokens in exchange for the underlying asset"
            },
            "redeemUnderlying(uint256)": {
                "notice": "Sender redeems cTokens in exchange for a specified amount of underlying asset"
            },
            "repayBorrow(uint256)": {
                "notice": "Sender repays their own borrow"
            },
            "repayBorrowBehalf(address,uint256)": {
                "notice": "Sender repays a borrow belonging to borrower"
            },
            "reserveFactorMantissa()": {
                "notice": "Fraction of interest currently set aside for reserves"
            },
            "seize(address,address,uint256)": {
                "notice": "Transfers collateral tokens (this market) to the liquidator."
            },
            "supplyRatePerBlock()": {
                "notice": "Returns the current per-block supply interest rate for this cToken"
            },
            "sweepToken(address)": {
                "notice": "A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)"
            },
            "symbol()": {
                "notice": "EIP-20 token symbol for this token"
            },
            "totalBorrows()": {
                "notice": "Total amount of outstanding borrows of the underlying in this market"
            },
            "totalBorrowsCurrent()": {
                "notice": "Returns the current total borrows plus accrued interest"
            },
            "totalReserves()": {
                "notice": "Total amount of reserves of the underlying held in this market"
            },
            "totalSupply()": {
                "notice": "Total number of tokens in circulation"
            },
            "transfer(address,uint256)": {
                "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
            },
            "transferFrom(address,address,uint256)": {
                "notice": "Transfer `amount` tokens from `src` to `dst`"
            },
            "underlying()": {
                "notice": "Underlying asset for this CToken"
            }
        },
        "notice": "CTokens which wrap an EIP-20 underlying and are immutable",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 6043,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "_notEntered",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
            },
            {
                "astId": 6046,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "name",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
            },
            {
                "astId": 6049,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "symbol",
                "offset": 0,
                "slot": "2",
                "type": "t_string_storage"
            },
            {
                "astId": 6052,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "decimals",
                "offset": 0,
                "slot": "3",
                "type": "t_uint8"
            },
            {
                "astId": 6061,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "admin",
                "offset": 1,
                "slot": "3",
                "type": "t_address_payable"
            },
            {
                "astId": 6064,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "pendingAdmin",
                "offset": 0,
                "slot": "4",
                "type": "t_address_payable"
            },
            {
                "astId": 6068,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "comptroller",
                "offset": 0,
                "slot": "5",
                "type": "t_contract(ComptrollerInterface)11011"
            },
            {
                "astId": 6072,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "interestRateModel",
                "offset": 0,
                "slot": "6",
                "type": "t_contract(InterestRateModel)14313"
            },
            {
                "astId": 6074,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "initialExchangeRateMantissa",
                "offset": 0,
                "slot": "7",
                "type": "t_uint256"
            },
            {
                "astId": 6077,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "reserveFactorMantissa",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
            },
            {
                "astId": 6080,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "accrualBlockNumber",
                "offset": 0,
                "slot": "9",
                "type": "t_uint256"
            },
            {
                "astId": 6083,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "borrowIndex",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
            },
            {
                "astId": 6086,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "totalBorrows",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
            },
            {
                "astId": 6089,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "totalReserves",
                "offset": 0,
                "slot": "12",
                "type": "t_uint256"
            },
            {
                "astId": 6092,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "totalSupply",
                "offset": 0,
                "slot": "13",
                "type": "t_uint256"
            },
            {
                "astId": 6096,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "accountTokens",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 6102,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "transferAllowances",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
            },
            {
                "astId": 6112,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "accountBorrows",
                "offset": 0,
                "slot": "16",
                "type": "t_mapping(t_address,t_struct(BorrowSnapshot)6107_storage)"
            },
            {
                "astId": 6435,
                "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                "label": "underlying",
                "offset": 0,
                "slot": "17",
                "type": "t_address"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_address_payable": {
                "encoding": "inplace",
                "label": "address payable",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_contract(ComptrollerInterface)11011": {
                "encoding": "inplace",
                "label": "contract ComptrollerInterface",
                "numberOfBytes": "20"
            },
            "t_contract(InterestRateModel)14313": {
                "encoding": "inplace",
                "label": "contract InterestRateModel",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_uint256)"
            },
            "t_mapping(t_address,t_struct(BorrowSnapshot)6107_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct CTokenStorage.BorrowSnapshot)",
                "numberOfBytes": "32",
                "value": "t_struct(BorrowSnapshot)6107_storage"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(BorrowSnapshot)6107_storage": {
                "encoding": "inplace",
                "label": "struct CTokenStorage.BorrowSnapshot",
                "members": [
                    {
                        "astId": 6104,
                        "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                        "label": "principal",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 6106,
                        "contract": "contracts/CErc20Immutable.sol:CErc20Immutable",
                        "label": "interestIndex",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint8": {
                "encoding": "inplace",
                "label": "uint8",
                "numberOfBytes": "1"
            }
        }
    }
}